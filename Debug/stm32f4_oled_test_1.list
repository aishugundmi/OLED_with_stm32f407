
stm32f4_oled_test_1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007610  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000001c  08007798  08007798  00017798  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080077b4  080077b4  00020090  2**0
                  CONTENTS
  4 .ARM          00000008  080077b4  080077b4  000177b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080077bc  080077bc  00020090  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080077bc  080077bc  000177bc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080077c0  080077c0  000177c0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000090  20000000  080077c4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000c1c  20000090  08007854  00020090  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000cac  08007854  00020cac  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020090  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001c62a  00000000  00000000  000200c0  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00004037  00000000  00000000  0003c6ea  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001268  00000000  00000000  00040728  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000010a0  00000000  00000000  00041990  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00023f75  00000000  00000000  00042a30  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00013e29  00000000  00000000  000669a5  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000cb64b  00000000  00000000  0007a7ce  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00145e19  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004bec  00000000  00000000  00145e94  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000090 	.word	0x20000090
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08007780 	.word	0x08007780

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000094 	.word	0x20000094
 80001c4:	08007780 	.word	0x08007780

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b972 	b.w	80004c4 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9e08      	ldr	r6, [sp, #32]
 80001fe:	4604      	mov	r4, r0
 8000200:	4688      	mov	r8, r1
 8000202:	2b00      	cmp	r3, #0
 8000204:	d14b      	bne.n	800029e <__udivmoddi4+0xa6>
 8000206:	428a      	cmp	r2, r1
 8000208:	4615      	mov	r5, r2
 800020a:	d967      	bls.n	80002dc <__udivmoddi4+0xe4>
 800020c:	fab2 f282 	clz	r2, r2
 8000210:	b14a      	cbz	r2, 8000226 <__udivmoddi4+0x2e>
 8000212:	f1c2 0720 	rsb	r7, r2, #32
 8000216:	fa01 f302 	lsl.w	r3, r1, r2
 800021a:	fa20 f707 	lsr.w	r7, r0, r7
 800021e:	4095      	lsls	r5, r2
 8000220:	ea47 0803 	orr.w	r8, r7, r3
 8000224:	4094      	lsls	r4, r2
 8000226:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800022a:	0c23      	lsrs	r3, r4, #16
 800022c:	fbb8 f7fe 	udiv	r7, r8, lr
 8000230:	fa1f fc85 	uxth.w	ip, r5
 8000234:	fb0e 8817 	mls	r8, lr, r7, r8
 8000238:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800023c:	fb07 f10c 	mul.w	r1, r7, ip
 8000240:	4299      	cmp	r1, r3
 8000242:	d909      	bls.n	8000258 <__udivmoddi4+0x60>
 8000244:	18eb      	adds	r3, r5, r3
 8000246:	f107 30ff 	add.w	r0, r7, #4294967295
 800024a:	f080 811b 	bcs.w	8000484 <__udivmoddi4+0x28c>
 800024e:	4299      	cmp	r1, r3
 8000250:	f240 8118 	bls.w	8000484 <__udivmoddi4+0x28c>
 8000254:	3f02      	subs	r7, #2
 8000256:	442b      	add	r3, r5
 8000258:	1a5b      	subs	r3, r3, r1
 800025a:	b2a4      	uxth	r4, r4
 800025c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000260:	fb0e 3310 	mls	r3, lr, r0, r3
 8000264:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000268:	fb00 fc0c 	mul.w	ip, r0, ip
 800026c:	45a4      	cmp	ip, r4
 800026e:	d909      	bls.n	8000284 <__udivmoddi4+0x8c>
 8000270:	192c      	adds	r4, r5, r4
 8000272:	f100 33ff 	add.w	r3, r0, #4294967295
 8000276:	f080 8107 	bcs.w	8000488 <__udivmoddi4+0x290>
 800027a:	45a4      	cmp	ip, r4
 800027c:	f240 8104 	bls.w	8000488 <__udivmoddi4+0x290>
 8000280:	3802      	subs	r0, #2
 8000282:	442c      	add	r4, r5
 8000284:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000288:	eba4 040c 	sub.w	r4, r4, ip
 800028c:	2700      	movs	r7, #0
 800028e:	b11e      	cbz	r6, 8000298 <__udivmoddi4+0xa0>
 8000290:	40d4      	lsrs	r4, r2
 8000292:	2300      	movs	r3, #0
 8000294:	e9c6 4300 	strd	r4, r3, [r6]
 8000298:	4639      	mov	r1, r7
 800029a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800029e:	428b      	cmp	r3, r1
 80002a0:	d909      	bls.n	80002b6 <__udivmoddi4+0xbe>
 80002a2:	2e00      	cmp	r6, #0
 80002a4:	f000 80eb 	beq.w	800047e <__udivmoddi4+0x286>
 80002a8:	2700      	movs	r7, #0
 80002aa:	e9c6 0100 	strd	r0, r1, [r6]
 80002ae:	4638      	mov	r0, r7
 80002b0:	4639      	mov	r1, r7
 80002b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b6:	fab3 f783 	clz	r7, r3
 80002ba:	2f00      	cmp	r7, #0
 80002bc:	d147      	bne.n	800034e <__udivmoddi4+0x156>
 80002be:	428b      	cmp	r3, r1
 80002c0:	d302      	bcc.n	80002c8 <__udivmoddi4+0xd0>
 80002c2:	4282      	cmp	r2, r0
 80002c4:	f200 80fa 	bhi.w	80004bc <__udivmoddi4+0x2c4>
 80002c8:	1a84      	subs	r4, r0, r2
 80002ca:	eb61 0303 	sbc.w	r3, r1, r3
 80002ce:	2001      	movs	r0, #1
 80002d0:	4698      	mov	r8, r3
 80002d2:	2e00      	cmp	r6, #0
 80002d4:	d0e0      	beq.n	8000298 <__udivmoddi4+0xa0>
 80002d6:	e9c6 4800 	strd	r4, r8, [r6]
 80002da:	e7dd      	b.n	8000298 <__udivmoddi4+0xa0>
 80002dc:	b902      	cbnz	r2, 80002e0 <__udivmoddi4+0xe8>
 80002de:	deff      	udf	#255	; 0xff
 80002e0:	fab2 f282 	clz	r2, r2
 80002e4:	2a00      	cmp	r2, #0
 80002e6:	f040 808f 	bne.w	8000408 <__udivmoddi4+0x210>
 80002ea:	1b49      	subs	r1, r1, r5
 80002ec:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80002f0:	fa1f f885 	uxth.w	r8, r5
 80002f4:	2701      	movs	r7, #1
 80002f6:	fbb1 fcfe 	udiv	ip, r1, lr
 80002fa:	0c23      	lsrs	r3, r4, #16
 80002fc:	fb0e 111c 	mls	r1, lr, ip, r1
 8000300:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000304:	fb08 f10c 	mul.w	r1, r8, ip
 8000308:	4299      	cmp	r1, r3
 800030a:	d907      	bls.n	800031c <__udivmoddi4+0x124>
 800030c:	18eb      	adds	r3, r5, r3
 800030e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000312:	d202      	bcs.n	800031a <__udivmoddi4+0x122>
 8000314:	4299      	cmp	r1, r3
 8000316:	f200 80cd 	bhi.w	80004b4 <__udivmoddi4+0x2bc>
 800031a:	4684      	mov	ip, r0
 800031c:	1a59      	subs	r1, r3, r1
 800031e:	b2a3      	uxth	r3, r4
 8000320:	fbb1 f0fe 	udiv	r0, r1, lr
 8000324:	fb0e 1410 	mls	r4, lr, r0, r1
 8000328:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 800032c:	fb08 f800 	mul.w	r8, r8, r0
 8000330:	45a0      	cmp	r8, r4
 8000332:	d907      	bls.n	8000344 <__udivmoddi4+0x14c>
 8000334:	192c      	adds	r4, r5, r4
 8000336:	f100 33ff 	add.w	r3, r0, #4294967295
 800033a:	d202      	bcs.n	8000342 <__udivmoddi4+0x14a>
 800033c:	45a0      	cmp	r8, r4
 800033e:	f200 80b6 	bhi.w	80004ae <__udivmoddi4+0x2b6>
 8000342:	4618      	mov	r0, r3
 8000344:	eba4 0408 	sub.w	r4, r4, r8
 8000348:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800034c:	e79f      	b.n	800028e <__udivmoddi4+0x96>
 800034e:	f1c7 0c20 	rsb	ip, r7, #32
 8000352:	40bb      	lsls	r3, r7
 8000354:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000358:	ea4e 0e03 	orr.w	lr, lr, r3
 800035c:	fa01 f407 	lsl.w	r4, r1, r7
 8000360:	fa20 f50c 	lsr.w	r5, r0, ip
 8000364:	fa21 f30c 	lsr.w	r3, r1, ip
 8000368:	ea4f 481e 	mov.w	r8, lr, lsr #16
 800036c:	4325      	orrs	r5, r4
 800036e:	fbb3 f9f8 	udiv	r9, r3, r8
 8000372:	0c2c      	lsrs	r4, r5, #16
 8000374:	fb08 3319 	mls	r3, r8, r9, r3
 8000378:	fa1f fa8e 	uxth.w	sl, lr
 800037c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000380:	fb09 f40a 	mul.w	r4, r9, sl
 8000384:	429c      	cmp	r4, r3
 8000386:	fa02 f207 	lsl.w	r2, r2, r7
 800038a:	fa00 f107 	lsl.w	r1, r0, r7
 800038e:	d90b      	bls.n	80003a8 <__udivmoddi4+0x1b0>
 8000390:	eb1e 0303 	adds.w	r3, lr, r3
 8000394:	f109 30ff 	add.w	r0, r9, #4294967295
 8000398:	f080 8087 	bcs.w	80004aa <__udivmoddi4+0x2b2>
 800039c:	429c      	cmp	r4, r3
 800039e:	f240 8084 	bls.w	80004aa <__udivmoddi4+0x2b2>
 80003a2:	f1a9 0902 	sub.w	r9, r9, #2
 80003a6:	4473      	add	r3, lr
 80003a8:	1b1b      	subs	r3, r3, r4
 80003aa:	b2ad      	uxth	r5, r5
 80003ac:	fbb3 f0f8 	udiv	r0, r3, r8
 80003b0:	fb08 3310 	mls	r3, r8, r0, r3
 80003b4:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80003b8:	fb00 fa0a 	mul.w	sl, r0, sl
 80003bc:	45a2      	cmp	sl, r4
 80003be:	d908      	bls.n	80003d2 <__udivmoddi4+0x1da>
 80003c0:	eb1e 0404 	adds.w	r4, lr, r4
 80003c4:	f100 33ff 	add.w	r3, r0, #4294967295
 80003c8:	d26b      	bcs.n	80004a2 <__udivmoddi4+0x2aa>
 80003ca:	45a2      	cmp	sl, r4
 80003cc:	d969      	bls.n	80004a2 <__udivmoddi4+0x2aa>
 80003ce:	3802      	subs	r0, #2
 80003d0:	4474      	add	r4, lr
 80003d2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80003d6:	fba0 8902 	umull	r8, r9, r0, r2
 80003da:	eba4 040a 	sub.w	r4, r4, sl
 80003de:	454c      	cmp	r4, r9
 80003e0:	46c2      	mov	sl, r8
 80003e2:	464b      	mov	r3, r9
 80003e4:	d354      	bcc.n	8000490 <__udivmoddi4+0x298>
 80003e6:	d051      	beq.n	800048c <__udivmoddi4+0x294>
 80003e8:	2e00      	cmp	r6, #0
 80003ea:	d069      	beq.n	80004c0 <__udivmoddi4+0x2c8>
 80003ec:	ebb1 050a 	subs.w	r5, r1, sl
 80003f0:	eb64 0403 	sbc.w	r4, r4, r3
 80003f4:	fa04 fc0c 	lsl.w	ip, r4, ip
 80003f8:	40fd      	lsrs	r5, r7
 80003fa:	40fc      	lsrs	r4, r7
 80003fc:	ea4c 0505 	orr.w	r5, ip, r5
 8000400:	e9c6 5400 	strd	r5, r4, [r6]
 8000404:	2700      	movs	r7, #0
 8000406:	e747      	b.n	8000298 <__udivmoddi4+0xa0>
 8000408:	f1c2 0320 	rsb	r3, r2, #32
 800040c:	fa20 f703 	lsr.w	r7, r0, r3
 8000410:	4095      	lsls	r5, r2
 8000412:	fa01 f002 	lsl.w	r0, r1, r2
 8000416:	fa21 f303 	lsr.w	r3, r1, r3
 800041a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800041e:	4338      	orrs	r0, r7
 8000420:	0c01      	lsrs	r1, r0, #16
 8000422:	fbb3 f7fe 	udiv	r7, r3, lr
 8000426:	fa1f f885 	uxth.w	r8, r5
 800042a:	fb0e 3317 	mls	r3, lr, r7, r3
 800042e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000432:	fb07 f308 	mul.w	r3, r7, r8
 8000436:	428b      	cmp	r3, r1
 8000438:	fa04 f402 	lsl.w	r4, r4, r2
 800043c:	d907      	bls.n	800044e <__udivmoddi4+0x256>
 800043e:	1869      	adds	r1, r5, r1
 8000440:	f107 3cff 	add.w	ip, r7, #4294967295
 8000444:	d22f      	bcs.n	80004a6 <__udivmoddi4+0x2ae>
 8000446:	428b      	cmp	r3, r1
 8000448:	d92d      	bls.n	80004a6 <__udivmoddi4+0x2ae>
 800044a:	3f02      	subs	r7, #2
 800044c:	4429      	add	r1, r5
 800044e:	1acb      	subs	r3, r1, r3
 8000450:	b281      	uxth	r1, r0
 8000452:	fbb3 f0fe 	udiv	r0, r3, lr
 8000456:	fb0e 3310 	mls	r3, lr, r0, r3
 800045a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800045e:	fb00 f308 	mul.w	r3, r0, r8
 8000462:	428b      	cmp	r3, r1
 8000464:	d907      	bls.n	8000476 <__udivmoddi4+0x27e>
 8000466:	1869      	adds	r1, r5, r1
 8000468:	f100 3cff 	add.w	ip, r0, #4294967295
 800046c:	d217      	bcs.n	800049e <__udivmoddi4+0x2a6>
 800046e:	428b      	cmp	r3, r1
 8000470:	d915      	bls.n	800049e <__udivmoddi4+0x2a6>
 8000472:	3802      	subs	r0, #2
 8000474:	4429      	add	r1, r5
 8000476:	1ac9      	subs	r1, r1, r3
 8000478:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 800047c:	e73b      	b.n	80002f6 <__udivmoddi4+0xfe>
 800047e:	4637      	mov	r7, r6
 8000480:	4630      	mov	r0, r6
 8000482:	e709      	b.n	8000298 <__udivmoddi4+0xa0>
 8000484:	4607      	mov	r7, r0
 8000486:	e6e7      	b.n	8000258 <__udivmoddi4+0x60>
 8000488:	4618      	mov	r0, r3
 800048a:	e6fb      	b.n	8000284 <__udivmoddi4+0x8c>
 800048c:	4541      	cmp	r1, r8
 800048e:	d2ab      	bcs.n	80003e8 <__udivmoddi4+0x1f0>
 8000490:	ebb8 0a02 	subs.w	sl, r8, r2
 8000494:	eb69 020e 	sbc.w	r2, r9, lr
 8000498:	3801      	subs	r0, #1
 800049a:	4613      	mov	r3, r2
 800049c:	e7a4      	b.n	80003e8 <__udivmoddi4+0x1f0>
 800049e:	4660      	mov	r0, ip
 80004a0:	e7e9      	b.n	8000476 <__udivmoddi4+0x27e>
 80004a2:	4618      	mov	r0, r3
 80004a4:	e795      	b.n	80003d2 <__udivmoddi4+0x1da>
 80004a6:	4667      	mov	r7, ip
 80004a8:	e7d1      	b.n	800044e <__udivmoddi4+0x256>
 80004aa:	4681      	mov	r9, r0
 80004ac:	e77c      	b.n	80003a8 <__udivmoddi4+0x1b0>
 80004ae:	3802      	subs	r0, #2
 80004b0:	442c      	add	r4, r5
 80004b2:	e747      	b.n	8000344 <__udivmoddi4+0x14c>
 80004b4:	f1ac 0c02 	sub.w	ip, ip, #2
 80004b8:	442b      	add	r3, r5
 80004ba:	e72f      	b.n	800031c <__udivmoddi4+0x124>
 80004bc:	4638      	mov	r0, r7
 80004be:	e708      	b.n	80002d2 <__udivmoddi4+0xda>
 80004c0:	4637      	mov	r7, r6
 80004c2:	e6e9      	b.n	8000298 <__udivmoddi4+0xa0>

080004c4 <__aeabi_idiv0>:
 80004c4:	4770      	bx	lr
 80004c6:	bf00      	nop

080004c8 <MX_GPIO_Init>:
        * EXTI
     PC3   ------> I2S2_SD
     PB10   ------> I2S2_CK
*/
void MX_GPIO_Init(void)
{
 80004c8:	b580      	push	{r7, lr}
 80004ca:	b08c      	sub	sp, #48	; 0x30
 80004cc:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80004ce:	f107 031c 	add.w	r3, r7, #28
 80004d2:	2200      	movs	r2, #0
 80004d4:	601a      	str	r2, [r3, #0]
 80004d6:	605a      	str	r2, [r3, #4]
 80004d8:	609a      	str	r2, [r3, #8]
 80004da:	60da      	str	r2, [r3, #12]
 80004dc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80004de:	2300      	movs	r3, #0
 80004e0:	61bb      	str	r3, [r7, #24]
 80004e2:	4b72      	ldr	r3, [pc, #456]	; (80006ac <MX_GPIO_Init+0x1e4>)
 80004e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80004e6:	4a71      	ldr	r2, [pc, #452]	; (80006ac <MX_GPIO_Init+0x1e4>)
 80004e8:	f043 0310 	orr.w	r3, r3, #16
 80004ec:	6313      	str	r3, [r2, #48]	; 0x30
 80004ee:	4b6f      	ldr	r3, [pc, #444]	; (80006ac <MX_GPIO_Init+0x1e4>)
 80004f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80004f2:	f003 0310 	and.w	r3, r3, #16
 80004f6:	61bb      	str	r3, [r7, #24]
 80004f8:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80004fa:	2300      	movs	r3, #0
 80004fc:	617b      	str	r3, [r7, #20]
 80004fe:	4b6b      	ldr	r3, [pc, #428]	; (80006ac <MX_GPIO_Init+0x1e4>)
 8000500:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000502:	4a6a      	ldr	r2, [pc, #424]	; (80006ac <MX_GPIO_Init+0x1e4>)
 8000504:	f043 0304 	orr.w	r3, r3, #4
 8000508:	6313      	str	r3, [r2, #48]	; 0x30
 800050a:	4b68      	ldr	r3, [pc, #416]	; (80006ac <MX_GPIO_Init+0x1e4>)
 800050c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800050e:	f003 0304 	and.w	r3, r3, #4
 8000512:	617b      	str	r3, [r7, #20]
 8000514:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000516:	2300      	movs	r3, #0
 8000518:	613b      	str	r3, [r7, #16]
 800051a:	4b64      	ldr	r3, [pc, #400]	; (80006ac <MX_GPIO_Init+0x1e4>)
 800051c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800051e:	4a63      	ldr	r2, [pc, #396]	; (80006ac <MX_GPIO_Init+0x1e4>)
 8000520:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000524:	6313      	str	r3, [r2, #48]	; 0x30
 8000526:	4b61      	ldr	r3, [pc, #388]	; (80006ac <MX_GPIO_Init+0x1e4>)
 8000528:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800052a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800052e:	613b      	str	r3, [r7, #16]
 8000530:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000532:	2300      	movs	r3, #0
 8000534:	60fb      	str	r3, [r7, #12]
 8000536:	4b5d      	ldr	r3, [pc, #372]	; (80006ac <MX_GPIO_Init+0x1e4>)
 8000538:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800053a:	4a5c      	ldr	r2, [pc, #368]	; (80006ac <MX_GPIO_Init+0x1e4>)
 800053c:	f043 0301 	orr.w	r3, r3, #1
 8000540:	6313      	str	r3, [r2, #48]	; 0x30
 8000542:	4b5a      	ldr	r3, [pc, #360]	; (80006ac <MX_GPIO_Init+0x1e4>)
 8000544:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000546:	f003 0301 	and.w	r3, r3, #1
 800054a:	60fb      	str	r3, [r7, #12]
 800054c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800054e:	2300      	movs	r3, #0
 8000550:	60bb      	str	r3, [r7, #8]
 8000552:	4b56      	ldr	r3, [pc, #344]	; (80006ac <MX_GPIO_Init+0x1e4>)
 8000554:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000556:	4a55      	ldr	r2, [pc, #340]	; (80006ac <MX_GPIO_Init+0x1e4>)
 8000558:	f043 0302 	orr.w	r3, r3, #2
 800055c:	6313      	str	r3, [r2, #48]	; 0x30
 800055e:	4b53      	ldr	r3, [pc, #332]	; (80006ac <MX_GPIO_Init+0x1e4>)
 8000560:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000562:	f003 0302 	and.w	r3, r3, #2
 8000566:	60bb      	str	r3, [r7, #8]
 8000568:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800056a:	2300      	movs	r3, #0
 800056c:	607b      	str	r3, [r7, #4]
 800056e:	4b4f      	ldr	r3, [pc, #316]	; (80006ac <MX_GPIO_Init+0x1e4>)
 8000570:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000572:	4a4e      	ldr	r2, [pc, #312]	; (80006ac <MX_GPIO_Init+0x1e4>)
 8000574:	f043 0308 	orr.w	r3, r3, #8
 8000578:	6313      	str	r3, [r2, #48]	; 0x30
 800057a:	4b4c      	ldr	r3, [pc, #304]	; (80006ac <MX_GPIO_Init+0x1e4>)
 800057c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800057e:	f003 0308 	and.w	r3, r3, #8
 8000582:	607b      	str	r3, [r7, #4]
 8000584:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, CS_I2C_SPI_Pin|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_11, GPIO_PIN_RESET);
 8000586:	2200      	movs	r2, #0
 8000588:	f640 0138 	movw	r1, #2104	; 0x838
 800058c:	4848      	ldr	r0, [pc, #288]	; (80006b0 <MX_GPIO_Init+0x1e8>)
 800058e:	f001 fbe9 	bl	8001d64 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8000592:	2201      	movs	r2, #1
 8000594:	2101      	movs	r1, #1
 8000596:	4847      	ldr	r0, [pc, #284]	; (80006b4 <MX_GPIO_Init+0x1ec>)
 8000598:	f001 fbe4 	bl	8001d64 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin 
 800059c:	2200      	movs	r2, #0
 800059e:	f24f 0110 	movw	r1, #61456	; 0xf010
 80005a2:	4845      	ldr	r0, [pc, #276]	; (80006b8 <MX_GPIO_Init+0x1f0>)
 80005a4:	f001 fbde 	bl	8001d64 <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : PEPin PE4 PE5 PE11 */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_11;
 80005a8:	f640 0338 	movw	r3, #2104	; 0x838
 80005ac:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80005ae:	2301      	movs	r3, #1
 80005b0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005b2:	2300      	movs	r3, #0
 80005b4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80005b6:	2300      	movs	r3, #0
 80005b8:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80005ba:	f107 031c 	add.w	r3, r7, #28
 80005be:	4619      	mov	r1, r3
 80005c0:	483b      	ldr	r0, [pc, #236]	; (80006b0 <MX_GPIO_Init+0x1e8>)
 80005c2:	f001 fa35 	bl	8001a30 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 80005c6:	2301      	movs	r3, #1
 80005c8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80005ca:	2301      	movs	r3, #1
 80005cc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005ce:	2300      	movs	r3, #0
 80005d0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80005d2:	2300      	movs	r3, #0
 80005d4:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 80005d6:	f107 031c 	add.w	r3, r7, #28
 80005da:	4619      	mov	r1, r3
 80005dc:	4835      	ldr	r0, [pc, #212]	; (80006b4 <MX_GPIO_Init+0x1ec>)
 80005de:	f001 fa27 	bl	8001a30 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 80005e2:	2308      	movs	r3, #8
 80005e4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80005e6:	2302      	movs	r3, #2
 80005e8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005ea:	2300      	movs	r3, #0
 80005ec:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80005ee:	2300      	movs	r3, #0
 80005f0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80005f2:	2305      	movs	r3, #5
 80005f4:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 80005f6:	f107 031c 	add.w	r3, r7, #28
 80005fa:	4619      	mov	r1, r3
 80005fc:	482d      	ldr	r0, [pc, #180]	; (80006b4 <MX_GPIO_Init+0x1ec>)
 80005fe:	f001 fa17 	bl	8001a30 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000602:	2301      	movs	r3, #1
 8000604:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000606:	4b2d      	ldr	r3, [pc, #180]	; (80006bc <MX_GPIO_Init+0x1f4>)
 8000608:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800060a:	2300      	movs	r3, #0
 800060c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800060e:	f107 031c 	add.w	r3, r7, #28
 8000612:	4619      	mov	r1, r3
 8000614:	482a      	ldr	r0, [pc, #168]	; (80006c0 <MX_GPIO_Init+0x1f8>)
 8000616:	f001 fa0b 	bl	8001a30 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 800061a:	2304      	movs	r3, #4
 800061c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800061e:	2300      	movs	r3, #0
 8000620:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000622:	2300      	movs	r3, #0
 8000624:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8000626:	f107 031c 	add.w	r3, r7, #28
 800062a:	4619      	mov	r1, r3
 800062c:	4825      	ldr	r0, [pc, #148]	; (80006c4 <MX_GPIO_Init+0x1fc>)
 800062e:	f001 f9ff 	bl	8001a30 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 8000632:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000636:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000638:	2302      	movs	r3, #2
 800063a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800063c:	2300      	movs	r3, #0
 800063e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000640:	2300      	movs	r3, #0
 8000642:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000644:	2305      	movs	r3, #5
 8000646:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 8000648:	f107 031c 	add.w	r3, r7, #28
 800064c:	4619      	mov	r1, r3
 800064e:	481d      	ldr	r0, [pc, #116]	; (80006c4 <MX_GPIO_Init+0x1fc>)
 8000650:	f001 f9ee 	bl	8001a30 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin PDPin PDPin 
                           PDPin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin 
 8000654:	f24f 0310 	movw	r3, #61456	; 0xf010
 8000658:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800065a:	2301      	movs	r3, #1
 800065c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800065e:	2300      	movs	r3, #0
 8000660:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000662:	2300      	movs	r3, #0
 8000664:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000666:	f107 031c 	add.w	r3, r7, #28
 800066a:	4619      	mov	r1, r3
 800066c:	4812      	ldr	r0, [pc, #72]	; (80006b8 <MX_GPIO_Init+0x1f0>)
 800066e:	f001 f9df 	bl	8001a30 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8000672:	2320      	movs	r3, #32
 8000674:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000676:	2300      	movs	r3, #0
 8000678:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800067a:	2300      	movs	r3, #0
 800067c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 800067e:	f107 031c 	add.w	r3, r7, #28
 8000682:	4619      	mov	r1, r3
 8000684:	480c      	ldr	r0, [pc, #48]	; (80006b8 <MX_GPIO_Init+0x1f0>)
 8000686:	f001 f9d3 	bl	8001a30 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 800068a:	2302      	movs	r3, #2
 800068c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 800068e:	4b0b      	ldr	r3, [pc, #44]	; (80006bc <MX_GPIO_Init+0x1f4>)
 8000690:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000692:	2300      	movs	r3, #0
 8000694:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 8000696:	f107 031c 	add.w	r3, r7, #28
 800069a:	4619      	mov	r1, r3
 800069c:	4804      	ldr	r0, [pc, #16]	; (80006b0 <MX_GPIO_Init+0x1e8>)
 800069e:	f001 f9c7 	bl	8001a30 <HAL_GPIO_Init>

}
 80006a2:	bf00      	nop
 80006a4:	3730      	adds	r7, #48	; 0x30
 80006a6:	46bd      	mov	sp, r7
 80006a8:	bd80      	pop	{r7, pc}
 80006aa:	bf00      	nop
 80006ac:	40023800 	.word	0x40023800
 80006b0:	40021000 	.word	0x40021000
 80006b4:	40020800 	.word	0x40020800
 80006b8:	40020c00 	.word	0x40020c00
 80006bc:	10120000 	.word	0x10120000
 80006c0:	40020000 	.word	0x40020000
 80006c4:	40020400 	.word	0x40020400

080006c8 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 80006c8:	b580      	push	{r7, lr}
 80006ca:	af00      	add	r7, sp, #0

  hi2c1.Instance = I2C1;
 80006cc:	4b12      	ldr	r3, [pc, #72]	; (8000718 <MX_I2C1_Init+0x50>)
 80006ce:	4a13      	ldr	r2, [pc, #76]	; (800071c <MX_I2C1_Init+0x54>)
 80006d0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80006d2:	4b11      	ldr	r3, [pc, #68]	; (8000718 <MX_I2C1_Init+0x50>)
 80006d4:	4a12      	ldr	r2, [pc, #72]	; (8000720 <MX_I2C1_Init+0x58>)
 80006d6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80006d8:	4b0f      	ldr	r3, [pc, #60]	; (8000718 <MX_I2C1_Init+0x50>)
 80006da:	2200      	movs	r2, #0
 80006dc:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80006de:	4b0e      	ldr	r3, [pc, #56]	; (8000718 <MX_I2C1_Init+0x50>)
 80006e0:	2200      	movs	r2, #0
 80006e2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80006e4:	4b0c      	ldr	r3, [pc, #48]	; (8000718 <MX_I2C1_Init+0x50>)
 80006e6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80006ea:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80006ec:	4b0a      	ldr	r3, [pc, #40]	; (8000718 <MX_I2C1_Init+0x50>)
 80006ee:	2200      	movs	r2, #0
 80006f0:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80006f2:	4b09      	ldr	r3, [pc, #36]	; (8000718 <MX_I2C1_Init+0x50>)
 80006f4:	2200      	movs	r2, #0
 80006f6:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80006f8:	4b07      	ldr	r3, [pc, #28]	; (8000718 <MX_I2C1_Init+0x50>)
 80006fa:	2200      	movs	r2, #0
 80006fc:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80006fe:	4b06      	ldr	r3, [pc, #24]	; (8000718 <MX_I2C1_Init+0x50>)
 8000700:	2200      	movs	r2, #0
 8000702:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000704:	4804      	ldr	r0, [pc, #16]	; (8000718 <MX_I2C1_Init+0x50>)
 8000706:	f002 ff91 	bl	800362c <HAL_I2C_Init>
 800070a:	4603      	mov	r3, r0
 800070c:	2b00      	cmp	r3, #0
 800070e:	d001      	beq.n	8000714 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000710:	f000 fa38 	bl	8000b84 <Error_Handler>
  }

}
 8000714:	bf00      	nop
 8000716:	bd80      	pop	{r7, pc}
 8000718:	200000c8 	.word	0x200000c8
 800071c:	40005400 	.word	0x40005400
 8000720:	000186a0 	.word	0x000186a0

08000724 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000724:	b580      	push	{r7, lr}
 8000726:	b08a      	sub	sp, #40	; 0x28
 8000728:	af00      	add	r7, sp, #0
 800072a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800072c:	f107 0314 	add.w	r3, r7, #20
 8000730:	2200      	movs	r2, #0
 8000732:	601a      	str	r2, [r3, #0]
 8000734:	605a      	str	r2, [r3, #4]
 8000736:	609a      	str	r2, [r3, #8]
 8000738:	60da      	str	r2, [r3, #12]
 800073a:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 800073c:	687b      	ldr	r3, [r7, #4]
 800073e:	681b      	ldr	r3, [r3, #0]
 8000740:	4a19      	ldr	r2, [pc, #100]	; (80007a8 <HAL_I2C_MspInit+0x84>)
 8000742:	4293      	cmp	r3, r2
 8000744:	d12c      	bne.n	80007a0 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000746:	2300      	movs	r3, #0
 8000748:	613b      	str	r3, [r7, #16]
 800074a:	4b18      	ldr	r3, [pc, #96]	; (80007ac <HAL_I2C_MspInit+0x88>)
 800074c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800074e:	4a17      	ldr	r2, [pc, #92]	; (80007ac <HAL_I2C_MspInit+0x88>)
 8000750:	f043 0302 	orr.w	r3, r3, #2
 8000754:	6313      	str	r3, [r2, #48]	; 0x30
 8000756:	4b15      	ldr	r3, [pc, #84]	; (80007ac <HAL_I2C_MspInit+0x88>)
 8000758:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800075a:	f003 0302 	and.w	r3, r3, #2
 800075e:	613b      	str	r3, [r7, #16]
 8000760:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration    
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA 
    */
    GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 8000762:	f44f 7310 	mov.w	r3, #576	; 0x240
 8000766:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000768:	2312      	movs	r3, #18
 800076a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800076c:	2301      	movs	r3, #1
 800076e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000770:	2300      	movs	r3, #0
 8000772:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000774:	2304      	movs	r3, #4
 8000776:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000778:	f107 0314 	add.w	r3, r7, #20
 800077c:	4619      	mov	r1, r3
 800077e:	480c      	ldr	r0, [pc, #48]	; (80007b0 <HAL_I2C_MspInit+0x8c>)
 8000780:	f001 f956 	bl	8001a30 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000784:	2300      	movs	r3, #0
 8000786:	60fb      	str	r3, [r7, #12]
 8000788:	4b08      	ldr	r3, [pc, #32]	; (80007ac <HAL_I2C_MspInit+0x88>)
 800078a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800078c:	4a07      	ldr	r2, [pc, #28]	; (80007ac <HAL_I2C_MspInit+0x88>)
 800078e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000792:	6413      	str	r3, [r2, #64]	; 0x40
 8000794:	4b05      	ldr	r3, [pc, #20]	; (80007ac <HAL_I2C_MspInit+0x88>)
 8000796:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000798:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800079c:	60fb      	str	r3, [r7, #12]
 800079e:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 80007a0:	bf00      	nop
 80007a2:	3728      	adds	r7, #40	; 0x28
 80007a4:	46bd      	mov	sp, r7
 80007a6:	bd80      	pop	{r7, pc}
 80007a8:	40005400 	.word	0x40005400
 80007ac:	40023800 	.word	0x40023800
 80007b0:	40020400 	.word	0x40020400

080007b4 <MX_I2S3_Init>:

I2S_HandleTypeDef hi2s3;

/* I2S3 init function */
void MX_I2S3_Init(void)
{
 80007b4:	b580      	push	{r7, lr}
 80007b6:	af00      	add	r7, sp, #0

  hi2s3.Instance = SPI3;
 80007b8:	4b13      	ldr	r3, [pc, #76]	; (8000808 <MX_I2S3_Init+0x54>)
 80007ba:	4a14      	ldr	r2, [pc, #80]	; (800080c <MX_I2S3_Init+0x58>)
 80007bc:	601a      	str	r2, [r3, #0]
  hi2s3.Init.Mode = I2S_MODE_MASTER_TX;
 80007be:	4b12      	ldr	r3, [pc, #72]	; (8000808 <MX_I2S3_Init+0x54>)
 80007c0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80007c4:	605a      	str	r2, [r3, #4]
  hi2s3.Init.Standard = I2S_STANDARD_PHILIPS;
 80007c6:	4b10      	ldr	r3, [pc, #64]	; (8000808 <MX_I2S3_Init+0x54>)
 80007c8:	2200      	movs	r2, #0
 80007ca:	609a      	str	r2, [r3, #8]
  hi2s3.Init.DataFormat = I2S_DATAFORMAT_16B;
 80007cc:	4b0e      	ldr	r3, [pc, #56]	; (8000808 <MX_I2S3_Init+0x54>)
 80007ce:	2200      	movs	r2, #0
 80007d0:	60da      	str	r2, [r3, #12]
  hi2s3.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 80007d2:	4b0d      	ldr	r3, [pc, #52]	; (8000808 <MX_I2S3_Init+0x54>)
 80007d4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80007d8:	611a      	str	r2, [r3, #16]
  hi2s3.Init.AudioFreq = I2S_AUDIOFREQ_96K;
 80007da:	4b0b      	ldr	r3, [pc, #44]	; (8000808 <MX_I2S3_Init+0x54>)
 80007dc:	4a0c      	ldr	r2, [pc, #48]	; (8000810 <MX_I2S3_Init+0x5c>)
 80007de:	615a      	str	r2, [r3, #20]
  hi2s3.Init.CPOL = I2S_CPOL_LOW;
 80007e0:	4b09      	ldr	r3, [pc, #36]	; (8000808 <MX_I2S3_Init+0x54>)
 80007e2:	2200      	movs	r2, #0
 80007e4:	619a      	str	r2, [r3, #24]
  hi2s3.Init.ClockSource = I2S_CLOCK_PLL;
 80007e6:	4b08      	ldr	r3, [pc, #32]	; (8000808 <MX_I2S3_Init+0x54>)
 80007e8:	2200      	movs	r2, #0
 80007ea:	61da      	str	r2, [r3, #28]
  hi2s3.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 80007ec:	4b06      	ldr	r3, [pc, #24]	; (8000808 <MX_I2S3_Init+0x54>)
 80007ee:	2200      	movs	r2, #0
 80007f0:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s3) != HAL_OK)
 80007f2:	4805      	ldr	r0, [pc, #20]	; (8000808 <MX_I2S3_Init+0x54>)
 80007f4:	f003 f852 	bl	800389c <HAL_I2S_Init>
 80007f8:	4603      	mov	r3, r0
 80007fa:	2b00      	cmp	r3, #0
 80007fc:	d001      	beq.n	8000802 <MX_I2S3_Init+0x4e>
  {
    Error_Handler();
 80007fe:	f000 f9c1 	bl	8000b84 <Error_Handler>
  }

}
 8000802:	bf00      	nop
 8000804:	bd80      	pop	{r7, pc}
 8000806:	bf00      	nop
 8000808:	2000011c 	.word	0x2000011c
 800080c:	40003c00 	.word	0x40003c00
 8000810:	00017700 	.word	0x00017700

08000814 <HAL_I2S_MspInit>:

void HAL_I2S_MspInit(I2S_HandleTypeDef* i2sHandle)
{
 8000814:	b580      	push	{r7, lr}
 8000816:	b08a      	sub	sp, #40	; 0x28
 8000818:	af00      	add	r7, sp, #0
 800081a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800081c:	f107 0314 	add.w	r3, r7, #20
 8000820:	2200      	movs	r2, #0
 8000822:	601a      	str	r2, [r3, #0]
 8000824:	605a      	str	r2, [r3, #4]
 8000826:	609a      	str	r2, [r3, #8]
 8000828:	60da      	str	r2, [r3, #12]
 800082a:	611a      	str	r2, [r3, #16]
  if(i2sHandle->Instance==SPI3)
 800082c:	687b      	ldr	r3, [r7, #4]
 800082e:	681b      	ldr	r3, [r3, #0]
 8000830:	4a28      	ldr	r2, [pc, #160]	; (80008d4 <HAL_I2S_MspInit+0xc0>)
 8000832:	4293      	cmp	r3, r2
 8000834:	d14a      	bne.n	80008cc <HAL_I2S_MspInit+0xb8>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* I2S3 clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8000836:	2300      	movs	r3, #0
 8000838:	613b      	str	r3, [r7, #16]
 800083a:	4b27      	ldr	r3, [pc, #156]	; (80008d8 <HAL_I2S_MspInit+0xc4>)
 800083c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800083e:	4a26      	ldr	r2, [pc, #152]	; (80008d8 <HAL_I2S_MspInit+0xc4>)
 8000840:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000844:	6413      	str	r3, [r2, #64]	; 0x40
 8000846:	4b24      	ldr	r3, [pc, #144]	; (80008d8 <HAL_I2S_MspInit+0xc4>)
 8000848:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800084a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800084e:	613b      	str	r3, [r7, #16]
 8000850:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000852:	2300      	movs	r3, #0
 8000854:	60fb      	str	r3, [r7, #12]
 8000856:	4b20      	ldr	r3, [pc, #128]	; (80008d8 <HAL_I2S_MspInit+0xc4>)
 8000858:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800085a:	4a1f      	ldr	r2, [pc, #124]	; (80008d8 <HAL_I2S_MspInit+0xc4>)
 800085c:	f043 0301 	orr.w	r3, r3, #1
 8000860:	6313      	str	r3, [r2, #48]	; 0x30
 8000862:	4b1d      	ldr	r3, [pc, #116]	; (80008d8 <HAL_I2S_MspInit+0xc4>)
 8000864:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000866:	f003 0301 	and.w	r3, r3, #1
 800086a:	60fb      	str	r3, [r7, #12]
 800086c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800086e:	2300      	movs	r3, #0
 8000870:	60bb      	str	r3, [r7, #8]
 8000872:	4b19      	ldr	r3, [pc, #100]	; (80008d8 <HAL_I2S_MspInit+0xc4>)
 8000874:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000876:	4a18      	ldr	r2, [pc, #96]	; (80008d8 <HAL_I2S_MspInit+0xc4>)
 8000878:	f043 0304 	orr.w	r3, r3, #4
 800087c:	6313      	str	r3, [r2, #48]	; 0x30
 800087e:	4b16      	ldr	r3, [pc, #88]	; (80008d8 <HAL_I2S_MspInit+0xc4>)
 8000880:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000882:	f003 0304 	and.w	r3, r3, #4
 8000886:	60bb      	str	r3, [r7, #8]
 8000888:	68bb      	ldr	r3, [r7, #8]
    PA4     ------> I2S3_WS
    PC7     ------> I2S3_MCK
    PC10     ------> I2S3_CK
    PC12     ------> I2S3_SD 
    */
    GPIO_InitStruct.Pin = I2S3_WS_Pin;
 800088a:	2310      	movs	r3, #16
 800088c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800088e:	2302      	movs	r3, #2
 8000890:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000892:	2300      	movs	r3, #0
 8000894:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000896:	2300      	movs	r3, #0
 8000898:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 800089a:	2306      	movs	r3, #6
 800089c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 800089e:	f107 0314 	add.w	r3, r7, #20
 80008a2:	4619      	mov	r1, r3
 80008a4:	480d      	ldr	r0, [pc, #52]	; (80008dc <HAL_I2S_MspInit+0xc8>)
 80008a6:	f001 f8c3 	bl	8001a30 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 80008aa:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
 80008ae:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008b0:	2302      	movs	r3, #2
 80008b2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008b4:	2300      	movs	r3, #0
 80008b6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008b8:	2300      	movs	r3, #0
 80008ba:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80008bc:	2306      	movs	r3, #6
 80008be:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80008c0:	f107 0314 	add.w	r3, r7, #20
 80008c4:	4619      	mov	r1, r3
 80008c6:	4806      	ldr	r0, [pc, #24]	; (80008e0 <HAL_I2S_MspInit+0xcc>)
 80008c8:	f001 f8b2 	bl	8001a30 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }
}
 80008cc:	bf00      	nop
 80008ce:	3728      	adds	r7, #40	; 0x28
 80008d0:	46bd      	mov	sp, r7
 80008d2:	bd80      	pop	{r7, pc}
 80008d4:	40003c00 	.word	0x40003c00
 80008d8:	40023800 	.word	0x40023800
 80008dc:	40020000 	.word	0x40020000
 80008e0:	40020800 	.word	0x40020800

080008e4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80008e4:	b580      	push	{r7, lr}
 80008e6:	b0ce      	sub	sp, #312	; 0x138
 80008e8:	af00      	add	r7, sp, #0
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
   HAL_Init();
 80008ea:	f000 fefb 	bl	80016e4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80008ee:	f000 f8c7 	bl	8000a80 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80008f2:	f7ff fde9 	bl	80004c8 <MX_GPIO_Init>
  MX_I2C1_Init();
 80008f6:	f7ff fee7 	bl	80006c8 <MX_I2C1_Init>
  MX_I2S3_Init();
 80008fa:	f7ff ff5b 	bl	80007b4 <MX_I2S3_Init>
  MX_SPI1_Init();
 80008fe:	f000 fb07 	bl	8000f10 <MX_SPI1_Init>
  MX_USB_HOST_Init();
 8000902:	f006 fb8d 	bl	8007020 <MX_USB_HOST_Init>

  MX_SPI2_Init();
 8000906:	f000 fb39 	bl	8000f7c <MX_SPI2_Init>
  /* USER CODE BEGIN 2 */

  ssd1306_Init();	//initialize the oled display for 128 x 64 pixels
 800090a:	f000 fd1f 	bl	800134c <ssd1306_Init>

  memset(SSD1306_Buffer, 0x0, 128 * 8);	//clear the display buffer
 800090e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000912:	2100      	movs	r1, #0
 8000914:	4859      	ldr	r0, [pc, #356]	; (8000a7c <main+0x198>)
 8000916:	f006 fe71 	bl	80075fc <memset>

  object_t square_obj;
  object_t square2_obj;

  square_obj.object_type = OBJECT_SQUARE;
 800091a:	2302      	movs	r3, #2
 800091c:	f887 30e4 	strb.w	r3, [r7, #228]	; 0xe4
  square_obj.square.x1 = 0;
 8000920:	2300      	movs	r3, #0
 8000922:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
  square_obj.square.y1 = 0;
 8000926:	2300      	movs	r3, #0
 8000928:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
  square_obj.square.x2 = 20;
 800092c:	2314      	movs	r3, #20
 800092e:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
  square_obj.square.y2 = 20;
 8000932:	2314      	movs	r3, #20
 8000934:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
  square_obj.square.fill = 0;
 8000938:	2300      	movs	r3, #0
 800093a:	f887 310c 	strb.w	r3, [r7, #268]	; 0x10c

  square2_obj.object_type = OBJECT_SQUARE;
 800093e:	2302      	movs	r3, #2
 8000940:	f887 3098 	strb.w	r3, [r7, #152]	; 0x98
  square2_obj.square.x1 = 0;
 8000944:	2300      	movs	r3, #0
 8000946:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  square2_obj.square.y1 = 64/2;
 800094a:	2320      	movs	r3, #32
 800094c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  square2_obj.square.x2 = 0 + 10;
 8000950:	230a      	movs	r3, #10
 8000952:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  square2_obj.square.y2 = 64/2 + 10;
 8000956:	232a      	movs	r3, #42	; 0x2a
 8000958:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  square2_obj.square.fill = 0;
 800095c:	2300      	movs	r3, #0
 800095e:	f887 30c0 	strb.w	r3, [r7, #192]	; 0xc0

  object_t circle1_obj;
  object_t circle2_obj;

  circle1_obj.object_type = OBJECT_CIRCLE;
 8000962:	2300      	movs	r3, #0
 8000964:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c
  circle1_obj.circle.x1 = 10;
 8000968:	230a      	movs	r3, #10
 800096a:	67fb      	str	r3, [r7, #124]	; 0x7c
  circle1_obj.circle.y1 = 10;
 800096c:	230a      	movs	r3, #10
 800096e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  circle1_obj.circle.radius = 5;
 8000972:	2305      	movs	r3, #5
 8000974:	67bb      	str	r3, [r7, #120]	; 0x78
  circle1_obj.circle.fill = 0;
 8000976:	2300      	movs	r3, #0
 8000978:	f887 3084 	strb.w	r3, [r7, #132]	; 0x84

  circle2_obj.object_type = OBJECT_CIRCLE;
 800097c:	463b      	mov	r3, r7
 800097e:	2200      	movs	r2, #0
 8000980:	701a      	strb	r2, [r3, #0]
  circle2_obj.circle.x1 = 10;
 8000982:	463b      	mov	r3, r7
 8000984:	220a      	movs	r2, #10
 8000986:	631a      	str	r2, [r3, #48]	; 0x30
  circle2_obj.circle.y1 = 20;
 8000988:	463b      	mov	r3, r7
 800098a:	2214      	movs	r2, #20
 800098c:	635a      	str	r2, [r3, #52]	; 0x34
  circle2_obj.circle.radius = 15;
 800098e:	463b      	mov	r3, r7
 8000990:	220f      	movs	r2, #15
 8000992:	62da      	str	r2, [r3, #44]	; 0x2c
  circle2_obj.circle.fill = 0;
 8000994:	463b      	mov	r3, r7
 8000996:	2200      	movs	r2, #0
 8000998:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38


  object_init(&square_obj);
 800099c:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 80009a0:	4618      	mov	r0, r3
 80009a2:	f000 fa28 	bl	8000df6 <object_init>
  object_init(&square2_obj);
 80009a6:	f107 0398 	add.w	r3, r7, #152	; 0x98
 80009aa:	4618      	mov	r0, r3
 80009ac:	f000 fa23 	bl	8000df6 <object_init>
  object_init(&circle1_obj);
 80009b0:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80009b4:	4618      	mov	r0, r3
 80009b6:	f000 fa1e 	bl	8000df6 <object_init>
  object_init(&circle2_obj);
 80009ba:	463b      	mov	r3, r7
 80009bc:	4618      	mov	r0, r3
 80009be:	f000 fa1a 	bl	8000df6 <object_init>

  while(1)
  {
	  for(int i = 0; i < 64; i++) {
 80009c2:	2300      	movs	r3, #0
 80009c4:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
 80009c8:	e022      	b.n	8000a10 <main+0x12c>
		  object_move(&square_obj, 1, 1);
 80009ca:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 80009ce:	2201      	movs	r2, #1
 80009d0:	2101      	movs	r1, #1
 80009d2:	4618      	mov	r0, r3
 80009d4:	f000 fa37 	bl	8000e46 <object_move>
		  object_move(&square2_obj, 1, 0);
 80009d8:	f107 0398 	add.w	r3, r7, #152	; 0x98
 80009dc:	2200      	movs	r2, #0
 80009de:	2101      	movs	r1, #1
 80009e0:	4618      	mov	r0, r3
 80009e2:	f000 fa30 	bl	8000e46 <object_move>

		  object_move(&circle1_obj, 1, 1);
 80009e6:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80009ea:	2201      	movs	r2, #1
 80009ec:	2101      	movs	r1, #1
 80009ee:	4618      	mov	r0, r3
 80009f0:	f000 fa29 	bl	8000e46 <object_move>
		  object_move(&circle2_obj, 1, 0);
 80009f4:	463b      	mov	r3, r7
 80009f6:	2200      	movs	r2, #0
 80009f8:	2101      	movs	r1, #1
 80009fa:	4618      	mov	r0, r3
 80009fc:	f000 fa23 	bl	8000e46 <object_move>

		  HAL_Delay(100);
 8000a00:	2064      	movs	r0, #100	; 0x64
 8000a02:	f000 fee1 	bl	80017c8 <HAL_Delay>
	  for(int i = 0; i < 64; i++) {
 8000a06:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8000a0a:	3301      	adds	r3, #1
 8000a0c:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
 8000a10:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8000a14:	2b3f      	cmp	r3, #63	; 0x3f
 8000a16:	ddd8      	ble.n	80009ca <main+0xe6>
	  }

	  for(int i = 0; i < 64; i++) {
 8000a18:	2300      	movs	r3, #0
 8000a1a:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
 8000a1e:	e028      	b.n	8000a72 <main+0x18e>
	  	   object_move(&square_obj, -1, -1);
 8000a20:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8000a24:	f04f 32ff 	mov.w	r2, #4294967295
 8000a28:	f04f 31ff 	mov.w	r1, #4294967295
 8000a2c:	4618      	mov	r0, r3
 8000a2e:	f000 fa0a 	bl	8000e46 <object_move>
	  	   object_move(&square2_obj, -1, 0);
 8000a32:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8000a36:	2200      	movs	r2, #0
 8000a38:	f04f 31ff 	mov.w	r1, #4294967295
 8000a3c:	4618      	mov	r0, r3
 8000a3e:	f000 fa02 	bl	8000e46 <object_move>
	  	   object_move(&circle1_obj, -1, -1);
 8000a42:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8000a46:	f04f 32ff 	mov.w	r2, #4294967295
 8000a4a:	f04f 31ff 	mov.w	r1, #4294967295
 8000a4e:	4618      	mov	r0, r3
 8000a50:	f000 f9f9 	bl	8000e46 <object_move>
	  	   object_move(&circle2_obj, -1, 0);
 8000a54:	463b      	mov	r3, r7
 8000a56:	2200      	movs	r2, #0
 8000a58:	f04f 31ff 	mov.w	r1, #4294967295
 8000a5c:	4618      	mov	r0, r3
 8000a5e:	f000 f9f2 	bl	8000e46 <object_move>

	  		HAL_Delay(100);
 8000a62:	2064      	movs	r0, #100	; 0x64
 8000a64:	f000 feb0 	bl	80017c8 <HAL_Delay>
	  for(int i = 0; i < 64; i++) {
 8000a68:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8000a6c:	3301      	adds	r3, #1
 8000a6e:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
 8000a72:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8000a76:	2b3f      	cmp	r3, #63	; 0x3f
 8000a78:	ddd2      	ble.n	8000a20 <main+0x13c>
	  for(int i = 0; i < 64; i++) {
 8000a7a:	e7a2      	b.n	80009c2 <main+0xde>
 8000a7c:	20000214 	.word	0x20000214

08000a80 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000a80:	b580      	push	{r7, lr}
 8000a82:	b098      	sub	sp, #96	; 0x60
 8000a84:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000a86:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000a8a:	2230      	movs	r2, #48	; 0x30
 8000a8c:	2100      	movs	r1, #0
 8000a8e:	4618      	mov	r0, r3
 8000a90:	f006 fdb4 	bl	80075fc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000a94:	f107 031c 	add.w	r3, r7, #28
 8000a98:	2200      	movs	r2, #0
 8000a9a:	601a      	str	r2, [r3, #0]
 8000a9c:	605a      	str	r2, [r3, #4]
 8000a9e:	609a      	str	r2, [r3, #8]
 8000aa0:	60da      	str	r2, [r3, #12]
 8000aa2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000aa4:	f107 030c 	add.w	r3, r7, #12
 8000aa8:	2200      	movs	r2, #0
 8000aaa:	601a      	str	r2, [r3, #0]
 8000aac:	605a      	str	r2, [r3, #4]
 8000aae:	609a      	str	r2, [r3, #8]
 8000ab0:	60da      	str	r2, [r3, #12]

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000ab2:	2300      	movs	r3, #0
 8000ab4:	60bb      	str	r3, [r7, #8]
 8000ab6:	4b31      	ldr	r3, [pc, #196]	; (8000b7c <SystemClock_Config+0xfc>)
 8000ab8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000aba:	4a30      	ldr	r2, [pc, #192]	; (8000b7c <SystemClock_Config+0xfc>)
 8000abc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000ac0:	6413      	str	r3, [r2, #64]	; 0x40
 8000ac2:	4b2e      	ldr	r3, [pc, #184]	; (8000b7c <SystemClock_Config+0xfc>)
 8000ac4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ac6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000aca:	60bb      	str	r3, [r7, #8]
 8000acc:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000ace:	2300      	movs	r3, #0
 8000ad0:	607b      	str	r3, [r7, #4]
 8000ad2:	4b2b      	ldr	r3, [pc, #172]	; (8000b80 <SystemClock_Config+0x100>)
 8000ad4:	681b      	ldr	r3, [r3, #0]
 8000ad6:	4a2a      	ldr	r2, [pc, #168]	; (8000b80 <SystemClock_Config+0x100>)
 8000ad8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000adc:	6013      	str	r3, [r2, #0]
 8000ade:	4b28      	ldr	r3, [pc, #160]	; (8000b80 <SystemClock_Config+0x100>)
 8000ae0:	681b      	ldr	r3, [r3, #0]
 8000ae2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000ae6:	607b      	str	r3, [r7, #4]
 8000ae8:	687b      	ldr	r3, [r7, #4]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000aea:	2301      	movs	r3, #1
 8000aec:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000aee:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000af2:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000af4:	2302      	movs	r3, #2
 8000af6:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000af8:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000afc:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000afe:	2308      	movs	r3, #8
 8000b00:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000b02:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8000b06:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000b08:	2302      	movs	r3, #2
 8000b0a:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000b0c:	2307      	movs	r3, #7
 8000b0e:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000b10:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000b14:	4618      	mov	r0, r3
 8000b16:	f003 fb61 	bl	80041dc <HAL_RCC_OscConfig>
 8000b1a:	4603      	mov	r3, r0
 8000b1c:	2b00      	cmp	r3, #0
 8000b1e:	d001      	beq.n	8000b24 <SystemClock_Config+0xa4>
  {
    Error_Handler();
 8000b20:	f000 f830 	bl	8000b84 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000b24:	230f      	movs	r3, #15
 8000b26:	61fb      	str	r3, [r7, #28]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000b28:	2302      	movs	r3, #2
 8000b2a:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000b2c:	2300      	movs	r3, #0
 8000b2e:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000b30:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000b34:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000b36:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000b3a:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000b3c:	f107 031c 	add.w	r3, r7, #28
 8000b40:	2105      	movs	r1, #5
 8000b42:	4618      	mov	r0, r3
 8000b44:	f003 fdba 	bl	80046bc <HAL_RCC_ClockConfig>
 8000b48:	4603      	mov	r3, r0
 8000b4a:	2b00      	cmp	r3, #0
 8000b4c:	d001      	beq.n	8000b52 <SystemClock_Config+0xd2>
  {
    Error_Handler();
 8000b4e:	f000 f819 	bl	8000b84 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 8000b52:	2301      	movs	r3, #1
 8000b54:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLLI2S.PLLI2SN = 192;
 8000b56:	23c0      	movs	r3, #192	; 0xc0
 8000b58:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 8000b5a:	2302      	movs	r3, #2
 8000b5c:	617b      	str	r3, [r7, #20]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000b5e:	f107 030c 	add.w	r3, r7, #12
 8000b62:	4618      	mov	r0, r3
 8000b64:	f003 ff88 	bl	8004a78 <HAL_RCCEx_PeriphCLKConfig>
 8000b68:	4603      	mov	r3, r0
 8000b6a:	2b00      	cmp	r3, #0
 8000b6c:	d001      	beq.n	8000b72 <SystemClock_Config+0xf2>
  {
    Error_Handler();
 8000b6e:	f000 f809 	bl	8000b84 <Error_Handler>
  }
}
 8000b72:	bf00      	nop
 8000b74:	3760      	adds	r7, #96	; 0x60
 8000b76:	46bd      	mov	sp, r7
 8000b78:	bd80      	pop	{r7, pc}
 8000b7a:	bf00      	nop
 8000b7c:	40023800 	.word	0x40023800
 8000b80:	40007000 	.word	0x40007000

08000b84 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b84:	b480      	push	{r7}
 8000b86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000b88:	bf00      	nop
 8000b8a:	46bd      	mov	sp, r7
 8000b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b90:	4770      	bx	lr
	...

08000b94 <set_pixel>:
#include "string.h"



void set_pixel(int x, int y, int col)
{
 8000b94:	b480      	push	{r7}
 8000b96:	b089      	sub	sp, #36	; 0x24
 8000b98:	af00      	add	r7, sp, #0
 8000b9a:	60f8      	str	r0, [r7, #12]
 8000b9c:	60b9      	str	r1, [r7, #8]
 8000b9e:	607a      	str	r2, [r7, #4]
	if(x >= 128 || y >= 64) return;
 8000ba0:	68fb      	ldr	r3, [r7, #12]
 8000ba2:	2b7f      	cmp	r3, #127	; 0x7f
 8000ba4:	dc47      	bgt.n	8000c36 <set_pixel+0xa2>
 8000ba6:	68bb      	ldr	r3, [r7, #8]
 8000ba8:	2b3f      	cmp	r3, #63	; 0x3f
 8000baa:	dc44      	bgt.n	8000c36 <set_pixel+0xa2>
	if(x < 0 || y < 0) return;
 8000bac:	68fb      	ldr	r3, [r7, #12]
 8000bae:	2b00      	cmp	r3, #0
 8000bb0:	db43      	blt.n	8000c3a <set_pixel+0xa6>
 8000bb2:	68bb      	ldr	r3, [r7, #8]
 8000bb4:	2b00      	cmp	r3, #0
 8000bb6:	db40      	blt.n	8000c3a <set_pixel+0xa6>

	int page = (y/8);
 8000bb8:	68bb      	ldr	r3, [r7, #8]
 8000bba:	2b00      	cmp	r3, #0
 8000bbc:	da00      	bge.n	8000bc0 <set_pixel+0x2c>
 8000bbe:	3307      	adds	r3, #7
 8000bc0:	10db      	asrs	r3, r3, #3
 8000bc2:	61fb      	str	r3, [r7, #28]
	int buffer_index = ( page * 128 ) + x;
 8000bc4:	69fb      	ldr	r3, [r7, #28]
 8000bc6:	01db      	lsls	r3, r3, #7
 8000bc8:	68fa      	ldr	r2, [r7, #12]
 8000bca:	4413      	add	r3, r2
 8000bcc:	61bb      	str	r3, [r7, #24]
	int bit_position = y % 8;
 8000bce:	68bb      	ldr	r3, [r7, #8]
 8000bd0:	425a      	negs	r2, r3
 8000bd2:	f003 0307 	and.w	r3, r3, #7
 8000bd6:	f002 0207 	and.w	r2, r2, #7
 8000bda:	bf58      	it	pl
 8000bdc:	4253      	negpl	r3, r2
 8000bde:	617b      	str	r3, [r7, #20]

	if(col) {
 8000be0:	687b      	ldr	r3, [r7, #4]
 8000be2:	2b00      	cmp	r3, #0
 8000be4:	d012      	beq.n	8000c0c <set_pixel+0x78>
		SSD1306_Buffer[ buffer_index ] |= ( 1 << bit_position );
 8000be6:	4a18      	ldr	r2, [pc, #96]	; (8000c48 <set_pixel+0xb4>)
 8000be8:	69bb      	ldr	r3, [r7, #24]
 8000bea:	4413      	add	r3, r2
 8000bec:	781b      	ldrb	r3, [r3, #0]
 8000bee:	b25a      	sxtb	r2, r3
 8000bf0:	2101      	movs	r1, #1
 8000bf2:	697b      	ldr	r3, [r7, #20]
 8000bf4:	fa01 f303 	lsl.w	r3, r1, r3
 8000bf8:	b25b      	sxtb	r3, r3
 8000bfa:	4313      	orrs	r3, r2
 8000bfc:	b25b      	sxtb	r3, r3
 8000bfe:	b2d9      	uxtb	r1, r3
 8000c00:	4a11      	ldr	r2, [pc, #68]	; (8000c48 <set_pixel+0xb4>)
 8000c02:	69bb      	ldr	r3, [r7, #24]
 8000c04:	4413      	add	r3, r2
 8000c06:	460a      	mov	r2, r1
 8000c08:	701a      	strb	r2, [r3, #0]
 8000c0a:	e017      	b.n	8000c3c <set_pixel+0xa8>
	} else {
		SSD1306_Buffer[ buffer_index ] &= ~( 1 << bit_position );
 8000c0c:	4a0e      	ldr	r2, [pc, #56]	; (8000c48 <set_pixel+0xb4>)
 8000c0e:	69bb      	ldr	r3, [r7, #24]
 8000c10:	4413      	add	r3, r2
 8000c12:	781b      	ldrb	r3, [r3, #0]
 8000c14:	b25a      	sxtb	r2, r3
 8000c16:	2101      	movs	r1, #1
 8000c18:	697b      	ldr	r3, [r7, #20]
 8000c1a:	fa01 f303 	lsl.w	r3, r1, r3
 8000c1e:	b25b      	sxtb	r3, r3
 8000c20:	43db      	mvns	r3, r3
 8000c22:	b25b      	sxtb	r3, r3
 8000c24:	4013      	ands	r3, r2
 8000c26:	b25b      	sxtb	r3, r3
 8000c28:	b2d9      	uxtb	r1, r3
 8000c2a:	4a07      	ldr	r2, [pc, #28]	; (8000c48 <set_pixel+0xb4>)
 8000c2c:	69bb      	ldr	r3, [r7, #24]
 8000c2e:	4413      	add	r3, r2
 8000c30:	460a      	mov	r2, r1
 8000c32:	701a      	strb	r2, [r3, #0]
 8000c34:	e002      	b.n	8000c3c <set_pixel+0xa8>
	if(x >= 128 || y >= 64) return;
 8000c36:	bf00      	nop
 8000c38:	e000      	b.n	8000c3c <set_pixel+0xa8>
	if(x < 0 || y < 0) return;
 8000c3a:	bf00      	nop
	}
}
 8000c3c:	3724      	adds	r7, #36	; 0x24
 8000c3e:	46bd      	mov	sp, r7
 8000c40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c44:	4770      	bx	lr
 8000c46:	bf00      	nop
 8000c48:	20000214 	.word	0x20000214

08000c4c <drawline>:

void drawline(int x1, int  y1,int  x2,int  y2, int col)
{
 8000c4c:	b580      	push	{r7, lr}
 8000c4e:	b086      	sub	sp, #24
 8000c50:	af00      	add	r7, sp, #0
 8000c52:	60f8      	str	r0, [r7, #12]
 8000c54:	60b9      	str	r1, [r7, #8]
 8000c56:	607a      	str	r2, [r7, #4]
 8000c58:	603b      	str	r3, [r7, #0]

   // if(x1>127)return;//x1=127;
  //  if(y1>63)return;//y1=63;
  //  if(x2>127)return;//x2=127;
  //  if(y2>63)return;//y2=63;
    if(x1>x2)
 8000c5a:	68fa      	ldr	r2, [r7, #12]
 8000c5c:	687b      	ldr	r3, [r7, #4]
 8000c5e:	429a      	cmp	r2, r3
 8000c60:	dd0b      	ble.n	8000c7a <drawline+0x2e>
    {
    	q=x1;
 8000c62:	68fb      	ldr	r3, [r7, #12]
 8000c64:	75fb      	strb	r3, [r7, #23]
    	x1=x2;
 8000c66:	687b      	ldr	r3, [r7, #4]
 8000c68:	60fb      	str	r3, [r7, #12]
    	x2=q;
 8000c6a:	7dfb      	ldrb	r3, [r7, #23]
 8000c6c:	607b      	str	r3, [r7, #4]

    	q=y1;
 8000c6e:	68bb      	ldr	r3, [r7, #8]
 8000c70:	75fb      	strb	r3, [r7, #23]
    	y1=y2;
 8000c72:	683b      	ldr	r3, [r7, #0]
 8000c74:	60bb      	str	r3, [r7, #8]
    	y2=q;
 8000c76:	7dfb      	ldrb	r3, [r7, #23]
 8000c78:	603b      	str	r3, [r7, #0]
    }

    if(y2>y1)
 8000c7a:	683a      	ldr	r2, [r7, #0]
 8000c7c:	68bb      	ldr	r3, [r7, #8]
 8000c7e:	429a      	cmp	r2, r3
 8000c80:	dd45      	ble.n	8000d0e <drawline+0xc2>
    {
        l=x2-x1;
 8000c82:	687b      	ldr	r3, [r7, #4]
 8000c84:	b2da      	uxtb	r2, r3
 8000c86:	68fb      	ldr	r3, [r7, #12]
 8000c88:	b2db      	uxtb	r3, r3
 8000c8a:	1ad3      	subs	r3, r2, r3
 8000c8c:	75bb      	strb	r3, [r7, #22]
        b=y2-y1;
 8000c8e:	683b      	ldr	r3, [r7, #0]
 8000c90:	b2da      	uxtb	r2, r3
 8000c92:	68bb      	ldr	r3, [r7, #8]
 8000c94:	b2db      	uxtb	r3, r3
 8000c96:	1ad3      	subs	r3, r2, r3
 8000c98:	757b      	strb	r3, [r7, #21]
        if(l>=b)
 8000c9a:	7dba      	ldrb	r2, [r7, #22]
 8000c9c:	7d7b      	ldrb	r3, [r7, #21]
 8000c9e:	429a      	cmp	r2, r3
 8000ca0:	d31a      	bcc.n	8000cd8 <drawline+0x8c>
        for(q=0;q<=l;q++)
 8000ca2:	2300      	movs	r3, #0
 8000ca4:	75fb      	strb	r3, [r7, #23]
 8000ca6:	e012      	b.n	8000cce <drawline+0x82>
        	set_pixel(x1 + q, (y1 + ((q*b)/l)), col);
 8000ca8:	7dfa      	ldrb	r2, [r7, #23]
 8000caa:	68fb      	ldr	r3, [r7, #12]
 8000cac:	18d0      	adds	r0, r2, r3
 8000cae:	7dfb      	ldrb	r3, [r7, #23]
 8000cb0:	7d7a      	ldrb	r2, [r7, #21]
 8000cb2:	fb02 f203 	mul.w	r2, r2, r3
 8000cb6:	7dbb      	ldrb	r3, [r7, #22]
 8000cb8:	fb92 f2f3 	sdiv	r2, r2, r3
 8000cbc:	68bb      	ldr	r3, [r7, #8]
 8000cbe:	4413      	add	r3, r2
 8000cc0:	6a3a      	ldr	r2, [r7, #32]
 8000cc2:	4619      	mov	r1, r3
 8000cc4:	f7ff ff66 	bl	8000b94 <set_pixel>
        for(q=0;q<=l;q++)
 8000cc8:	7dfb      	ldrb	r3, [r7, #23]
 8000cca:	3301      	adds	r3, #1
 8000ccc:	75fb      	strb	r3, [r7, #23]
 8000cce:	7dfa      	ldrb	r2, [r7, #23]
 8000cd0:	7dbb      	ldrb	r3, [r7, #22]
 8000cd2:	429a      	cmp	r2, r3
 8000cd4:	d9e8      	bls.n	8000ca8 <drawline+0x5c>
        set_pixel(x1 + q, (y1 - ((q*b)/l)), col);
        else
        for(q=0;q<=b;q++)
        set_pixel((x1 + ((q*l)/b)), y1 - q, col);
    }
}
 8000cd6:	e05f      	b.n	8000d98 <drawline+0x14c>
        for(q=0;q<=b;q++)
 8000cd8:	2300      	movs	r3, #0
 8000cda:	75fb      	strb	r3, [r7, #23]
 8000cdc:	e012      	b.n	8000d04 <drawline+0xb8>
        	set_pixel((x1 + ((q*l)/b)), y1 + q, col);
 8000cde:	7dfb      	ldrb	r3, [r7, #23]
 8000ce0:	7dba      	ldrb	r2, [r7, #22]
 8000ce2:	fb02 f203 	mul.w	r2, r2, r3
 8000ce6:	7d7b      	ldrb	r3, [r7, #21]
 8000ce8:	fb92 f2f3 	sdiv	r2, r2, r3
 8000cec:	68fb      	ldr	r3, [r7, #12]
 8000cee:	18d0      	adds	r0, r2, r3
 8000cf0:	7dfa      	ldrb	r2, [r7, #23]
 8000cf2:	68bb      	ldr	r3, [r7, #8]
 8000cf4:	4413      	add	r3, r2
 8000cf6:	6a3a      	ldr	r2, [r7, #32]
 8000cf8:	4619      	mov	r1, r3
 8000cfa:	f7ff ff4b 	bl	8000b94 <set_pixel>
        for(q=0;q<=b;q++)
 8000cfe:	7dfb      	ldrb	r3, [r7, #23]
 8000d00:	3301      	adds	r3, #1
 8000d02:	75fb      	strb	r3, [r7, #23]
 8000d04:	7dfa      	ldrb	r2, [r7, #23]
 8000d06:	7d7b      	ldrb	r3, [r7, #21]
 8000d08:	429a      	cmp	r2, r3
 8000d0a:	d9e8      	bls.n	8000cde <drawline+0x92>
}
 8000d0c:	e044      	b.n	8000d98 <drawline+0x14c>
        l=x2-x1;
 8000d0e:	687b      	ldr	r3, [r7, #4]
 8000d10:	b2da      	uxtb	r2, r3
 8000d12:	68fb      	ldr	r3, [r7, #12]
 8000d14:	b2db      	uxtb	r3, r3
 8000d16:	1ad3      	subs	r3, r2, r3
 8000d18:	75bb      	strb	r3, [r7, #22]
        b=y1-y2;
 8000d1a:	68bb      	ldr	r3, [r7, #8]
 8000d1c:	b2da      	uxtb	r2, r3
 8000d1e:	683b      	ldr	r3, [r7, #0]
 8000d20:	b2db      	uxtb	r3, r3
 8000d22:	1ad3      	subs	r3, r2, r3
 8000d24:	757b      	strb	r3, [r7, #21]
        if(l>=b)
 8000d26:	7dba      	ldrb	r2, [r7, #22]
 8000d28:	7d7b      	ldrb	r3, [r7, #21]
 8000d2a:	429a      	cmp	r2, r3
 8000d2c:	d31a      	bcc.n	8000d64 <drawline+0x118>
        for(q=0;q<=l;q++)
 8000d2e:	2300      	movs	r3, #0
 8000d30:	75fb      	strb	r3, [r7, #23]
 8000d32:	e012      	b.n	8000d5a <drawline+0x10e>
        set_pixel(x1 + q, (y1 - ((q*b)/l)), col);
 8000d34:	7dfa      	ldrb	r2, [r7, #23]
 8000d36:	68fb      	ldr	r3, [r7, #12]
 8000d38:	18d0      	adds	r0, r2, r3
 8000d3a:	7dfb      	ldrb	r3, [r7, #23]
 8000d3c:	7d7a      	ldrb	r2, [r7, #21]
 8000d3e:	fb02 f203 	mul.w	r2, r2, r3
 8000d42:	7dbb      	ldrb	r3, [r7, #22]
 8000d44:	fb92 f3f3 	sdiv	r3, r2, r3
 8000d48:	68ba      	ldr	r2, [r7, #8]
 8000d4a:	1ad3      	subs	r3, r2, r3
 8000d4c:	6a3a      	ldr	r2, [r7, #32]
 8000d4e:	4619      	mov	r1, r3
 8000d50:	f7ff ff20 	bl	8000b94 <set_pixel>
        for(q=0;q<=l;q++)
 8000d54:	7dfb      	ldrb	r3, [r7, #23]
 8000d56:	3301      	adds	r3, #1
 8000d58:	75fb      	strb	r3, [r7, #23]
 8000d5a:	7dfa      	ldrb	r2, [r7, #23]
 8000d5c:	7dbb      	ldrb	r3, [r7, #22]
 8000d5e:	429a      	cmp	r2, r3
 8000d60:	d9e8      	bls.n	8000d34 <drawline+0xe8>
}
 8000d62:	e019      	b.n	8000d98 <drawline+0x14c>
        for(q=0;q<=b;q++)
 8000d64:	2300      	movs	r3, #0
 8000d66:	75fb      	strb	r3, [r7, #23]
 8000d68:	e012      	b.n	8000d90 <drawline+0x144>
        set_pixel((x1 + ((q*l)/b)), y1 - q, col);
 8000d6a:	7dfb      	ldrb	r3, [r7, #23]
 8000d6c:	7dba      	ldrb	r2, [r7, #22]
 8000d6e:	fb02 f203 	mul.w	r2, r2, r3
 8000d72:	7d7b      	ldrb	r3, [r7, #21]
 8000d74:	fb92 f2f3 	sdiv	r2, r2, r3
 8000d78:	68fb      	ldr	r3, [r7, #12]
 8000d7a:	18d0      	adds	r0, r2, r3
 8000d7c:	7dfb      	ldrb	r3, [r7, #23]
 8000d7e:	68ba      	ldr	r2, [r7, #8]
 8000d80:	1ad3      	subs	r3, r2, r3
 8000d82:	6a3a      	ldr	r2, [r7, #32]
 8000d84:	4619      	mov	r1, r3
 8000d86:	f7ff ff05 	bl	8000b94 <set_pixel>
        for(q=0;q<=b;q++)
 8000d8a:	7dfb      	ldrb	r3, [r7, #23]
 8000d8c:	3301      	adds	r3, #1
 8000d8e:	75fb      	strb	r3, [r7, #23]
 8000d90:	7dfa      	ldrb	r2, [r7, #23]
 8000d92:	7d7b      	ldrb	r3, [r7, #21]
 8000d94:	429a      	cmp	r2, r3
 8000d96:	d9e8      	bls.n	8000d6a <drawline+0x11e>
}
 8000d98:	bf00      	nop
 8000d9a:	3718      	adds	r7, #24
 8000d9c:	46bd      	mov	sp, r7
 8000d9e:	bd80      	pop	{r7, pc}

08000da0 <draw_rect>:


void draw_rect(int x1, int y1, int x2, int y2, int col)
{
 8000da0:	b580      	push	{r7, lr}
 8000da2:	b086      	sub	sp, #24
 8000da4:	af02      	add	r7, sp, #8
 8000da6:	60f8      	str	r0, [r7, #12]
 8000da8:	60b9      	str	r1, [r7, #8]
 8000daa:	607a      	str	r2, [r7, #4]
 8000dac:	603b      	str	r3, [r7, #0]
	drawline(x1, y1, x1, y2, col);
 8000dae:	69bb      	ldr	r3, [r7, #24]
 8000db0:	9300      	str	r3, [sp, #0]
 8000db2:	683b      	ldr	r3, [r7, #0]
 8000db4:	68fa      	ldr	r2, [r7, #12]
 8000db6:	68b9      	ldr	r1, [r7, #8]
 8000db8:	68f8      	ldr	r0, [r7, #12]
 8000dba:	f7ff ff47 	bl	8000c4c <drawline>
	drawline(x1, y1, x2, y1, col);
 8000dbe:	69bb      	ldr	r3, [r7, #24]
 8000dc0:	9300      	str	r3, [sp, #0]
 8000dc2:	68bb      	ldr	r3, [r7, #8]
 8000dc4:	687a      	ldr	r2, [r7, #4]
 8000dc6:	68b9      	ldr	r1, [r7, #8]
 8000dc8:	68f8      	ldr	r0, [r7, #12]
 8000dca:	f7ff ff3f 	bl	8000c4c <drawline>
	drawline(x2, y1, x2, y2, col);
 8000dce:	69bb      	ldr	r3, [r7, #24]
 8000dd0:	9300      	str	r3, [sp, #0]
 8000dd2:	683b      	ldr	r3, [r7, #0]
 8000dd4:	687a      	ldr	r2, [r7, #4]
 8000dd6:	68b9      	ldr	r1, [r7, #8]
 8000dd8:	6878      	ldr	r0, [r7, #4]
 8000dda:	f7ff ff37 	bl	8000c4c <drawline>
	drawline(x1, y2, x2, y2, col);
 8000dde:	69bb      	ldr	r3, [r7, #24]
 8000de0:	9300      	str	r3, [sp, #0]
 8000de2:	683b      	ldr	r3, [r7, #0]
 8000de4:	687a      	ldr	r2, [r7, #4]
 8000de6:	6839      	ldr	r1, [r7, #0]
 8000de8:	68f8      	ldr	r0, [r7, #12]
 8000dea:	f7ff ff2f 	bl	8000c4c <drawline>
}
 8000dee:	bf00      	nop
 8000df0:	3710      	adds	r7, #16
 8000df2:	46bd      	mov	sp, r7
 8000df4:	bd80      	pop	{r7, pc}

08000df6 <object_init>:

	}
}

 void object_init(object_t *obj)
{
 8000df6:	b590      	push	{r4, r7, lr}
 8000df8:	b085      	sub	sp, #20
 8000dfa:	af02      	add	r7, sp, #8
 8000dfc:	6078      	str	r0, [r7, #4]
	 if(obj->object_type == OBJECT_SQUARE) {
 8000dfe:	687b      	ldr	r3, [r7, #4]
 8000e00:	781b      	ldrb	r3, [r3, #0]
 8000e02:	2b02      	cmp	r3, #2
 8000e04:	d10c      	bne.n	8000e20 <object_init+0x2a>
		 draw_rect(obj->square.x1, obj->square.y1, obj->square.x2,obj->square.y2, 1);
 8000e06:	687b      	ldr	r3, [r7, #4]
 8000e08:	6998      	ldr	r0, [r3, #24]
 8000e0a:	687b      	ldr	r3, [r7, #4]
 8000e0c:	6a19      	ldr	r1, [r3, #32]
 8000e0e:	687b      	ldr	r3, [r7, #4]
 8000e10:	69da      	ldr	r2, [r3, #28]
 8000e12:	687b      	ldr	r3, [r7, #4]
 8000e14:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 8000e16:	2301      	movs	r3, #1
 8000e18:	9300      	str	r3, [sp, #0]
 8000e1a:	4623      	mov	r3, r4
 8000e1c:	f7ff ffc0 	bl	8000da0 <draw_rect>
	 }
	 if(obj->object_type == OBJECT_CIRCLE) {
 8000e20:	687b      	ldr	r3, [r7, #4]
 8000e22:	781b      	ldrb	r3, [r3, #0]
 8000e24:	2b00      	cmp	r3, #0
 8000e26:	d108      	bne.n	8000e3a <object_init+0x44>
		 ssd1306_DrawCircle(obj->circle.x1, obj->circle.y1, obj->circle.radius, 1);
 8000e28:	687b      	ldr	r3, [r7, #4]
 8000e2a:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8000e2c:	687b      	ldr	r3, [r7, #4]
 8000e2e:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8000e30:	687b      	ldr	r3, [r7, #4]
 8000e32:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000e34:	2301      	movs	r3, #1
 8000e36:	f000 fb9b 	bl	8001570 <ssd1306_DrawCircle>
	 }
	 ssd1306_UpdateScreen();
 8000e3a:	f000 fb13 	bl	8001464 <ssd1306_UpdateScreen>
}
 8000e3e:	bf00      	nop
 8000e40:	370c      	adds	r7, #12
 8000e42:	46bd      	mov	sp, r7
 8000e44:	bd90      	pop	{r4, r7, pc}

08000e46 <object_move>:


void object_move(object_t *obj, int x, int y)
{
 8000e46:	b590      	push	{r4, r7, lr}
 8000e48:	b087      	sub	sp, #28
 8000e4a:	af02      	add	r7, sp, #8
 8000e4c:	60f8      	str	r0, [r7, #12]
 8000e4e:	60b9      	str	r1, [r7, #8]
 8000e50:	607a      	str	r2, [r7, #4]
	if(obj->object_type == OBJECT_SQUARE) {
 8000e52:	68fb      	ldr	r3, [r7, #12]
 8000e54:	781b      	ldrb	r3, [r3, #0]
 8000e56:	2b02      	cmp	r3, #2
 8000e58:	d131      	bne.n	8000ebe <object_move+0x78>

		draw_rect(obj->square.x1,obj->square.y1, obj->square.x2,obj->square.y2, 0);
 8000e5a:	68fb      	ldr	r3, [r7, #12]
 8000e5c:	6998      	ldr	r0, [r3, #24]
 8000e5e:	68fb      	ldr	r3, [r7, #12]
 8000e60:	6a19      	ldr	r1, [r3, #32]
 8000e62:	68fb      	ldr	r3, [r7, #12]
 8000e64:	69da      	ldr	r2, [r3, #28]
 8000e66:	68fb      	ldr	r3, [r7, #12]
 8000e68:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 8000e6a:	2300      	movs	r3, #0
 8000e6c:	9300      	str	r3, [sp, #0]
 8000e6e:	4623      	mov	r3, r4
 8000e70:	f7ff ff96 	bl	8000da0 <draw_rect>

		obj->square.x1 +=x;
 8000e74:	68fb      	ldr	r3, [r7, #12]
 8000e76:	699a      	ldr	r2, [r3, #24]
 8000e78:	68bb      	ldr	r3, [r7, #8]
 8000e7a:	441a      	add	r2, r3
 8000e7c:	68fb      	ldr	r3, [r7, #12]
 8000e7e:	619a      	str	r2, [r3, #24]
		obj->square.y1 +=y;
 8000e80:	68fb      	ldr	r3, [r7, #12]
 8000e82:	6a1a      	ldr	r2, [r3, #32]
 8000e84:	687b      	ldr	r3, [r7, #4]
 8000e86:	441a      	add	r2, r3
 8000e88:	68fb      	ldr	r3, [r7, #12]
 8000e8a:	621a      	str	r2, [r3, #32]
		obj->square.x2 +=x;
 8000e8c:	68fb      	ldr	r3, [r7, #12]
 8000e8e:	69da      	ldr	r2, [r3, #28]
 8000e90:	68bb      	ldr	r3, [r7, #8]
 8000e92:	441a      	add	r2, r3
 8000e94:	68fb      	ldr	r3, [r7, #12]
 8000e96:	61da      	str	r2, [r3, #28]
		obj->square.y2 +=y;
 8000e98:	68fb      	ldr	r3, [r7, #12]
 8000e9a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000e9c:	687b      	ldr	r3, [r7, #4]
 8000e9e:	441a      	add	r2, r3
 8000ea0:	68fb      	ldr	r3, [r7, #12]
 8000ea2:	625a      	str	r2, [r3, #36]	; 0x24

		draw_rect(obj->square.x1,obj->square.y1, obj->square.x2,obj->square.y2, 1);
 8000ea4:	68fb      	ldr	r3, [r7, #12]
 8000ea6:	6998      	ldr	r0, [r3, #24]
 8000ea8:	68fb      	ldr	r3, [r7, #12]
 8000eaa:	6a19      	ldr	r1, [r3, #32]
 8000eac:	68fb      	ldr	r3, [r7, #12]
 8000eae:	69da      	ldr	r2, [r3, #28]
 8000eb0:	68fb      	ldr	r3, [r7, #12]
 8000eb2:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 8000eb4:	2301      	movs	r3, #1
 8000eb6:	9300      	str	r3, [sp, #0]
 8000eb8:	4623      	mov	r3, r4
 8000eba:	f7ff ff71 	bl	8000da0 <draw_rect>

	}

	if(obj->object_type == OBJECT_CIRCLE) {
 8000ebe:	68fb      	ldr	r3, [r7, #12]
 8000ec0:	781b      	ldrb	r3, [r3, #0]
 8000ec2:	2b00      	cmp	r3, #0
 8000ec4:	d11d      	bne.n	8000f02 <object_move+0xbc>

			ssd1306_DrawCircle(obj->circle.x1,obj->circle.y1, obj->circle.radius, 0);
 8000ec6:	68fb      	ldr	r3, [r7, #12]
 8000ec8:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8000eca:	68fb      	ldr	r3, [r7, #12]
 8000ecc:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8000ece:	68fb      	ldr	r3, [r7, #12]
 8000ed0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000ed2:	2300      	movs	r3, #0
 8000ed4:	f000 fb4c 	bl	8001570 <ssd1306_DrawCircle>

			obj->circle.x1 +=x;
 8000ed8:	68fb      	ldr	r3, [r7, #12]
 8000eda:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000edc:	68bb      	ldr	r3, [r7, #8]
 8000ede:	441a      	add	r2, r3
 8000ee0:	68fb      	ldr	r3, [r7, #12]
 8000ee2:	631a      	str	r2, [r3, #48]	; 0x30
			obj->circle.y1 +=y;
 8000ee4:	68fb      	ldr	r3, [r7, #12]
 8000ee6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000ee8:	687b      	ldr	r3, [r7, #4]
 8000eea:	441a      	add	r2, r3
 8000eec:	68fb      	ldr	r3, [r7, #12]
 8000eee:	635a      	str	r2, [r3, #52]	; 0x34

			ssd1306_DrawCircle(obj->circle.x1,obj->circle.y1, obj->circle.radius, 1);
 8000ef0:	68fb      	ldr	r3, [r7, #12]
 8000ef2:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8000ef4:	68fb      	ldr	r3, [r7, #12]
 8000ef6:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8000ef8:	68fb      	ldr	r3, [r7, #12]
 8000efa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000efc:	2301      	movs	r3, #1
 8000efe:	f000 fb37 	bl	8001570 <ssd1306_DrawCircle>

		}


	ssd1306_UpdateScreen();
 8000f02:	f000 faaf 	bl	8001464 <ssd1306_UpdateScreen>
}
 8000f06:	bf00      	nop
 8000f08:	3714      	adds	r7, #20
 8000f0a:	46bd      	mov	sp, r7
 8000f0c:	bd90      	pop	{r4, r7, pc}
	...

08000f10 <MX_SPI1_Init>:
SPI_HandleTypeDef hspi1;
SPI_HandleTypeDef hspi2;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8000f10:	b580      	push	{r7, lr}
 8000f12:	af00      	add	r7, sp, #0

  hspi1.Instance = SPI1;
 8000f14:	4b17      	ldr	r3, [pc, #92]	; (8000f74 <MX_SPI1_Init+0x64>)
 8000f16:	4a18      	ldr	r2, [pc, #96]	; (8000f78 <MX_SPI1_Init+0x68>)
 8000f18:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000f1a:	4b16      	ldr	r3, [pc, #88]	; (8000f74 <MX_SPI1_Init+0x64>)
 8000f1c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000f20:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000f22:	4b14      	ldr	r3, [pc, #80]	; (8000f74 <MX_SPI1_Init+0x64>)
 8000f24:	2200      	movs	r2, #0
 8000f26:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000f28:	4b12      	ldr	r3, [pc, #72]	; (8000f74 <MX_SPI1_Init+0x64>)
 8000f2a:	2200      	movs	r2, #0
 8000f2c:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000f2e:	4b11      	ldr	r3, [pc, #68]	; (8000f74 <MX_SPI1_Init+0x64>)
 8000f30:	2200      	movs	r2, #0
 8000f32:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000f34:	4b0f      	ldr	r3, [pc, #60]	; (8000f74 <MX_SPI1_Init+0x64>)
 8000f36:	2200      	movs	r2, #0
 8000f38:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000f3a:	4b0e      	ldr	r3, [pc, #56]	; (8000f74 <MX_SPI1_Init+0x64>)
 8000f3c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000f40:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000f42:	4b0c      	ldr	r3, [pc, #48]	; (8000f74 <MX_SPI1_Init+0x64>)
 8000f44:	2200      	movs	r2, #0
 8000f46:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000f48:	4b0a      	ldr	r3, [pc, #40]	; (8000f74 <MX_SPI1_Init+0x64>)
 8000f4a:	2200      	movs	r2, #0
 8000f4c:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000f4e:	4b09      	ldr	r3, [pc, #36]	; (8000f74 <MX_SPI1_Init+0x64>)
 8000f50:	2200      	movs	r2, #0
 8000f52:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000f54:	4b07      	ldr	r3, [pc, #28]	; (8000f74 <MX_SPI1_Init+0x64>)
 8000f56:	2200      	movs	r2, #0
 8000f58:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000f5a:	4b06      	ldr	r3, [pc, #24]	; (8000f74 <MX_SPI1_Init+0x64>)
 8000f5c:	220a      	movs	r2, #10
 8000f5e:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000f60:	4804      	ldr	r0, [pc, #16]	; (8000f74 <MX_SPI1_Init+0x64>)
 8000f62:	f003 fec7 	bl	8004cf4 <HAL_SPI_Init>
 8000f66:	4603      	mov	r3, r0
 8000f68:	2b00      	cmp	r3, #0
 8000f6a:	d001      	beq.n	8000f70 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000f6c:	f7ff fe0a 	bl	8000b84 <Error_Handler>
  }

}
 8000f70:	bf00      	nop
 8000f72:	bd80      	pop	{r7, pc}
 8000f74:	200001bc 	.word	0x200001bc
 8000f78:	40013000 	.word	0x40013000

08000f7c <MX_SPI2_Init>:
/* SPI2 init function */
void MX_SPI2_Init(void)
{
 8000f7c:	b580      	push	{r7, lr}
 8000f7e:	af00      	add	r7, sp, #0

  hspi2.Instance = SPI2;
 8000f80:	4b17      	ldr	r3, [pc, #92]	; (8000fe0 <MX_SPI2_Init+0x64>)
 8000f82:	4a18      	ldr	r2, [pc, #96]	; (8000fe4 <MX_SPI2_Init+0x68>)
 8000f84:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8000f86:	4b16      	ldr	r3, [pc, #88]	; (8000fe0 <MX_SPI2_Init+0x64>)
 8000f88:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000f8c:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8000f8e:	4b14      	ldr	r3, [pc, #80]	; (8000fe0 <MX_SPI2_Init+0x64>)
 8000f90:	2200      	movs	r2, #0
 8000f92:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8000f94:	4b12      	ldr	r3, [pc, #72]	; (8000fe0 <MX_SPI2_Init+0x64>)
 8000f96:	2200      	movs	r2, #0
 8000f98:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000f9a:	4b11      	ldr	r3, [pc, #68]	; (8000fe0 <MX_SPI2_Init+0x64>)
 8000f9c:	2200      	movs	r2, #0
 8000f9e:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000fa0:	4b0f      	ldr	r3, [pc, #60]	; (8000fe0 <MX_SPI2_Init+0x64>)
 8000fa2:	2200      	movs	r2, #0
 8000fa4:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8000fa6:	4b0e      	ldr	r3, [pc, #56]	; (8000fe0 <MX_SPI2_Init+0x64>)
 8000fa8:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000fac:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8000fae:	4b0c      	ldr	r3, [pc, #48]	; (8000fe0 <MX_SPI2_Init+0x64>)
 8000fb0:	2210      	movs	r2, #16
 8000fb2:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000fb4:	4b0a      	ldr	r3, [pc, #40]	; (8000fe0 <MX_SPI2_Init+0x64>)
 8000fb6:	2200      	movs	r2, #0
 8000fb8:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8000fba:	4b09      	ldr	r3, [pc, #36]	; (8000fe0 <MX_SPI2_Init+0x64>)
 8000fbc:	2200      	movs	r2, #0
 8000fbe:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000fc0:	4b07      	ldr	r3, [pc, #28]	; (8000fe0 <MX_SPI2_Init+0x64>)
 8000fc2:	2200      	movs	r2, #0
 8000fc4:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 8000fc6:	4b06      	ldr	r3, [pc, #24]	; (8000fe0 <MX_SPI2_Init+0x64>)
 8000fc8:	220a      	movs	r2, #10
 8000fca:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8000fcc:	4804      	ldr	r0, [pc, #16]	; (8000fe0 <MX_SPI2_Init+0x64>)
 8000fce:	f003 fe91 	bl	8004cf4 <HAL_SPI_Init>
 8000fd2:	4603      	mov	r3, r0
 8000fd4:	2b00      	cmp	r3, #0
 8000fd6:	d001      	beq.n	8000fdc <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8000fd8:	f7ff fdd4 	bl	8000b84 <Error_Handler>
  }

}
 8000fdc:	bf00      	nop
 8000fde:	bd80      	pop	{r7, pc}
 8000fe0:	20000164 	.word	0x20000164
 8000fe4:	40003800 	.word	0x40003800

08000fe8 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8000fe8:	b580      	push	{r7, lr}
 8000fea:	b08c      	sub	sp, #48	; 0x30
 8000fec:	af00      	add	r7, sp, #0
 8000fee:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ff0:	f107 031c 	add.w	r3, r7, #28
 8000ff4:	2200      	movs	r2, #0
 8000ff6:	601a      	str	r2, [r3, #0]
 8000ff8:	605a      	str	r2, [r3, #4]
 8000ffa:	609a      	str	r2, [r3, #8]
 8000ffc:	60da      	str	r2, [r3, #12]
 8000ffe:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	681b      	ldr	r3, [r3, #0]
 8001004:	4a32      	ldr	r2, [pc, #200]	; (80010d0 <HAL_SPI_MspInit+0xe8>)
 8001006:	4293      	cmp	r3, r2
 8001008:	d12c      	bne.n	8001064 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800100a:	2300      	movs	r3, #0
 800100c:	61bb      	str	r3, [r7, #24]
 800100e:	4b31      	ldr	r3, [pc, #196]	; (80010d4 <HAL_SPI_MspInit+0xec>)
 8001010:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001012:	4a30      	ldr	r2, [pc, #192]	; (80010d4 <HAL_SPI_MspInit+0xec>)
 8001014:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001018:	6453      	str	r3, [r2, #68]	; 0x44
 800101a:	4b2e      	ldr	r3, [pc, #184]	; (80010d4 <HAL_SPI_MspInit+0xec>)
 800101c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800101e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001022:	61bb      	str	r3, [r7, #24]
 8001024:	69bb      	ldr	r3, [r7, #24]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001026:	2300      	movs	r3, #0
 8001028:	617b      	str	r3, [r7, #20]
 800102a:	4b2a      	ldr	r3, [pc, #168]	; (80010d4 <HAL_SPI_MspInit+0xec>)
 800102c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800102e:	4a29      	ldr	r2, [pc, #164]	; (80010d4 <HAL_SPI_MspInit+0xec>)
 8001030:	f043 0301 	orr.w	r3, r3, #1
 8001034:	6313      	str	r3, [r2, #48]	; 0x30
 8001036:	4b27      	ldr	r3, [pc, #156]	; (80010d4 <HAL_SPI_MspInit+0xec>)
 8001038:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800103a:	f003 0301 	and.w	r3, r3, #1
 800103e:	617b      	str	r3, [r7, #20]
 8001040:	697b      	ldr	r3, [r7, #20]
    /**SPI1 GPIO Configuration    
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI 
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 8001042:	23e0      	movs	r3, #224	; 0xe0
 8001044:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001046:	2302      	movs	r3, #2
 8001048:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800104a:	2300      	movs	r3, #0
 800104c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800104e:	2300      	movs	r3, #0
 8001050:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001052:	2305      	movs	r3, #5
 8001054:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001056:	f107 031c 	add.w	r3, r7, #28
 800105a:	4619      	mov	r1, r3
 800105c:	481e      	ldr	r0, [pc, #120]	; (80010d8 <HAL_SPI_MspInit+0xf0>)
 800105e:	f000 fce7 	bl	8001a30 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 8001062:	e031      	b.n	80010c8 <HAL_SPI_MspInit+0xe0>
  else if(spiHandle->Instance==SPI2)
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	681b      	ldr	r3, [r3, #0]
 8001068:	4a1c      	ldr	r2, [pc, #112]	; (80010dc <HAL_SPI_MspInit+0xf4>)
 800106a:	4293      	cmp	r3, r2
 800106c:	d12c      	bne.n	80010c8 <HAL_SPI_MspInit+0xe0>
    __HAL_RCC_SPI2_CLK_ENABLE();
 800106e:	2300      	movs	r3, #0
 8001070:	613b      	str	r3, [r7, #16]
 8001072:	4b18      	ldr	r3, [pc, #96]	; (80010d4 <HAL_SPI_MspInit+0xec>)
 8001074:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001076:	4a17      	ldr	r2, [pc, #92]	; (80010d4 <HAL_SPI_MspInit+0xec>)
 8001078:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800107c:	6413      	str	r3, [r2, #64]	; 0x40
 800107e:	4b15      	ldr	r3, [pc, #84]	; (80010d4 <HAL_SPI_MspInit+0xec>)
 8001080:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001082:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001086:	613b      	str	r3, [r7, #16]
 8001088:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800108a:	2300      	movs	r3, #0
 800108c:	60fb      	str	r3, [r7, #12]
 800108e:	4b11      	ldr	r3, [pc, #68]	; (80010d4 <HAL_SPI_MspInit+0xec>)
 8001090:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001092:	4a10      	ldr	r2, [pc, #64]	; (80010d4 <HAL_SPI_MspInit+0xec>)
 8001094:	f043 0302 	orr.w	r3, r3, #2
 8001098:	6313      	str	r3, [r2, #48]	; 0x30
 800109a:	4b0e      	ldr	r3, [pc, #56]	; (80010d4 <HAL_SPI_MspInit+0xec>)
 800109c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800109e:	f003 0302 	and.w	r3, r3, #2
 80010a2:	60fb      	str	r3, [r7, #12]
 80010a4:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_15;
 80010a6:	f44f 4320 	mov.w	r3, #40960	; 0xa000
 80010aa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010ac:	2302      	movs	r3, #2
 80010ae:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010b0:	2300      	movs	r3, #0
 80010b2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80010b4:	2303      	movs	r3, #3
 80010b6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80010b8:	2305      	movs	r3, #5
 80010ba:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80010bc:	f107 031c 	add.w	r3, r7, #28
 80010c0:	4619      	mov	r1, r3
 80010c2:	4807      	ldr	r0, [pc, #28]	; (80010e0 <HAL_SPI_MspInit+0xf8>)
 80010c4:	f000 fcb4 	bl	8001a30 <HAL_GPIO_Init>
}
 80010c8:	bf00      	nop
 80010ca:	3730      	adds	r7, #48	; 0x30
 80010cc:	46bd      	mov	sp, r7
 80010ce:	bd80      	pop	{r7, pc}
 80010d0:	40013000 	.word	0x40013000
 80010d4:	40023800 	.word	0x40023800
 80010d8:	40020000 	.word	0x40020000
 80010dc:	40003800 	.word	0x40003800
 80010e0:	40020400 	.word	0x40020400

080010e4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80010e4:	b580      	push	{r7, lr}
 80010e6:	b082      	sub	sp, #8
 80010e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80010ea:	2300      	movs	r3, #0
 80010ec:	607b      	str	r3, [r7, #4]
 80010ee:	4b10      	ldr	r3, [pc, #64]	; (8001130 <HAL_MspInit+0x4c>)
 80010f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010f2:	4a0f      	ldr	r2, [pc, #60]	; (8001130 <HAL_MspInit+0x4c>)
 80010f4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80010f8:	6453      	str	r3, [r2, #68]	; 0x44
 80010fa:	4b0d      	ldr	r3, [pc, #52]	; (8001130 <HAL_MspInit+0x4c>)
 80010fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010fe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001102:	607b      	str	r3, [r7, #4]
 8001104:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001106:	2300      	movs	r3, #0
 8001108:	603b      	str	r3, [r7, #0]
 800110a:	4b09      	ldr	r3, [pc, #36]	; (8001130 <HAL_MspInit+0x4c>)
 800110c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800110e:	4a08      	ldr	r2, [pc, #32]	; (8001130 <HAL_MspInit+0x4c>)
 8001110:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001114:	6413      	str	r3, [r2, #64]	; 0x40
 8001116:	4b06      	ldr	r3, [pc, #24]	; (8001130 <HAL_MspInit+0x4c>)
 8001118:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800111a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800111e:	603b      	str	r3, [r7, #0]
 8001120:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8001122:	2007      	movs	r0, #7
 8001124:	f000 fc42 	bl	80019ac <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001128:	bf00      	nop
 800112a:	3708      	adds	r7, #8
 800112c:	46bd      	mov	sp, r7
 800112e:	bd80      	pop	{r7, pc}
 8001130:	40023800 	.word	0x40023800

08001134 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001134:	b480      	push	{r7}
 8001136:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001138:	bf00      	nop
 800113a:	46bd      	mov	sp, r7
 800113c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001140:	4770      	bx	lr

08001142 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001142:	b480      	push	{r7}
 8001144:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001146:	e7fe      	b.n	8001146 <HardFault_Handler+0x4>

08001148 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001148:	b480      	push	{r7}
 800114a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800114c:	e7fe      	b.n	800114c <MemManage_Handler+0x4>

0800114e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800114e:	b480      	push	{r7}
 8001150:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001152:	e7fe      	b.n	8001152 <BusFault_Handler+0x4>

08001154 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001154:	b480      	push	{r7}
 8001156:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001158:	e7fe      	b.n	8001158 <UsageFault_Handler+0x4>

0800115a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800115a:	b480      	push	{r7}
 800115c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800115e:	bf00      	nop
 8001160:	46bd      	mov	sp, r7
 8001162:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001166:	4770      	bx	lr

08001168 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001168:	b480      	push	{r7}
 800116a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800116c:	bf00      	nop
 800116e:	46bd      	mov	sp, r7
 8001170:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001174:	4770      	bx	lr

08001176 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001176:	b480      	push	{r7}
 8001178:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800117a:	bf00      	nop
 800117c:	46bd      	mov	sp, r7
 800117e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001182:	4770      	bx	lr

08001184 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001184:	b580      	push	{r7, lr}
 8001186:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001188:	f000 fafe 	bl	8001788 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800118c:	bf00      	nop
 800118e:	bd80      	pop	{r7, pc}

08001190 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8001190:	b580      	push	{r7, lr}
 8001192:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 8001194:	4802      	ldr	r0, [pc, #8]	; (80011a0 <OTG_FS_IRQHandler+0x10>)
 8001196:	f001 f883 	bl	80022a0 <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 800119a:	bf00      	nop
 800119c:	bd80      	pop	{r7, pc}
 800119e:	bf00      	nop
 80011a0:	200009e4 	.word	0x200009e4

080011a4 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 80011a4:	b580      	push	{r7, lr}
 80011a6:	b084      	sub	sp, #16
 80011a8:	af00      	add	r7, sp, #0
 80011aa:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 80011ac:	4b11      	ldr	r3, [pc, #68]	; (80011f4 <_sbrk+0x50>)
 80011ae:	681b      	ldr	r3, [r3, #0]
 80011b0:	2b00      	cmp	r3, #0
 80011b2:	d102      	bne.n	80011ba <_sbrk+0x16>
		heap_end = &end;
 80011b4:	4b0f      	ldr	r3, [pc, #60]	; (80011f4 <_sbrk+0x50>)
 80011b6:	4a10      	ldr	r2, [pc, #64]	; (80011f8 <_sbrk+0x54>)
 80011b8:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 80011ba:	4b0e      	ldr	r3, [pc, #56]	; (80011f4 <_sbrk+0x50>)
 80011bc:	681b      	ldr	r3, [r3, #0]
 80011be:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 80011c0:	4b0c      	ldr	r3, [pc, #48]	; (80011f4 <_sbrk+0x50>)
 80011c2:	681a      	ldr	r2, [r3, #0]
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	4413      	add	r3, r2
 80011c8:	466a      	mov	r2, sp
 80011ca:	4293      	cmp	r3, r2
 80011cc:	d907      	bls.n	80011de <_sbrk+0x3a>
	{
		errno = ENOMEM;
 80011ce:	f006 f9db 	bl	8007588 <__errno>
 80011d2:	4602      	mov	r2, r0
 80011d4:	230c      	movs	r3, #12
 80011d6:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 80011d8:	f04f 33ff 	mov.w	r3, #4294967295
 80011dc:	e006      	b.n	80011ec <_sbrk+0x48>
	}

	heap_end += incr;
 80011de:	4b05      	ldr	r3, [pc, #20]	; (80011f4 <_sbrk+0x50>)
 80011e0:	681a      	ldr	r2, [r3, #0]
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	4413      	add	r3, r2
 80011e6:	4a03      	ldr	r2, [pc, #12]	; (80011f4 <_sbrk+0x50>)
 80011e8:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 80011ea:	68fb      	ldr	r3, [r7, #12]
}
 80011ec:	4618      	mov	r0, r3
 80011ee:	3710      	adds	r7, #16
 80011f0:	46bd      	mov	sp, r7
 80011f2:	bd80      	pop	{r7, pc}
 80011f4:	200000ac 	.word	0x200000ac
 80011f8:	20000cb0 	.word	0x20000cb0

080011fc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80011fc:	b480      	push	{r7}
 80011fe:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001200:	4b08      	ldr	r3, [pc, #32]	; (8001224 <SystemInit+0x28>)
 8001202:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001206:	4a07      	ldr	r2, [pc, #28]	; (8001224 <SystemInit+0x28>)
 8001208:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800120c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001210:	4b04      	ldr	r3, [pc, #16]	; (8001224 <SystemInit+0x28>)
 8001212:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001216:	609a      	str	r2, [r3, #8]
#endif
}
 8001218:	bf00      	nop
 800121a:	46bd      	mov	sp, r7
 800121c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001220:	4770      	bx	lr
 8001222:	bf00      	nop
 8001224:	e000ed00 	.word	0xe000ed00

08001228 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001228:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001260 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 800122c:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800122e:	e003      	b.n	8001238 <LoopCopyDataInit>

08001230 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8001230:	4b0c      	ldr	r3, [pc, #48]	; (8001264 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8001232:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8001234:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8001236:	3104      	adds	r1, #4

08001238 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8001238:	480b      	ldr	r0, [pc, #44]	; (8001268 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800123a:	4b0c      	ldr	r3, [pc, #48]	; (800126c <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 800123c:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800123e:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8001240:	d3f6      	bcc.n	8001230 <CopyDataInit>
  ldr  r2, =_sbss
 8001242:	4a0b      	ldr	r2, [pc, #44]	; (8001270 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8001244:	e002      	b.n	800124c <LoopFillZerobss>

08001246 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8001246:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8001248:	f842 3b04 	str.w	r3, [r2], #4

0800124c <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 800124c:	4b09      	ldr	r3, [pc, #36]	; (8001274 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800124e:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8001250:	d3f9      	bcc.n	8001246 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001252:	f7ff ffd3 	bl	80011fc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001256:	f006 f99d 	bl	8007594 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800125a:	f7ff fb43 	bl	80008e4 <main>
  bx  lr    
 800125e:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001260:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8001264:	080077c4 	.word	0x080077c4
  ldr  r0, =_sdata
 8001268:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 800126c:	20000090 	.word	0x20000090
  ldr  r2, =_sbss
 8001270:	20000090 	.word	0x20000090
  ldr  r3, = _ebss
 8001274:	20000cac 	.word	0x20000cac

08001278 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001278:	e7fe      	b.n	8001278 <ADC_IRQHandler>
	...

0800127c <ssd1306_Reset>:
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x40, 1, buffer, buff_size, HAL_MAX_DELAY);
}

#elif defined(SSD1306_USE_SPI)

void ssd1306_Reset(void) {
 800127c:	b580      	push	{r7, lr}
 800127e:	af00      	add	r7, sp, #0
    // CS = High (not selected)
    HAL_GPIO_WritePin(SSD1306_CS_Port, SSD1306_CS_Pin, GPIO_PIN_SET);
 8001280:	2201      	movs	r2, #1
 8001282:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001286:	480a      	ldr	r0, [pc, #40]	; (80012b0 <ssd1306_Reset+0x34>)
 8001288:	f000 fd6c 	bl	8001d64 <HAL_GPIO_WritePin>

    // Reset the OLED
    HAL_GPIO_WritePin(SSD1306_Reset_Port, SSD1306_Reset_Pin, GPIO_PIN_RESET);
 800128c:	2200      	movs	r2, #0
 800128e:	2110      	movs	r1, #16
 8001290:	4807      	ldr	r0, [pc, #28]	; (80012b0 <ssd1306_Reset+0x34>)
 8001292:	f000 fd67 	bl	8001d64 <HAL_GPIO_WritePin>
    HAL_Delay(10);
 8001296:	200a      	movs	r0, #10
 8001298:	f000 fa96 	bl	80017c8 <HAL_Delay>
    HAL_GPIO_WritePin(SSD1306_Reset_Port, SSD1306_Reset_Pin, GPIO_PIN_SET);
 800129c:	2201      	movs	r2, #1
 800129e:	2110      	movs	r1, #16
 80012a0:	4803      	ldr	r0, [pc, #12]	; (80012b0 <ssd1306_Reset+0x34>)
 80012a2:	f000 fd5f 	bl	8001d64 <HAL_GPIO_WritePin>
    HAL_Delay(10);
 80012a6:	200a      	movs	r0, #10
 80012a8:	f000 fa8e 	bl	80017c8 <HAL_Delay>
}
 80012ac:	bf00      	nop
 80012ae:	bd80      	pop	{r7, pc}
 80012b0:	40021000 	.word	0x40021000

080012b4 <ssd1306_WriteCommand>:

// Send a byte to the command register
void ssd1306_WriteCommand(uint8_t byte) {
 80012b4:	b580      	push	{r7, lr}
 80012b6:	b082      	sub	sp, #8
 80012b8:	af00      	add	r7, sp, #0
 80012ba:	4603      	mov	r3, r0
 80012bc:	71fb      	strb	r3, [r7, #7]
    HAL_GPIO_WritePin(SSD1306_CS_Port, SSD1306_CS_Pin, GPIO_PIN_RESET); // select OLED
 80012be:	2200      	movs	r2, #0
 80012c0:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80012c4:	480c      	ldr	r0, [pc, #48]	; (80012f8 <ssd1306_WriteCommand+0x44>)
 80012c6:	f000 fd4d 	bl	8001d64 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(SSD1306_DC_Port, SSD1306_DC_Pin, GPIO_PIN_RESET); // command
 80012ca:	2200      	movs	r2, #0
 80012cc:	2120      	movs	r1, #32
 80012ce:	480a      	ldr	r0, [pc, #40]	; (80012f8 <ssd1306_WriteCommand+0x44>)
 80012d0:	f000 fd48 	bl	8001d64 <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&SSD1306_SPI_PORT,  &byte, 1, HAL_MAX_DELAY);
 80012d4:	1df9      	adds	r1, r7, #7
 80012d6:	f04f 33ff 	mov.w	r3, #4294967295
 80012da:	2201      	movs	r2, #1
 80012dc:	4807      	ldr	r0, [pc, #28]	; (80012fc <ssd1306_WriteCommand+0x48>)
 80012de:	f003 fd6d 	bl	8004dbc <HAL_SPI_Transmit>
    HAL_GPIO_WritePin(SSD1306_CS_Port, SSD1306_CS_Pin, GPIO_PIN_SET); // un-select OLED
 80012e2:	2201      	movs	r2, #1
 80012e4:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80012e8:	4803      	ldr	r0, [pc, #12]	; (80012f8 <ssd1306_WriteCommand+0x44>)
 80012ea:	f000 fd3b 	bl	8001d64 <HAL_GPIO_WritePin>
}
 80012ee:	bf00      	nop
 80012f0:	3708      	adds	r7, #8
 80012f2:	46bd      	mov	sp, r7
 80012f4:	bd80      	pop	{r7, pc}
 80012f6:	bf00      	nop
 80012f8:	40021000 	.word	0x40021000
 80012fc:	20000164 	.word	0x20000164

08001300 <ssd1306_WriteData>:

// Send data
void ssd1306_WriteData(uint8_t* buffer, size_t buff_size) {
 8001300:	b580      	push	{r7, lr}
 8001302:	b082      	sub	sp, #8
 8001304:	af00      	add	r7, sp, #0
 8001306:	6078      	str	r0, [r7, #4]
 8001308:	6039      	str	r1, [r7, #0]
    HAL_GPIO_WritePin(SSD1306_CS_Port, SSD1306_CS_Pin, GPIO_PIN_RESET); // select OLED
 800130a:	2200      	movs	r2, #0
 800130c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001310:	480c      	ldr	r0, [pc, #48]	; (8001344 <ssd1306_WriteData+0x44>)
 8001312:	f000 fd27 	bl	8001d64 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(SSD1306_DC_Port, SSD1306_DC_Pin, GPIO_PIN_SET); // data
 8001316:	2201      	movs	r2, #1
 8001318:	2120      	movs	r1, #32
 800131a:	480a      	ldr	r0, [pc, #40]	; (8001344 <ssd1306_WriteData+0x44>)
 800131c:	f000 fd22 	bl	8001d64 <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&SSD1306_SPI_PORT, buffer, buff_size, HAL_MAX_DELAY);
 8001320:	683b      	ldr	r3, [r7, #0]
 8001322:	b29a      	uxth	r2, r3
 8001324:	f04f 33ff 	mov.w	r3, #4294967295
 8001328:	6879      	ldr	r1, [r7, #4]
 800132a:	4807      	ldr	r0, [pc, #28]	; (8001348 <ssd1306_WriteData+0x48>)
 800132c:	f003 fd46 	bl	8004dbc <HAL_SPI_Transmit>
    HAL_GPIO_WritePin(SSD1306_CS_Port, SSD1306_CS_Pin, GPIO_PIN_SET); // un-select OLED
 8001330:	2201      	movs	r2, #1
 8001332:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001336:	4803      	ldr	r0, [pc, #12]	; (8001344 <ssd1306_WriteData+0x44>)
 8001338:	f000 fd14 	bl	8001d64 <HAL_GPIO_WritePin>
}
 800133c:	bf00      	nop
 800133e:	3708      	adds	r7, #8
 8001340:	46bd      	mov	sp, r7
 8001342:	bd80      	pop	{r7, pc}
 8001344:	40021000 	.word	0x40021000
 8001348:	20000164 	.word	0x20000164

0800134c <ssd1306_Init>:
    }
    return ret;
}

// Initialize the oled screen
void ssd1306_Init(void) {
 800134c:	b580      	push	{r7, lr}
 800134e:	af00      	add	r7, sp, #0
    // Reset OLED
    ssd1306_Reset();
 8001350:	f7ff ff94 	bl	800127c <ssd1306_Reset>

    // Wait for the screen to boot
    HAL_Delay(100);
 8001354:	2064      	movs	r0, #100	; 0x64
 8001356:	f000 fa37 	bl	80017c8 <HAL_Delay>

    // Init OLED
    ssd1306_SetDisplayOn(0); //display off
 800135a:	2000      	movs	r0, #0
 800135c:	f000 f9a4 	bl	80016a8 <ssd1306_SetDisplayOn>

    ssd1306_WriteCommand(0x20); //Set Memory Addressing Mode
 8001360:	2020      	movs	r0, #32
 8001362:	f7ff ffa7 	bl	80012b4 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); // 00b,Horizontal Addressing Mode; 01b,Vertical Addressing Mode;
 8001366:	2000      	movs	r0, #0
 8001368:	f7ff ffa4 	bl	80012b4 <ssd1306_WriteCommand>
                                // 10b,Page Addressing Mode (RESET); 11b,Invalid

    ssd1306_WriteCommand(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 800136c:	20b0      	movs	r0, #176	; 0xb0
 800136e:	f7ff ffa1 	bl	80012b4 <ssd1306_WriteCommand>

#ifdef SSD1306_MIRROR_VERT
    ssd1306_WriteCommand(0xC0); // Mirror vertically
#else
    ssd1306_WriteCommand(0xC8); //Set COM Output Scan Direction
 8001372:	20c8      	movs	r0, #200	; 0xc8
 8001374:	f7ff ff9e 	bl	80012b4 <ssd1306_WriteCommand>
#endif

    ssd1306_WriteCommand(0x00); //---set low column address
 8001378:	2000      	movs	r0, #0
 800137a:	f7ff ff9b 	bl	80012b4 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x10); //---set high column address
 800137e:	2010      	movs	r0, #16
 8001380:	f7ff ff98 	bl	80012b4 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x40); //--set start line address - CHECK
 8001384:	2040      	movs	r0, #64	; 0x40
 8001386:	f7ff ff95 	bl	80012b4 <ssd1306_WriteCommand>

    ssd1306_SetContrast(0xFF);
 800138a:	20ff      	movs	r0, #255	; 0xff
 800138c:	f000 f978 	bl	8001680 <ssd1306_SetContrast>

#ifdef SSD1306_MIRROR_HORIZ
    ssd1306_WriteCommand(0xA0); // Mirror horizontally
#else
    ssd1306_WriteCommand(0xA1); //--set segment re-map 0 to 127 - CHECK
 8001390:	20a1      	movs	r0, #161	; 0xa1
 8001392:	f7ff ff8f 	bl	80012b4 <ssd1306_WriteCommand>
#endif

#ifdef SSD1306_INVERSE_COLOR
    ssd1306_WriteCommand(0xA7); //--set inverse color
#else
    ssd1306_WriteCommand(0xA6); //--set normal color
 8001396:	20a6      	movs	r0, #166	; 0xa6
 8001398:	f7ff ff8c 	bl	80012b4 <ssd1306_WriteCommand>
// Set multiplex ratio.
#if (SSD1306_HEIGHT == 128)
    // Found in the Luma Python lib for SH1106.
    ssd1306_WriteCommand(0xFF);
#else
    ssd1306_WriteCommand(0xA8); //--set multiplex ratio(1 to 64) - CHECK
 800139c:	20a8      	movs	r0, #168	; 0xa8
 800139e:	f7ff ff89 	bl	80012b4 <ssd1306_WriteCommand>
#endif

#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x1F); //
#elif (SSD1306_HEIGHT == 64)
    ssd1306_WriteCommand(0x3F); //
 80013a2:	203f      	movs	r0, #63	; 0x3f
 80013a4:	f7ff ff86 	bl	80012b4 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x3F); // Seems to work for 128px high displays too.
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 80013a8:	20a4      	movs	r0, #164	; 0xa4
 80013aa:	f7ff ff83 	bl	80012b4 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD3); //-set display offset - CHECK
 80013ae:	20d3      	movs	r0, #211	; 0xd3
 80013b0:	f7ff ff80 	bl	80012b4 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); //-not offset
 80013b4:	2000      	movs	r0, #0
 80013b6:	f7ff ff7d 	bl	80012b4 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD5); //--set display clock divide ratio/oscillator frequency
 80013ba:	20d5      	movs	r0, #213	; 0xd5
 80013bc:	f7ff ff7a 	bl	80012b4 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0xF0); //--set divide ratio
 80013c0:	20f0      	movs	r0, #240	; 0xf0
 80013c2:	f7ff ff77 	bl	80012b4 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD9); //--set pre-charge period
 80013c6:	20d9      	movs	r0, #217	; 0xd9
 80013c8:	f7ff ff74 	bl	80012b4 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x22); //
 80013cc:	2022      	movs	r0, #34	; 0x22
 80013ce:	f7ff ff71 	bl	80012b4 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xDA); //--set com pins hardware configuration - CHECK
 80013d2:	20da      	movs	r0, #218	; 0xda
 80013d4:	f7ff ff6e 	bl	80012b4 <ssd1306_WriteCommand>
#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x02);
#elif (SSD1306_HEIGHT == 64)
    ssd1306_WriteCommand(0x12);
 80013d8:	2012      	movs	r0, #18
 80013da:	f7ff ff6b 	bl	80012b4 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x12);
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xDB); //--set vcomh
 80013de:	20db      	movs	r0, #219	; 0xdb
 80013e0:	f7ff ff68 	bl	80012b4 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x20); //0x20,0.77xVcc
 80013e4:	2020      	movs	r0, #32
 80013e6:	f7ff ff65 	bl	80012b4 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x8D); //--set DC-DC enable
 80013ea:	208d      	movs	r0, #141	; 0x8d
 80013ec:	f7ff ff62 	bl	80012b4 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x14); //
 80013f0:	2014      	movs	r0, #20
 80013f2:	f7ff ff5f 	bl	80012b4 <ssd1306_WriteCommand>
    ssd1306_SetDisplayOn(1); //--turn on SSD1306 panel
 80013f6:	2001      	movs	r0, #1
 80013f8:	f000 f956 	bl	80016a8 <ssd1306_SetDisplayOn>

    // Clear screen
    ssd1306_Fill(Black);
 80013fc:	2000      	movs	r0, #0
 80013fe:	f000 f80f 	bl	8001420 <ssd1306_Fill>
    
    // Flush buffer to screen
    ssd1306_UpdateScreen();
 8001402:	f000 f82f 	bl	8001464 <ssd1306_UpdateScreen>
    
    // Set default values for screen object
    SSD1306.CurrentX = 0;
 8001406:	4b05      	ldr	r3, [pc, #20]	; (800141c <ssd1306_Init+0xd0>)
 8001408:	2200      	movs	r2, #0
 800140a:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = 0;
 800140c:	4b03      	ldr	r3, [pc, #12]	; (800141c <ssd1306_Init+0xd0>)
 800140e:	2200      	movs	r2, #0
 8001410:	805a      	strh	r2, [r3, #2]
    
    SSD1306.Initialized = 1;
 8001412:	4b02      	ldr	r3, [pc, #8]	; (800141c <ssd1306_Init+0xd0>)
 8001414:	2201      	movs	r2, #1
 8001416:	715a      	strb	r2, [r3, #5]
}
 8001418:	bf00      	nop
 800141a:	bd80      	pop	{r7, pc}
 800141c:	200000b0 	.word	0x200000b0

08001420 <ssd1306_Fill>:

// Fill the whole screen with the given color
void ssd1306_Fill(SSD1306_COLOR color) {
 8001420:	b480      	push	{r7}
 8001422:	b085      	sub	sp, #20
 8001424:	af00      	add	r7, sp, #0
 8001426:	4603      	mov	r3, r0
 8001428:	71fb      	strb	r3, [r7, #7]
    /* Set memory */
    uint32_t i;

    for(i = 0; i < sizeof(SSD1306_Buffer); i++) {
 800142a:	2300      	movs	r3, #0
 800142c:	60fb      	str	r3, [r7, #12]
 800142e:	e00d      	b.n	800144c <ssd1306_Fill+0x2c>
        SSD1306_Buffer[i] = (color == Black) ? 0x00 : 0xFF;
 8001430:	79fb      	ldrb	r3, [r7, #7]
 8001432:	2b00      	cmp	r3, #0
 8001434:	d101      	bne.n	800143a <ssd1306_Fill+0x1a>
 8001436:	2100      	movs	r1, #0
 8001438:	e000      	b.n	800143c <ssd1306_Fill+0x1c>
 800143a:	21ff      	movs	r1, #255	; 0xff
 800143c:	4a08      	ldr	r2, [pc, #32]	; (8001460 <ssd1306_Fill+0x40>)
 800143e:	68fb      	ldr	r3, [r7, #12]
 8001440:	4413      	add	r3, r2
 8001442:	460a      	mov	r2, r1
 8001444:	701a      	strb	r2, [r3, #0]
    for(i = 0; i < sizeof(SSD1306_Buffer); i++) {
 8001446:	68fb      	ldr	r3, [r7, #12]
 8001448:	3301      	adds	r3, #1
 800144a:	60fb      	str	r3, [r7, #12]
 800144c:	68fb      	ldr	r3, [r7, #12]
 800144e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001452:	d3ed      	bcc.n	8001430 <ssd1306_Fill+0x10>
    }
}
 8001454:	bf00      	nop
 8001456:	3714      	adds	r7, #20
 8001458:	46bd      	mov	sp, r7
 800145a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800145e:	4770      	bx	lr
 8001460:	20000214 	.word	0x20000214

08001464 <ssd1306_UpdateScreen>:

// Write the screenbuffer with changed to the screen
void ssd1306_UpdateScreen(void) {
 8001464:	b580      	push	{r7, lr}
 8001466:	b082      	sub	sp, #8
 8001468:	af00      	add	r7, sp, #0
    // depends on the screen height:
    //
    //  * 32px   ==  4 pages
    //  * 64px   ==  8 pages
    //  * 128px  ==  16 pages
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 800146a:	2300      	movs	r3, #0
 800146c:	71fb      	strb	r3, [r7, #7]
 800146e:	e016      	b.n	800149e <ssd1306_UpdateScreen+0x3a>
        ssd1306_WriteCommand(0xB0 + i); // Set the current RAM page address.
 8001470:	79fb      	ldrb	r3, [r7, #7]
 8001472:	3b50      	subs	r3, #80	; 0x50
 8001474:	b2db      	uxtb	r3, r3
 8001476:	4618      	mov	r0, r3
 8001478:	f7ff ff1c 	bl	80012b4 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x00);
 800147c:	2000      	movs	r0, #0
 800147e:	f7ff ff19 	bl	80012b4 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x10);
 8001482:	2010      	movs	r0, #16
 8001484:	f7ff ff16 	bl	80012b4 <ssd1306_WriteCommand>
        ssd1306_WriteData(&SSD1306_Buffer[SSD1306_WIDTH*i],SSD1306_WIDTH);
 8001488:	79fb      	ldrb	r3, [r7, #7]
 800148a:	01db      	lsls	r3, r3, #7
 800148c:	4a07      	ldr	r2, [pc, #28]	; (80014ac <ssd1306_UpdateScreen+0x48>)
 800148e:	4413      	add	r3, r2
 8001490:	2180      	movs	r1, #128	; 0x80
 8001492:	4618      	mov	r0, r3
 8001494:	f7ff ff34 	bl	8001300 <ssd1306_WriteData>
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 8001498:	79fb      	ldrb	r3, [r7, #7]
 800149a:	3301      	adds	r3, #1
 800149c:	71fb      	strb	r3, [r7, #7]
 800149e:	79fb      	ldrb	r3, [r7, #7]
 80014a0:	2b07      	cmp	r3, #7
 80014a2:	d9e5      	bls.n	8001470 <ssd1306_UpdateScreen+0xc>
    }
}
 80014a4:	bf00      	nop
 80014a6:	3708      	adds	r7, #8
 80014a8:	46bd      	mov	sp, r7
 80014aa:	bd80      	pop	{r7, pc}
 80014ac:	20000214 	.word	0x20000214

080014b0 <ssd1306_DrawPixel>:

//    Draw one pixel in the screenbuffer
//    X => X Coordinate
//    Y => Y Coordinate
//    color => Pixel color
void ssd1306_DrawPixel(uint8_t x, uint8_t y, SSD1306_COLOR color) {
 80014b0:	b480      	push	{r7}
 80014b2:	b083      	sub	sp, #12
 80014b4:	af00      	add	r7, sp, #0
 80014b6:	4603      	mov	r3, r0
 80014b8:	71fb      	strb	r3, [r7, #7]
 80014ba:	460b      	mov	r3, r1
 80014bc:	71bb      	strb	r3, [r7, #6]
 80014be:	4613      	mov	r3, r2
 80014c0:	717b      	strb	r3, [r7, #5]
    if(x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT) {
 80014c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014c6:	2b00      	cmp	r3, #0
 80014c8:	db48      	blt.n	800155c <ssd1306_DrawPixel+0xac>
 80014ca:	79bb      	ldrb	r3, [r7, #6]
 80014cc:	2b3f      	cmp	r3, #63	; 0x3f
 80014ce:	d845      	bhi.n	800155c <ssd1306_DrawPixel+0xac>
        // Don't write outside the buffer
        return;
    }
    
    // Check if pixel should be inverted
    if(SSD1306.Inverted) {
 80014d0:	4b25      	ldr	r3, [pc, #148]	; (8001568 <ssd1306_DrawPixel+0xb8>)
 80014d2:	791b      	ldrb	r3, [r3, #4]
 80014d4:	2b00      	cmp	r3, #0
 80014d6:	d006      	beq.n	80014e6 <ssd1306_DrawPixel+0x36>
        color = (SSD1306_COLOR)!color;
 80014d8:	797b      	ldrb	r3, [r7, #5]
 80014da:	2b00      	cmp	r3, #0
 80014dc:	bf0c      	ite	eq
 80014de:	2301      	moveq	r3, #1
 80014e0:	2300      	movne	r3, #0
 80014e2:	b2db      	uxtb	r3, r3
 80014e4:	717b      	strb	r3, [r7, #5]
    }
    
    // Draw in the right color
    if(color == White) {
 80014e6:	797b      	ldrb	r3, [r7, #5]
 80014e8:	2b01      	cmp	r3, #1
 80014ea:	d11a      	bne.n	8001522 <ssd1306_DrawPixel+0x72>
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 80014ec:	79fa      	ldrb	r2, [r7, #7]
 80014ee:	79bb      	ldrb	r3, [r7, #6]
 80014f0:	08db      	lsrs	r3, r3, #3
 80014f2:	b2d8      	uxtb	r0, r3
 80014f4:	4603      	mov	r3, r0
 80014f6:	01db      	lsls	r3, r3, #7
 80014f8:	4413      	add	r3, r2
 80014fa:	4a1c      	ldr	r2, [pc, #112]	; (800156c <ssd1306_DrawPixel+0xbc>)
 80014fc:	5cd3      	ldrb	r3, [r2, r3]
 80014fe:	b25a      	sxtb	r2, r3
 8001500:	79bb      	ldrb	r3, [r7, #6]
 8001502:	f003 0307 	and.w	r3, r3, #7
 8001506:	2101      	movs	r1, #1
 8001508:	fa01 f303 	lsl.w	r3, r1, r3
 800150c:	b25b      	sxtb	r3, r3
 800150e:	4313      	orrs	r3, r2
 8001510:	b259      	sxtb	r1, r3
 8001512:	79fa      	ldrb	r2, [r7, #7]
 8001514:	4603      	mov	r3, r0
 8001516:	01db      	lsls	r3, r3, #7
 8001518:	4413      	add	r3, r2
 800151a:	b2c9      	uxtb	r1, r1
 800151c:	4a13      	ldr	r2, [pc, #76]	; (800156c <ssd1306_DrawPixel+0xbc>)
 800151e:	54d1      	strb	r1, [r2, r3]
 8001520:	e01d      	b.n	800155e <ssd1306_DrawPixel+0xae>
    } else { 
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 8001522:	79fa      	ldrb	r2, [r7, #7]
 8001524:	79bb      	ldrb	r3, [r7, #6]
 8001526:	08db      	lsrs	r3, r3, #3
 8001528:	b2d8      	uxtb	r0, r3
 800152a:	4603      	mov	r3, r0
 800152c:	01db      	lsls	r3, r3, #7
 800152e:	4413      	add	r3, r2
 8001530:	4a0e      	ldr	r2, [pc, #56]	; (800156c <ssd1306_DrawPixel+0xbc>)
 8001532:	5cd3      	ldrb	r3, [r2, r3]
 8001534:	b25a      	sxtb	r2, r3
 8001536:	79bb      	ldrb	r3, [r7, #6]
 8001538:	f003 0307 	and.w	r3, r3, #7
 800153c:	2101      	movs	r1, #1
 800153e:	fa01 f303 	lsl.w	r3, r1, r3
 8001542:	b25b      	sxtb	r3, r3
 8001544:	43db      	mvns	r3, r3
 8001546:	b25b      	sxtb	r3, r3
 8001548:	4013      	ands	r3, r2
 800154a:	b259      	sxtb	r1, r3
 800154c:	79fa      	ldrb	r2, [r7, #7]
 800154e:	4603      	mov	r3, r0
 8001550:	01db      	lsls	r3, r3, #7
 8001552:	4413      	add	r3, r2
 8001554:	b2c9      	uxtb	r1, r1
 8001556:	4a05      	ldr	r2, [pc, #20]	; (800156c <ssd1306_DrawPixel+0xbc>)
 8001558:	54d1      	strb	r1, [r2, r3]
 800155a:	e000      	b.n	800155e <ssd1306_DrawPixel+0xae>
        return;
 800155c:	bf00      	nop
    }
}
 800155e:	370c      	adds	r7, #12
 8001560:	46bd      	mov	sp, r7
 8001562:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001566:	4770      	bx	lr
 8001568:	200000b0 	.word	0x200000b0
 800156c:	20000214 	.word	0x20000214

08001570 <ssd1306_DrawCircle>:
    }
    
    return;
}
//Draw circle by Bresenhem's algorithm
void ssd1306_DrawCircle(uint8_t par_x,uint8_t par_y,uint8_t par_r,SSD1306_COLOR par_color) {
 8001570:	b590      	push	{r4, r7, lr}
 8001572:	b087      	sub	sp, #28
 8001574:	af00      	add	r7, sp, #0
 8001576:	4604      	mov	r4, r0
 8001578:	4608      	mov	r0, r1
 800157a:	4611      	mov	r1, r2
 800157c:	461a      	mov	r2, r3
 800157e:	4623      	mov	r3, r4
 8001580:	71fb      	strb	r3, [r7, #7]
 8001582:	4603      	mov	r3, r0
 8001584:	71bb      	strb	r3, [r7, #6]
 8001586:	460b      	mov	r3, r1
 8001588:	717b      	strb	r3, [r7, #5]
 800158a:	4613      	mov	r3, r2
 800158c:	713b      	strb	r3, [r7, #4]
  int32_t x = -par_r;
 800158e:	797b      	ldrb	r3, [r7, #5]
 8001590:	425b      	negs	r3, r3
 8001592:	617b      	str	r3, [r7, #20]
  int32_t y = 0;
 8001594:	2300      	movs	r3, #0
 8001596:	613b      	str	r3, [r7, #16]
  int32_t err = 2 - 2 * par_r;
 8001598:	797b      	ldrb	r3, [r7, #5]
 800159a:	f1c3 0301 	rsb	r3, r3, #1
 800159e:	005b      	lsls	r3, r3, #1
 80015a0:	60fb      	str	r3, [r7, #12]
  int32_t e2;

  if (par_x >= SSD1306_WIDTH || par_y >= SSD1306_HEIGHT) {
 80015a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015a6:	2b00      	cmp	r3, #0
 80015a8:	db66      	blt.n	8001678 <ssd1306_DrawCircle+0x108>
 80015aa:	79bb      	ldrb	r3, [r7, #6]
 80015ac:	2b3f      	cmp	r3, #63	; 0x3f
 80015ae:	d863      	bhi.n	8001678 <ssd1306_DrawCircle+0x108>
    return;
  }

    do {
      ssd1306_DrawPixel(par_x - x, par_y + y, par_color);
 80015b0:	697b      	ldr	r3, [r7, #20]
 80015b2:	b2db      	uxtb	r3, r3
 80015b4:	79fa      	ldrb	r2, [r7, #7]
 80015b6:	1ad3      	subs	r3, r2, r3
 80015b8:	b2d8      	uxtb	r0, r3
 80015ba:	693b      	ldr	r3, [r7, #16]
 80015bc:	b2da      	uxtb	r2, r3
 80015be:	79bb      	ldrb	r3, [r7, #6]
 80015c0:	4413      	add	r3, r2
 80015c2:	b2db      	uxtb	r3, r3
 80015c4:	793a      	ldrb	r2, [r7, #4]
 80015c6:	4619      	mov	r1, r3
 80015c8:	f7ff ff72 	bl	80014b0 <ssd1306_DrawPixel>
      ssd1306_DrawPixel(par_x + x, par_y + y, par_color);
 80015cc:	697b      	ldr	r3, [r7, #20]
 80015ce:	b2da      	uxtb	r2, r3
 80015d0:	79fb      	ldrb	r3, [r7, #7]
 80015d2:	4413      	add	r3, r2
 80015d4:	b2d8      	uxtb	r0, r3
 80015d6:	693b      	ldr	r3, [r7, #16]
 80015d8:	b2da      	uxtb	r2, r3
 80015da:	79bb      	ldrb	r3, [r7, #6]
 80015dc:	4413      	add	r3, r2
 80015de:	b2db      	uxtb	r3, r3
 80015e0:	793a      	ldrb	r2, [r7, #4]
 80015e2:	4619      	mov	r1, r3
 80015e4:	f7ff ff64 	bl	80014b0 <ssd1306_DrawPixel>
      ssd1306_DrawPixel(par_x + x, par_y - y, par_color);
 80015e8:	697b      	ldr	r3, [r7, #20]
 80015ea:	b2da      	uxtb	r2, r3
 80015ec:	79fb      	ldrb	r3, [r7, #7]
 80015ee:	4413      	add	r3, r2
 80015f0:	b2d8      	uxtb	r0, r3
 80015f2:	693b      	ldr	r3, [r7, #16]
 80015f4:	b2db      	uxtb	r3, r3
 80015f6:	79ba      	ldrb	r2, [r7, #6]
 80015f8:	1ad3      	subs	r3, r2, r3
 80015fa:	b2db      	uxtb	r3, r3
 80015fc:	793a      	ldrb	r2, [r7, #4]
 80015fe:	4619      	mov	r1, r3
 8001600:	f7ff ff56 	bl	80014b0 <ssd1306_DrawPixel>
      ssd1306_DrawPixel(par_x - x, par_y - y, par_color);
 8001604:	697b      	ldr	r3, [r7, #20]
 8001606:	b2db      	uxtb	r3, r3
 8001608:	79fa      	ldrb	r2, [r7, #7]
 800160a:	1ad3      	subs	r3, r2, r3
 800160c:	b2d8      	uxtb	r0, r3
 800160e:	693b      	ldr	r3, [r7, #16]
 8001610:	b2db      	uxtb	r3, r3
 8001612:	79ba      	ldrb	r2, [r7, #6]
 8001614:	1ad3      	subs	r3, r2, r3
 8001616:	b2db      	uxtb	r3, r3
 8001618:	793a      	ldrb	r2, [r7, #4]
 800161a:	4619      	mov	r1, r3
 800161c:	f7ff ff48 	bl	80014b0 <ssd1306_DrawPixel>
        e2 = err;
 8001620:	68fb      	ldr	r3, [r7, #12]
 8001622:	60bb      	str	r3, [r7, #8]
        if (e2 <= y) {
 8001624:	68ba      	ldr	r2, [r7, #8]
 8001626:	693b      	ldr	r3, [r7, #16]
 8001628:	429a      	cmp	r2, r3
 800162a:	dc13      	bgt.n	8001654 <ssd1306_DrawCircle+0xe4>
            y++;
 800162c:	693b      	ldr	r3, [r7, #16]
 800162e:	3301      	adds	r3, #1
 8001630:	613b      	str	r3, [r7, #16]
            err = err + (y * 2 + 1);
 8001632:	693b      	ldr	r3, [r7, #16]
 8001634:	005b      	lsls	r3, r3, #1
 8001636:	3301      	adds	r3, #1
 8001638:	68fa      	ldr	r2, [r7, #12]
 800163a:	4413      	add	r3, r2
 800163c:	60fb      	str	r3, [r7, #12]
            if(-x == y && e2 <= x) {
 800163e:	697b      	ldr	r3, [r7, #20]
 8001640:	425b      	negs	r3, r3
 8001642:	693a      	ldr	r2, [r7, #16]
 8001644:	429a      	cmp	r2, r3
 8001646:	d105      	bne.n	8001654 <ssd1306_DrawCircle+0xe4>
 8001648:	68ba      	ldr	r2, [r7, #8]
 800164a:	697b      	ldr	r3, [r7, #20]
 800164c:	429a      	cmp	r2, r3
 800164e:	dc01      	bgt.n	8001654 <ssd1306_DrawCircle+0xe4>
              e2 = 0;
 8001650:	2300      	movs	r3, #0
 8001652:	60bb      	str	r3, [r7, #8]
        }
        else
        {
          /*nothing to do*/
        }
        if(e2 > x) {
 8001654:	68ba      	ldr	r2, [r7, #8]
 8001656:	697b      	ldr	r3, [r7, #20]
 8001658:	429a      	cmp	r2, r3
 800165a:	dd08      	ble.n	800166e <ssd1306_DrawCircle+0xfe>
          x++;
 800165c:	697b      	ldr	r3, [r7, #20]
 800165e:	3301      	adds	r3, #1
 8001660:	617b      	str	r3, [r7, #20]
          err = err + (x * 2 + 1);
 8001662:	697b      	ldr	r3, [r7, #20]
 8001664:	005b      	lsls	r3, r3, #1
 8001666:	3301      	adds	r3, #1
 8001668:	68fa      	ldr	r2, [r7, #12]
 800166a:	4413      	add	r3, r2
 800166c:	60fb      	str	r3, [r7, #12]
        }
        else
        {
          /*nothing to do*/
        }
    } while(x <= 0);
 800166e:	697b      	ldr	r3, [r7, #20]
 8001670:	2b00      	cmp	r3, #0
 8001672:	dd9d      	ble.n	80015b0 <ssd1306_DrawCircle+0x40>

    return;
 8001674:	bf00      	nop
 8001676:	e000      	b.n	800167a <ssd1306_DrawCircle+0x10a>
    return;
 8001678:	bf00      	nop
}
 800167a:	371c      	adds	r7, #28
 800167c:	46bd      	mov	sp, r7
 800167e:	bd90      	pop	{r4, r7, pc}

08001680 <ssd1306_SetContrast>:
  ssd1306_Line(x1,y2,x1,y1,color);

  return;
}

void ssd1306_SetContrast(const uint8_t value) {
 8001680:	b580      	push	{r7, lr}
 8001682:	b084      	sub	sp, #16
 8001684:	af00      	add	r7, sp, #0
 8001686:	4603      	mov	r3, r0
 8001688:	71fb      	strb	r3, [r7, #7]
    const uint8_t kSetContrastControlRegister = 0x81;
 800168a:	2381      	movs	r3, #129	; 0x81
 800168c:	73fb      	strb	r3, [r7, #15]
    ssd1306_WriteCommand(kSetContrastControlRegister);
 800168e:	7bfb      	ldrb	r3, [r7, #15]
 8001690:	4618      	mov	r0, r3
 8001692:	f7ff fe0f 	bl	80012b4 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(value);
 8001696:	79fb      	ldrb	r3, [r7, #7]
 8001698:	4618      	mov	r0, r3
 800169a:	f7ff fe0b 	bl	80012b4 <ssd1306_WriteCommand>
}
 800169e:	bf00      	nop
 80016a0:	3710      	adds	r7, #16
 80016a2:	46bd      	mov	sp, r7
 80016a4:	bd80      	pop	{r7, pc}
	...

080016a8 <ssd1306_SetDisplayOn>:

void ssd1306_SetDisplayOn(const uint8_t on) {
 80016a8:	b580      	push	{r7, lr}
 80016aa:	b084      	sub	sp, #16
 80016ac:	af00      	add	r7, sp, #0
 80016ae:	4603      	mov	r3, r0
 80016b0:	71fb      	strb	r3, [r7, #7]
    uint8_t value;
    if (on) {
 80016b2:	79fb      	ldrb	r3, [r7, #7]
 80016b4:	2b00      	cmp	r3, #0
 80016b6:	d005      	beq.n	80016c4 <ssd1306_SetDisplayOn+0x1c>
        value = 0xAF;   // Display on
 80016b8:	23af      	movs	r3, #175	; 0xaf
 80016ba:	73fb      	strb	r3, [r7, #15]
        SSD1306.DisplayOn = 1;
 80016bc:	4b08      	ldr	r3, [pc, #32]	; (80016e0 <ssd1306_SetDisplayOn+0x38>)
 80016be:	2201      	movs	r2, #1
 80016c0:	719a      	strb	r2, [r3, #6]
 80016c2:	e004      	b.n	80016ce <ssd1306_SetDisplayOn+0x26>
    } else {
        value = 0xAE;   // Display off
 80016c4:	23ae      	movs	r3, #174	; 0xae
 80016c6:	73fb      	strb	r3, [r7, #15]
        SSD1306.DisplayOn = 0;
 80016c8:	4b05      	ldr	r3, [pc, #20]	; (80016e0 <ssd1306_SetDisplayOn+0x38>)
 80016ca:	2200      	movs	r2, #0
 80016cc:	719a      	strb	r2, [r3, #6]
    }
    ssd1306_WriteCommand(value);
 80016ce:	7bfb      	ldrb	r3, [r7, #15]
 80016d0:	4618      	mov	r0, r3
 80016d2:	f7ff fdef 	bl	80012b4 <ssd1306_WriteCommand>
}
 80016d6:	bf00      	nop
 80016d8:	3710      	adds	r7, #16
 80016da:	46bd      	mov	sp, r7
 80016dc:	bd80      	pop	{r7, pc}
 80016de:	bf00      	nop
 80016e0:	200000b0 	.word	0x200000b0

080016e4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80016e4:	b580      	push	{r7, lr}
 80016e6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80016e8:	4b0e      	ldr	r3, [pc, #56]	; (8001724 <HAL_Init+0x40>)
 80016ea:	681b      	ldr	r3, [r3, #0]
 80016ec:	4a0d      	ldr	r2, [pc, #52]	; (8001724 <HAL_Init+0x40>)
 80016ee:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80016f2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80016f4:	4b0b      	ldr	r3, [pc, #44]	; (8001724 <HAL_Init+0x40>)
 80016f6:	681b      	ldr	r3, [r3, #0]
 80016f8:	4a0a      	ldr	r2, [pc, #40]	; (8001724 <HAL_Init+0x40>)
 80016fa:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80016fe:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001700:	4b08      	ldr	r3, [pc, #32]	; (8001724 <HAL_Init+0x40>)
 8001702:	681b      	ldr	r3, [r3, #0]
 8001704:	4a07      	ldr	r2, [pc, #28]	; (8001724 <HAL_Init+0x40>)
 8001706:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800170a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800170c:	2003      	movs	r0, #3
 800170e:	f000 f94d 	bl	80019ac <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001712:	2000      	movs	r0, #0
 8001714:	f000 f808 	bl	8001728 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001718:	f7ff fce4 	bl	80010e4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800171c:	2300      	movs	r3, #0
}
 800171e:	4618      	mov	r0, r3
 8001720:	bd80      	pop	{r7, pc}
 8001722:	bf00      	nop
 8001724:	40023c00 	.word	0x40023c00

08001728 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001728:	b580      	push	{r7, lr}
 800172a:	b082      	sub	sp, #8
 800172c:	af00      	add	r7, sp, #0
 800172e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001730:	4b12      	ldr	r3, [pc, #72]	; (800177c <HAL_InitTick+0x54>)
 8001732:	681a      	ldr	r2, [r3, #0]
 8001734:	4b12      	ldr	r3, [pc, #72]	; (8001780 <HAL_InitTick+0x58>)
 8001736:	781b      	ldrb	r3, [r3, #0]
 8001738:	4619      	mov	r1, r3
 800173a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800173e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001742:	fbb2 f3f3 	udiv	r3, r2, r3
 8001746:	4618      	mov	r0, r3
 8001748:	f000 f965 	bl	8001a16 <HAL_SYSTICK_Config>
 800174c:	4603      	mov	r3, r0
 800174e:	2b00      	cmp	r3, #0
 8001750:	d001      	beq.n	8001756 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001752:	2301      	movs	r3, #1
 8001754:	e00e      	b.n	8001774 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	2b0f      	cmp	r3, #15
 800175a:	d80a      	bhi.n	8001772 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800175c:	2200      	movs	r2, #0
 800175e:	6879      	ldr	r1, [r7, #4]
 8001760:	f04f 30ff 	mov.w	r0, #4294967295
 8001764:	f000 f92d 	bl	80019c2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001768:	4a06      	ldr	r2, [pc, #24]	; (8001784 <HAL_InitTick+0x5c>)
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800176e:	2300      	movs	r3, #0
 8001770:	e000      	b.n	8001774 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001772:	2301      	movs	r3, #1
}
 8001774:	4618      	mov	r0, r3
 8001776:	3708      	adds	r7, #8
 8001778:	46bd      	mov	sp, r7
 800177a:	bd80      	pop	{r7, pc}
 800177c:	20000000 	.word	0x20000000
 8001780:	20000008 	.word	0x20000008
 8001784:	20000004 	.word	0x20000004

08001788 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001788:	b480      	push	{r7}
 800178a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800178c:	4b06      	ldr	r3, [pc, #24]	; (80017a8 <HAL_IncTick+0x20>)
 800178e:	781b      	ldrb	r3, [r3, #0]
 8001790:	461a      	mov	r2, r3
 8001792:	4b06      	ldr	r3, [pc, #24]	; (80017ac <HAL_IncTick+0x24>)
 8001794:	681b      	ldr	r3, [r3, #0]
 8001796:	4413      	add	r3, r2
 8001798:	4a04      	ldr	r2, [pc, #16]	; (80017ac <HAL_IncTick+0x24>)
 800179a:	6013      	str	r3, [r2, #0]
}
 800179c:	bf00      	nop
 800179e:	46bd      	mov	sp, r7
 80017a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017a4:	4770      	bx	lr
 80017a6:	bf00      	nop
 80017a8:	20000008 	.word	0x20000008
 80017ac:	20000614 	.word	0x20000614

080017b0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80017b0:	b480      	push	{r7}
 80017b2:	af00      	add	r7, sp, #0
  return uwTick;
 80017b4:	4b03      	ldr	r3, [pc, #12]	; (80017c4 <HAL_GetTick+0x14>)
 80017b6:	681b      	ldr	r3, [r3, #0]
}
 80017b8:	4618      	mov	r0, r3
 80017ba:	46bd      	mov	sp, r7
 80017bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017c0:	4770      	bx	lr
 80017c2:	bf00      	nop
 80017c4:	20000614 	.word	0x20000614

080017c8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80017c8:	b580      	push	{r7, lr}
 80017ca:	b084      	sub	sp, #16
 80017cc:	af00      	add	r7, sp, #0
 80017ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80017d0:	f7ff ffee 	bl	80017b0 <HAL_GetTick>
 80017d4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80017da:	68fb      	ldr	r3, [r7, #12]
 80017dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80017e0:	d005      	beq.n	80017ee <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80017e2:	4b09      	ldr	r3, [pc, #36]	; (8001808 <HAL_Delay+0x40>)
 80017e4:	781b      	ldrb	r3, [r3, #0]
 80017e6:	461a      	mov	r2, r3
 80017e8:	68fb      	ldr	r3, [r7, #12]
 80017ea:	4413      	add	r3, r2
 80017ec:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80017ee:	bf00      	nop
 80017f0:	f7ff ffde 	bl	80017b0 <HAL_GetTick>
 80017f4:	4602      	mov	r2, r0
 80017f6:	68bb      	ldr	r3, [r7, #8]
 80017f8:	1ad3      	subs	r3, r2, r3
 80017fa:	68fa      	ldr	r2, [r7, #12]
 80017fc:	429a      	cmp	r2, r3
 80017fe:	d8f7      	bhi.n	80017f0 <HAL_Delay+0x28>
  {
  }
}
 8001800:	bf00      	nop
 8001802:	3710      	adds	r7, #16
 8001804:	46bd      	mov	sp, r7
 8001806:	bd80      	pop	{r7, pc}
 8001808:	20000008 	.word	0x20000008

0800180c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800180c:	b480      	push	{r7}
 800180e:	b085      	sub	sp, #20
 8001810:	af00      	add	r7, sp, #0
 8001812:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	f003 0307 	and.w	r3, r3, #7
 800181a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800181c:	4b0c      	ldr	r3, [pc, #48]	; (8001850 <__NVIC_SetPriorityGrouping+0x44>)
 800181e:	68db      	ldr	r3, [r3, #12]
 8001820:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001822:	68ba      	ldr	r2, [r7, #8]
 8001824:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001828:	4013      	ands	r3, r2
 800182a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800182c:	68fb      	ldr	r3, [r7, #12]
 800182e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001830:	68bb      	ldr	r3, [r7, #8]
 8001832:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001834:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001838:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800183c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800183e:	4a04      	ldr	r2, [pc, #16]	; (8001850 <__NVIC_SetPriorityGrouping+0x44>)
 8001840:	68bb      	ldr	r3, [r7, #8]
 8001842:	60d3      	str	r3, [r2, #12]
}
 8001844:	bf00      	nop
 8001846:	3714      	adds	r7, #20
 8001848:	46bd      	mov	sp, r7
 800184a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800184e:	4770      	bx	lr
 8001850:	e000ed00 	.word	0xe000ed00

08001854 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001854:	b480      	push	{r7}
 8001856:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001858:	4b04      	ldr	r3, [pc, #16]	; (800186c <__NVIC_GetPriorityGrouping+0x18>)
 800185a:	68db      	ldr	r3, [r3, #12]
 800185c:	0a1b      	lsrs	r3, r3, #8
 800185e:	f003 0307 	and.w	r3, r3, #7
}
 8001862:	4618      	mov	r0, r3
 8001864:	46bd      	mov	sp, r7
 8001866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800186a:	4770      	bx	lr
 800186c:	e000ed00 	.word	0xe000ed00

08001870 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001870:	b480      	push	{r7}
 8001872:	b083      	sub	sp, #12
 8001874:	af00      	add	r7, sp, #0
 8001876:	4603      	mov	r3, r0
 8001878:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800187a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800187e:	2b00      	cmp	r3, #0
 8001880:	db0b      	blt.n	800189a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001882:	79fb      	ldrb	r3, [r7, #7]
 8001884:	f003 021f 	and.w	r2, r3, #31
 8001888:	4907      	ldr	r1, [pc, #28]	; (80018a8 <__NVIC_EnableIRQ+0x38>)
 800188a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800188e:	095b      	lsrs	r3, r3, #5
 8001890:	2001      	movs	r0, #1
 8001892:	fa00 f202 	lsl.w	r2, r0, r2
 8001896:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800189a:	bf00      	nop
 800189c:	370c      	adds	r7, #12
 800189e:	46bd      	mov	sp, r7
 80018a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018a4:	4770      	bx	lr
 80018a6:	bf00      	nop
 80018a8:	e000e100 	.word	0xe000e100

080018ac <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80018ac:	b480      	push	{r7}
 80018ae:	b083      	sub	sp, #12
 80018b0:	af00      	add	r7, sp, #0
 80018b2:	4603      	mov	r3, r0
 80018b4:	6039      	str	r1, [r7, #0]
 80018b6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80018b8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018bc:	2b00      	cmp	r3, #0
 80018be:	db0a      	blt.n	80018d6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80018c0:	683b      	ldr	r3, [r7, #0]
 80018c2:	b2da      	uxtb	r2, r3
 80018c4:	490c      	ldr	r1, [pc, #48]	; (80018f8 <__NVIC_SetPriority+0x4c>)
 80018c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018ca:	0112      	lsls	r2, r2, #4
 80018cc:	b2d2      	uxtb	r2, r2
 80018ce:	440b      	add	r3, r1
 80018d0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80018d4:	e00a      	b.n	80018ec <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80018d6:	683b      	ldr	r3, [r7, #0]
 80018d8:	b2da      	uxtb	r2, r3
 80018da:	4908      	ldr	r1, [pc, #32]	; (80018fc <__NVIC_SetPriority+0x50>)
 80018dc:	79fb      	ldrb	r3, [r7, #7]
 80018de:	f003 030f 	and.w	r3, r3, #15
 80018e2:	3b04      	subs	r3, #4
 80018e4:	0112      	lsls	r2, r2, #4
 80018e6:	b2d2      	uxtb	r2, r2
 80018e8:	440b      	add	r3, r1
 80018ea:	761a      	strb	r2, [r3, #24]
}
 80018ec:	bf00      	nop
 80018ee:	370c      	adds	r7, #12
 80018f0:	46bd      	mov	sp, r7
 80018f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018f6:	4770      	bx	lr
 80018f8:	e000e100 	.word	0xe000e100
 80018fc:	e000ed00 	.word	0xe000ed00

08001900 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001900:	b480      	push	{r7}
 8001902:	b089      	sub	sp, #36	; 0x24
 8001904:	af00      	add	r7, sp, #0
 8001906:	60f8      	str	r0, [r7, #12]
 8001908:	60b9      	str	r1, [r7, #8]
 800190a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800190c:	68fb      	ldr	r3, [r7, #12]
 800190e:	f003 0307 	and.w	r3, r3, #7
 8001912:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001914:	69fb      	ldr	r3, [r7, #28]
 8001916:	f1c3 0307 	rsb	r3, r3, #7
 800191a:	2b04      	cmp	r3, #4
 800191c:	bf28      	it	cs
 800191e:	2304      	movcs	r3, #4
 8001920:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001922:	69fb      	ldr	r3, [r7, #28]
 8001924:	3304      	adds	r3, #4
 8001926:	2b06      	cmp	r3, #6
 8001928:	d902      	bls.n	8001930 <NVIC_EncodePriority+0x30>
 800192a:	69fb      	ldr	r3, [r7, #28]
 800192c:	3b03      	subs	r3, #3
 800192e:	e000      	b.n	8001932 <NVIC_EncodePriority+0x32>
 8001930:	2300      	movs	r3, #0
 8001932:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001934:	f04f 32ff 	mov.w	r2, #4294967295
 8001938:	69bb      	ldr	r3, [r7, #24]
 800193a:	fa02 f303 	lsl.w	r3, r2, r3
 800193e:	43da      	mvns	r2, r3
 8001940:	68bb      	ldr	r3, [r7, #8]
 8001942:	401a      	ands	r2, r3
 8001944:	697b      	ldr	r3, [r7, #20]
 8001946:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001948:	f04f 31ff 	mov.w	r1, #4294967295
 800194c:	697b      	ldr	r3, [r7, #20]
 800194e:	fa01 f303 	lsl.w	r3, r1, r3
 8001952:	43d9      	mvns	r1, r3
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001958:	4313      	orrs	r3, r2
         );
}
 800195a:	4618      	mov	r0, r3
 800195c:	3724      	adds	r7, #36	; 0x24
 800195e:	46bd      	mov	sp, r7
 8001960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001964:	4770      	bx	lr
	...

08001968 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001968:	b580      	push	{r7, lr}
 800196a:	b082      	sub	sp, #8
 800196c:	af00      	add	r7, sp, #0
 800196e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	3b01      	subs	r3, #1
 8001974:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001978:	d301      	bcc.n	800197e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800197a:	2301      	movs	r3, #1
 800197c:	e00f      	b.n	800199e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800197e:	4a0a      	ldr	r2, [pc, #40]	; (80019a8 <SysTick_Config+0x40>)
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	3b01      	subs	r3, #1
 8001984:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001986:	210f      	movs	r1, #15
 8001988:	f04f 30ff 	mov.w	r0, #4294967295
 800198c:	f7ff ff8e 	bl	80018ac <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001990:	4b05      	ldr	r3, [pc, #20]	; (80019a8 <SysTick_Config+0x40>)
 8001992:	2200      	movs	r2, #0
 8001994:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001996:	4b04      	ldr	r3, [pc, #16]	; (80019a8 <SysTick_Config+0x40>)
 8001998:	2207      	movs	r2, #7
 800199a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800199c:	2300      	movs	r3, #0
}
 800199e:	4618      	mov	r0, r3
 80019a0:	3708      	adds	r7, #8
 80019a2:	46bd      	mov	sp, r7
 80019a4:	bd80      	pop	{r7, pc}
 80019a6:	bf00      	nop
 80019a8:	e000e010 	.word	0xe000e010

080019ac <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80019ac:	b580      	push	{r7, lr}
 80019ae:	b082      	sub	sp, #8
 80019b0:	af00      	add	r7, sp, #0
 80019b2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80019b4:	6878      	ldr	r0, [r7, #4]
 80019b6:	f7ff ff29 	bl	800180c <__NVIC_SetPriorityGrouping>
}
 80019ba:	bf00      	nop
 80019bc:	3708      	adds	r7, #8
 80019be:	46bd      	mov	sp, r7
 80019c0:	bd80      	pop	{r7, pc}

080019c2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80019c2:	b580      	push	{r7, lr}
 80019c4:	b086      	sub	sp, #24
 80019c6:	af00      	add	r7, sp, #0
 80019c8:	4603      	mov	r3, r0
 80019ca:	60b9      	str	r1, [r7, #8]
 80019cc:	607a      	str	r2, [r7, #4]
 80019ce:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80019d0:	2300      	movs	r3, #0
 80019d2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80019d4:	f7ff ff3e 	bl	8001854 <__NVIC_GetPriorityGrouping>
 80019d8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80019da:	687a      	ldr	r2, [r7, #4]
 80019dc:	68b9      	ldr	r1, [r7, #8]
 80019de:	6978      	ldr	r0, [r7, #20]
 80019e0:	f7ff ff8e 	bl	8001900 <NVIC_EncodePriority>
 80019e4:	4602      	mov	r2, r0
 80019e6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80019ea:	4611      	mov	r1, r2
 80019ec:	4618      	mov	r0, r3
 80019ee:	f7ff ff5d 	bl	80018ac <__NVIC_SetPriority>
}
 80019f2:	bf00      	nop
 80019f4:	3718      	adds	r7, #24
 80019f6:	46bd      	mov	sp, r7
 80019f8:	bd80      	pop	{r7, pc}

080019fa <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80019fa:	b580      	push	{r7, lr}
 80019fc:	b082      	sub	sp, #8
 80019fe:	af00      	add	r7, sp, #0
 8001a00:	4603      	mov	r3, r0
 8001a02:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001a04:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a08:	4618      	mov	r0, r3
 8001a0a:	f7ff ff31 	bl	8001870 <__NVIC_EnableIRQ>
}
 8001a0e:	bf00      	nop
 8001a10:	3708      	adds	r7, #8
 8001a12:	46bd      	mov	sp, r7
 8001a14:	bd80      	pop	{r7, pc}

08001a16 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001a16:	b580      	push	{r7, lr}
 8001a18:	b082      	sub	sp, #8
 8001a1a:	af00      	add	r7, sp, #0
 8001a1c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001a1e:	6878      	ldr	r0, [r7, #4]
 8001a20:	f7ff ffa2 	bl	8001968 <SysTick_Config>
 8001a24:	4603      	mov	r3, r0
}
 8001a26:	4618      	mov	r0, r3
 8001a28:	3708      	adds	r7, #8
 8001a2a:	46bd      	mov	sp, r7
 8001a2c:	bd80      	pop	{r7, pc}
	...

08001a30 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001a30:	b480      	push	{r7}
 8001a32:	b089      	sub	sp, #36	; 0x24
 8001a34:	af00      	add	r7, sp, #0
 8001a36:	6078      	str	r0, [r7, #4]
 8001a38:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001a3a:	2300      	movs	r3, #0
 8001a3c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001a3e:	2300      	movs	r3, #0
 8001a40:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001a42:	2300      	movs	r3, #0
 8001a44:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001a46:	2300      	movs	r3, #0
 8001a48:	61fb      	str	r3, [r7, #28]
 8001a4a:	e16b      	b.n	8001d24 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001a4c:	2201      	movs	r2, #1
 8001a4e:	69fb      	ldr	r3, [r7, #28]
 8001a50:	fa02 f303 	lsl.w	r3, r2, r3
 8001a54:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001a56:	683b      	ldr	r3, [r7, #0]
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	697a      	ldr	r2, [r7, #20]
 8001a5c:	4013      	ands	r3, r2
 8001a5e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001a60:	693a      	ldr	r2, [r7, #16]
 8001a62:	697b      	ldr	r3, [r7, #20]
 8001a64:	429a      	cmp	r2, r3
 8001a66:	f040 815a 	bne.w	8001d1e <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001a6a:	683b      	ldr	r3, [r7, #0]
 8001a6c:	685b      	ldr	r3, [r3, #4]
 8001a6e:	2b01      	cmp	r3, #1
 8001a70:	d00b      	beq.n	8001a8a <HAL_GPIO_Init+0x5a>
 8001a72:	683b      	ldr	r3, [r7, #0]
 8001a74:	685b      	ldr	r3, [r3, #4]
 8001a76:	2b02      	cmp	r3, #2
 8001a78:	d007      	beq.n	8001a8a <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001a7a:	683b      	ldr	r3, [r7, #0]
 8001a7c:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001a7e:	2b11      	cmp	r3, #17
 8001a80:	d003      	beq.n	8001a8a <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001a82:	683b      	ldr	r3, [r7, #0]
 8001a84:	685b      	ldr	r3, [r3, #4]
 8001a86:	2b12      	cmp	r3, #18
 8001a88:	d130      	bne.n	8001aec <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	689b      	ldr	r3, [r3, #8]
 8001a8e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001a90:	69fb      	ldr	r3, [r7, #28]
 8001a92:	005b      	lsls	r3, r3, #1
 8001a94:	2203      	movs	r2, #3
 8001a96:	fa02 f303 	lsl.w	r3, r2, r3
 8001a9a:	43db      	mvns	r3, r3
 8001a9c:	69ba      	ldr	r2, [r7, #24]
 8001a9e:	4013      	ands	r3, r2
 8001aa0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001aa2:	683b      	ldr	r3, [r7, #0]
 8001aa4:	68da      	ldr	r2, [r3, #12]
 8001aa6:	69fb      	ldr	r3, [r7, #28]
 8001aa8:	005b      	lsls	r3, r3, #1
 8001aaa:	fa02 f303 	lsl.w	r3, r2, r3
 8001aae:	69ba      	ldr	r2, [r7, #24]
 8001ab0:	4313      	orrs	r3, r2
 8001ab2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	69ba      	ldr	r2, [r7, #24]
 8001ab8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	685b      	ldr	r3, [r3, #4]
 8001abe:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001ac0:	2201      	movs	r2, #1
 8001ac2:	69fb      	ldr	r3, [r7, #28]
 8001ac4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ac8:	43db      	mvns	r3, r3
 8001aca:	69ba      	ldr	r2, [r7, #24]
 8001acc:	4013      	ands	r3, r2
 8001ace:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8001ad0:	683b      	ldr	r3, [r7, #0]
 8001ad2:	685b      	ldr	r3, [r3, #4]
 8001ad4:	091b      	lsrs	r3, r3, #4
 8001ad6:	f003 0201 	and.w	r2, r3, #1
 8001ada:	69fb      	ldr	r3, [r7, #28]
 8001adc:	fa02 f303 	lsl.w	r3, r2, r3
 8001ae0:	69ba      	ldr	r2, [r7, #24]
 8001ae2:	4313      	orrs	r3, r2
 8001ae4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	69ba      	ldr	r2, [r7, #24]
 8001aea:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	68db      	ldr	r3, [r3, #12]
 8001af0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001af2:	69fb      	ldr	r3, [r7, #28]
 8001af4:	005b      	lsls	r3, r3, #1
 8001af6:	2203      	movs	r2, #3
 8001af8:	fa02 f303 	lsl.w	r3, r2, r3
 8001afc:	43db      	mvns	r3, r3
 8001afe:	69ba      	ldr	r2, [r7, #24]
 8001b00:	4013      	ands	r3, r2
 8001b02:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001b04:	683b      	ldr	r3, [r7, #0]
 8001b06:	689a      	ldr	r2, [r3, #8]
 8001b08:	69fb      	ldr	r3, [r7, #28]
 8001b0a:	005b      	lsls	r3, r3, #1
 8001b0c:	fa02 f303 	lsl.w	r3, r2, r3
 8001b10:	69ba      	ldr	r2, [r7, #24]
 8001b12:	4313      	orrs	r3, r2
 8001b14:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	69ba      	ldr	r2, [r7, #24]
 8001b1a:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001b1c:	683b      	ldr	r3, [r7, #0]
 8001b1e:	685b      	ldr	r3, [r3, #4]
 8001b20:	2b02      	cmp	r3, #2
 8001b22:	d003      	beq.n	8001b2c <HAL_GPIO_Init+0xfc>
 8001b24:	683b      	ldr	r3, [r7, #0]
 8001b26:	685b      	ldr	r3, [r3, #4]
 8001b28:	2b12      	cmp	r3, #18
 8001b2a:	d123      	bne.n	8001b74 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001b2c:	69fb      	ldr	r3, [r7, #28]
 8001b2e:	08da      	lsrs	r2, r3, #3
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	3208      	adds	r2, #8
 8001b34:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001b38:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001b3a:	69fb      	ldr	r3, [r7, #28]
 8001b3c:	f003 0307 	and.w	r3, r3, #7
 8001b40:	009b      	lsls	r3, r3, #2
 8001b42:	220f      	movs	r2, #15
 8001b44:	fa02 f303 	lsl.w	r3, r2, r3
 8001b48:	43db      	mvns	r3, r3
 8001b4a:	69ba      	ldr	r2, [r7, #24]
 8001b4c:	4013      	ands	r3, r2
 8001b4e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001b50:	683b      	ldr	r3, [r7, #0]
 8001b52:	691a      	ldr	r2, [r3, #16]
 8001b54:	69fb      	ldr	r3, [r7, #28]
 8001b56:	f003 0307 	and.w	r3, r3, #7
 8001b5a:	009b      	lsls	r3, r3, #2
 8001b5c:	fa02 f303 	lsl.w	r3, r2, r3
 8001b60:	69ba      	ldr	r2, [r7, #24]
 8001b62:	4313      	orrs	r3, r2
 8001b64:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001b66:	69fb      	ldr	r3, [r7, #28]
 8001b68:	08da      	lsrs	r2, r3, #3
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	3208      	adds	r2, #8
 8001b6e:	69b9      	ldr	r1, [r7, #24]
 8001b70:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001b7a:	69fb      	ldr	r3, [r7, #28]
 8001b7c:	005b      	lsls	r3, r3, #1
 8001b7e:	2203      	movs	r2, #3
 8001b80:	fa02 f303 	lsl.w	r3, r2, r3
 8001b84:	43db      	mvns	r3, r3
 8001b86:	69ba      	ldr	r2, [r7, #24]
 8001b88:	4013      	ands	r3, r2
 8001b8a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001b8c:	683b      	ldr	r3, [r7, #0]
 8001b8e:	685b      	ldr	r3, [r3, #4]
 8001b90:	f003 0203 	and.w	r2, r3, #3
 8001b94:	69fb      	ldr	r3, [r7, #28]
 8001b96:	005b      	lsls	r3, r3, #1
 8001b98:	fa02 f303 	lsl.w	r3, r2, r3
 8001b9c:	69ba      	ldr	r2, [r7, #24]
 8001b9e:	4313      	orrs	r3, r2
 8001ba0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	69ba      	ldr	r2, [r7, #24]
 8001ba6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001ba8:	683b      	ldr	r3, [r7, #0]
 8001baa:	685b      	ldr	r3, [r3, #4]
 8001bac:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001bb0:	2b00      	cmp	r3, #0
 8001bb2:	f000 80b4 	beq.w	8001d1e <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001bb6:	2300      	movs	r3, #0
 8001bb8:	60fb      	str	r3, [r7, #12]
 8001bba:	4b5f      	ldr	r3, [pc, #380]	; (8001d38 <HAL_GPIO_Init+0x308>)
 8001bbc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001bbe:	4a5e      	ldr	r2, [pc, #376]	; (8001d38 <HAL_GPIO_Init+0x308>)
 8001bc0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001bc4:	6453      	str	r3, [r2, #68]	; 0x44
 8001bc6:	4b5c      	ldr	r3, [pc, #368]	; (8001d38 <HAL_GPIO_Init+0x308>)
 8001bc8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001bca:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001bce:	60fb      	str	r3, [r7, #12]
 8001bd0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001bd2:	4a5a      	ldr	r2, [pc, #360]	; (8001d3c <HAL_GPIO_Init+0x30c>)
 8001bd4:	69fb      	ldr	r3, [r7, #28]
 8001bd6:	089b      	lsrs	r3, r3, #2
 8001bd8:	3302      	adds	r3, #2
 8001bda:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001bde:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001be0:	69fb      	ldr	r3, [r7, #28]
 8001be2:	f003 0303 	and.w	r3, r3, #3
 8001be6:	009b      	lsls	r3, r3, #2
 8001be8:	220f      	movs	r2, #15
 8001bea:	fa02 f303 	lsl.w	r3, r2, r3
 8001bee:	43db      	mvns	r3, r3
 8001bf0:	69ba      	ldr	r2, [r7, #24]
 8001bf2:	4013      	ands	r3, r2
 8001bf4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	4a51      	ldr	r2, [pc, #324]	; (8001d40 <HAL_GPIO_Init+0x310>)
 8001bfa:	4293      	cmp	r3, r2
 8001bfc:	d02b      	beq.n	8001c56 <HAL_GPIO_Init+0x226>
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	4a50      	ldr	r2, [pc, #320]	; (8001d44 <HAL_GPIO_Init+0x314>)
 8001c02:	4293      	cmp	r3, r2
 8001c04:	d025      	beq.n	8001c52 <HAL_GPIO_Init+0x222>
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	4a4f      	ldr	r2, [pc, #316]	; (8001d48 <HAL_GPIO_Init+0x318>)
 8001c0a:	4293      	cmp	r3, r2
 8001c0c:	d01f      	beq.n	8001c4e <HAL_GPIO_Init+0x21e>
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	4a4e      	ldr	r2, [pc, #312]	; (8001d4c <HAL_GPIO_Init+0x31c>)
 8001c12:	4293      	cmp	r3, r2
 8001c14:	d019      	beq.n	8001c4a <HAL_GPIO_Init+0x21a>
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	4a4d      	ldr	r2, [pc, #308]	; (8001d50 <HAL_GPIO_Init+0x320>)
 8001c1a:	4293      	cmp	r3, r2
 8001c1c:	d013      	beq.n	8001c46 <HAL_GPIO_Init+0x216>
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	4a4c      	ldr	r2, [pc, #304]	; (8001d54 <HAL_GPIO_Init+0x324>)
 8001c22:	4293      	cmp	r3, r2
 8001c24:	d00d      	beq.n	8001c42 <HAL_GPIO_Init+0x212>
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	4a4b      	ldr	r2, [pc, #300]	; (8001d58 <HAL_GPIO_Init+0x328>)
 8001c2a:	4293      	cmp	r3, r2
 8001c2c:	d007      	beq.n	8001c3e <HAL_GPIO_Init+0x20e>
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	4a4a      	ldr	r2, [pc, #296]	; (8001d5c <HAL_GPIO_Init+0x32c>)
 8001c32:	4293      	cmp	r3, r2
 8001c34:	d101      	bne.n	8001c3a <HAL_GPIO_Init+0x20a>
 8001c36:	2307      	movs	r3, #7
 8001c38:	e00e      	b.n	8001c58 <HAL_GPIO_Init+0x228>
 8001c3a:	2308      	movs	r3, #8
 8001c3c:	e00c      	b.n	8001c58 <HAL_GPIO_Init+0x228>
 8001c3e:	2306      	movs	r3, #6
 8001c40:	e00a      	b.n	8001c58 <HAL_GPIO_Init+0x228>
 8001c42:	2305      	movs	r3, #5
 8001c44:	e008      	b.n	8001c58 <HAL_GPIO_Init+0x228>
 8001c46:	2304      	movs	r3, #4
 8001c48:	e006      	b.n	8001c58 <HAL_GPIO_Init+0x228>
 8001c4a:	2303      	movs	r3, #3
 8001c4c:	e004      	b.n	8001c58 <HAL_GPIO_Init+0x228>
 8001c4e:	2302      	movs	r3, #2
 8001c50:	e002      	b.n	8001c58 <HAL_GPIO_Init+0x228>
 8001c52:	2301      	movs	r3, #1
 8001c54:	e000      	b.n	8001c58 <HAL_GPIO_Init+0x228>
 8001c56:	2300      	movs	r3, #0
 8001c58:	69fa      	ldr	r2, [r7, #28]
 8001c5a:	f002 0203 	and.w	r2, r2, #3
 8001c5e:	0092      	lsls	r2, r2, #2
 8001c60:	4093      	lsls	r3, r2
 8001c62:	69ba      	ldr	r2, [r7, #24]
 8001c64:	4313      	orrs	r3, r2
 8001c66:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001c68:	4934      	ldr	r1, [pc, #208]	; (8001d3c <HAL_GPIO_Init+0x30c>)
 8001c6a:	69fb      	ldr	r3, [r7, #28]
 8001c6c:	089b      	lsrs	r3, r3, #2
 8001c6e:	3302      	adds	r3, #2
 8001c70:	69ba      	ldr	r2, [r7, #24]
 8001c72:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001c76:	4b3a      	ldr	r3, [pc, #232]	; (8001d60 <HAL_GPIO_Init+0x330>)
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001c7c:	693b      	ldr	r3, [r7, #16]
 8001c7e:	43db      	mvns	r3, r3
 8001c80:	69ba      	ldr	r2, [r7, #24]
 8001c82:	4013      	ands	r3, r2
 8001c84:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001c86:	683b      	ldr	r3, [r7, #0]
 8001c88:	685b      	ldr	r3, [r3, #4]
 8001c8a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001c8e:	2b00      	cmp	r3, #0
 8001c90:	d003      	beq.n	8001c9a <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8001c92:	69ba      	ldr	r2, [r7, #24]
 8001c94:	693b      	ldr	r3, [r7, #16]
 8001c96:	4313      	orrs	r3, r2
 8001c98:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001c9a:	4a31      	ldr	r2, [pc, #196]	; (8001d60 <HAL_GPIO_Init+0x330>)
 8001c9c:	69bb      	ldr	r3, [r7, #24]
 8001c9e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001ca0:	4b2f      	ldr	r3, [pc, #188]	; (8001d60 <HAL_GPIO_Init+0x330>)
 8001ca2:	685b      	ldr	r3, [r3, #4]
 8001ca4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001ca6:	693b      	ldr	r3, [r7, #16]
 8001ca8:	43db      	mvns	r3, r3
 8001caa:	69ba      	ldr	r2, [r7, #24]
 8001cac:	4013      	ands	r3, r2
 8001cae:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001cb0:	683b      	ldr	r3, [r7, #0]
 8001cb2:	685b      	ldr	r3, [r3, #4]
 8001cb4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001cb8:	2b00      	cmp	r3, #0
 8001cba:	d003      	beq.n	8001cc4 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001cbc:	69ba      	ldr	r2, [r7, #24]
 8001cbe:	693b      	ldr	r3, [r7, #16]
 8001cc0:	4313      	orrs	r3, r2
 8001cc2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001cc4:	4a26      	ldr	r2, [pc, #152]	; (8001d60 <HAL_GPIO_Init+0x330>)
 8001cc6:	69bb      	ldr	r3, [r7, #24]
 8001cc8:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001cca:	4b25      	ldr	r3, [pc, #148]	; (8001d60 <HAL_GPIO_Init+0x330>)
 8001ccc:	689b      	ldr	r3, [r3, #8]
 8001cce:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001cd0:	693b      	ldr	r3, [r7, #16]
 8001cd2:	43db      	mvns	r3, r3
 8001cd4:	69ba      	ldr	r2, [r7, #24]
 8001cd6:	4013      	ands	r3, r2
 8001cd8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001cda:	683b      	ldr	r3, [r7, #0]
 8001cdc:	685b      	ldr	r3, [r3, #4]
 8001cde:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001ce2:	2b00      	cmp	r3, #0
 8001ce4:	d003      	beq.n	8001cee <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8001ce6:	69ba      	ldr	r2, [r7, #24]
 8001ce8:	693b      	ldr	r3, [r7, #16]
 8001cea:	4313      	orrs	r3, r2
 8001cec:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001cee:	4a1c      	ldr	r2, [pc, #112]	; (8001d60 <HAL_GPIO_Init+0x330>)
 8001cf0:	69bb      	ldr	r3, [r7, #24]
 8001cf2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001cf4:	4b1a      	ldr	r3, [pc, #104]	; (8001d60 <HAL_GPIO_Init+0x330>)
 8001cf6:	68db      	ldr	r3, [r3, #12]
 8001cf8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001cfa:	693b      	ldr	r3, [r7, #16]
 8001cfc:	43db      	mvns	r3, r3
 8001cfe:	69ba      	ldr	r2, [r7, #24]
 8001d00:	4013      	ands	r3, r2
 8001d02:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001d04:	683b      	ldr	r3, [r7, #0]
 8001d06:	685b      	ldr	r3, [r3, #4]
 8001d08:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001d0c:	2b00      	cmp	r3, #0
 8001d0e:	d003      	beq.n	8001d18 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001d10:	69ba      	ldr	r2, [r7, #24]
 8001d12:	693b      	ldr	r3, [r7, #16]
 8001d14:	4313      	orrs	r3, r2
 8001d16:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001d18:	4a11      	ldr	r2, [pc, #68]	; (8001d60 <HAL_GPIO_Init+0x330>)
 8001d1a:	69bb      	ldr	r3, [r7, #24]
 8001d1c:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001d1e:	69fb      	ldr	r3, [r7, #28]
 8001d20:	3301      	adds	r3, #1
 8001d22:	61fb      	str	r3, [r7, #28]
 8001d24:	69fb      	ldr	r3, [r7, #28]
 8001d26:	2b0f      	cmp	r3, #15
 8001d28:	f67f ae90 	bls.w	8001a4c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001d2c:	bf00      	nop
 8001d2e:	3724      	adds	r7, #36	; 0x24
 8001d30:	46bd      	mov	sp, r7
 8001d32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d36:	4770      	bx	lr
 8001d38:	40023800 	.word	0x40023800
 8001d3c:	40013800 	.word	0x40013800
 8001d40:	40020000 	.word	0x40020000
 8001d44:	40020400 	.word	0x40020400
 8001d48:	40020800 	.word	0x40020800
 8001d4c:	40020c00 	.word	0x40020c00
 8001d50:	40021000 	.word	0x40021000
 8001d54:	40021400 	.word	0x40021400
 8001d58:	40021800 	.word	0x40021800
 8001d5c:	40021c00 	.word	0x40021c00
 8001d60:	40013c00 	.word	0x40013c00

08001d64 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001d64:	b480      	push	{r7}
 8001d66:	b083      	sub	sp, #12
 8001d68:	af00      	add	r7, sp, #0
 8001d6a:	6078      	str	r0, [r7, #4]
 8001d6c:	460b      	mov	r3, r1
 8001d6e:	807b      	strh	r3, [r7, #2]
 8001d70:	4613      	mov	r3, r2
 8001d72:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001d74:	787b      	ldrb	r3, [r7, #1]
 8001d76:	2b00      	cmp	r3, #0
 8001d78:	d003      	beq.n	8001d82 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001d7a:	887a      	ldrh	r2, [r7, #2]
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001d80:	e003      	b.n	8001d8a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001d82:	887b      	ldrh	r3, [r7, #2]
 8001d84:	041a      	lsls	r2, r3, #16
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	619a      	str	r2, [r3, #24]
}
 8001d8a:	bf00      	nop
 8001d8c:	370c      	adds	r7, #12
 8001d8e:	46bd      	mov	sp, r7
 8001d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d94:	4770      	bx	lr

08001d96 <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 8001d96:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001d98:	b08f      	sub	sp, #60	; 0x3c
 8001d9a:	af0a      	add	r7, sp, #40	; 0x28
 8001d9c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	2b00      	cmp	r3, #0
 8001da2:	d101      	bne.n	8001da8 <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 8001da4:	2301      	movs	r3, #1
 8001da6:	e054      	b.n	8001e52 <HAL_HCD_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

  USBx = hhcd->Instance;
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	60fb      	str	r3, [r7, #12]

  if (hhcd->State == HAL_HCD_STATE_RESET)
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	f893 32b9 	ldrb.w	r3, [r3, #697]	; 0x2b9
 8001db4:	b2db      	uxtb	r3, r3
 8001db6:	2b00      	cmp	r3, #0
 8001db8:	d106      	bne.n	8001dc8 <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	2200      	movs	r2, #0
 8001dbe:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 8001dc2:	6878      	ldr	r0, [r7, #4]
 8001dc4:	f005 f980 	bl	80070c8 <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	2203      	movs	r2, #3
 8001dcc:	f883 22b9 	strb.w	r2, [r3, #697]	; 0x2b9

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8001dd0:	68fb      	ldr	r3, [r7, #12]
 8001dd2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001dd4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001dd8:	2b00      	cmp	r3, #0
 8001dda:	d102      	bne.n	8001de2 <HAL_HCD_Init+0x4c>
  {
    hhcd->Init.dma_enable = 0U;
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	2200      	movs	r2, #0
 8001de0:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	4618      	mov	r0, r3
 8001de8:	f003 fa3a 	bl	8005260 <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	603b      	str	r3, [r7, #0]
 8001df2:	687e      	ldr	r6, [r7, #4]
 8001df4:	466d      	mov	r5, sp
 8001df6:	f106 0410 	add.w	r4, r6, #16
 8001dfa:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001dfc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001dfe:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001e00:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001e02:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001e06:	e885 0003 	stmia.w	r5, {r0, r1}
 8001e0a:	1d33      	adds	r3, r6, #4
 8001e0c:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001e0e:	6838      	ldr	r0, [r7, #0]
 8001e10:	f003 f9b4 	bl	800517c <USB_CoreInit>

  /* Force Host Mode*/
  (void)USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE);
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	2101      	movs	r1, #1
 8001e1a:	4618      	mov	r0, r3
 8001e1c:	f003 fa31 	bl	8005282 <USB_SetCurrentMode>

  /* Init Host */
  (void)USB_HostInit(hhcd->Instance, hhcd->Init);
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	603b      	str	r3, [r7, #0]
 8001e26:	687e      	ldr	r6, [r7, #4]
 8001e28:	466d      	mov	r5, sp
 8001e2a:	f106 0410 	add.w	r4, r6, #16
 8001e2e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001e30:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001e32:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001e34:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001e36:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001e3a:	e885 0003 	stmia.w	r5, {r0, r1}
 8001e3e:	1d33      	adds	r3, r6, #4
 8001e40:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001e42:	6838      	ldr	r0, [r7, #0]
 8001e44:	f003 fb44 	bl	80054d0 <USB_HostInit>

  hhcd->State = HAL_HCD_STATE_READY;
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	2201      	movs	r2, #1
 8001e4c:	f883 22b9 	strb.w	r2, [r3, #697]	; 0x2b9

  return HAL_OK;
 8001e50:	2300      	movs	r3, #0
}
 8001e52:	4618      	mov	r0, r3
 8001e54:	3714      	adds	r7, #20
 8001e56:	46bd      	mov	sp, r7
 8001e58:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001e5a <HAL_HCD_HC_Init>:
                                  uint8_t epnum,
                                  uint8_t dev_address,
                                  uint8_t speed,
                                  uint8_t ep_type,
                                  uint16_t mps)
{
 8001e5a:	b590      	push	{r4, r7, lr}
 8001e5c:	b089      	sub	sp, #36	; 0x24
 8001e5e:	af04      	add	r7, sp, #16
 8001e60:	6078      	str	r0, [r7, #4]
 8001e62:	4608      	mov	r0, r1
 8001e64:	4611      	mov	r1, r2
 8001e66:	461a      	mov	r2, r3
 8001e68:	4603      	mov	r3, r0
 8001e6a:	70fb      	strb	r3, [r7, #3]
 8001e6c:	460b      	mov	r3, r1
 8001e6e:	70bb      	strb	r3, [r7, #2]
 8001e70:	4613      	mov	r3, r2
 8001e72:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;

  __HAL_LOCK(hhcd);
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 8001e7a:	2b01      	cmp	r3, #1
 8001e7c:	d101      	bne.n	8001e82 <HAL_HCD_HC_Init+0x28>
 8001e7e:	2302      	movs	r3, #2
 8001e80:	e07f      	b.n	8001f82 <HAL_HCD_HC_Init+0x128>
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	2201      	movs	r2, #1
 8001e86:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  hhcd->hc[ch_num].do_ping = 0U;
 8001e8a:	78fa      	ldrb	r2, [r7, #3]
 8001e8c:	6879      	ldr	r1, [r7, #4]
 8001e8e:	4613      	mov	r3, r2
 8001e90:	009b      	lsls	r3, r3, #2
 8001e92:	4413      	add	r3, r2
 8001e94:	00db      	lsls	r3, r3, #3
 8001e96:	440b      	add	r3, r1
 8001e98:	333d      	adds	r3, #61	; 0x3d
 8001e9a:	2200      	movs	r2, #0
 8001e9c:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 8001e9e:	78fa      	ldrb	r2, [r7, #3]
 8001ea0:	6879      	ldr	r1, [r7, #4]
 8001ea2:	4613      	mov	r3, r2
 8001ea4:	009b      	lsls	r3, r3, #2
 8001ea6:	4413      	add	r3, r2
 8001ea8:	00db      	lsls	r3, r3, #3
 8001eaa:	440b      	add	r3, r1
 8001eac:	3338      	adds	r3, #56	; 0x38
 8001eae:	787a      	ldrb	r2, [r7, #1]
 8001eb0:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = mps;
 8001eb2:	78fa      	ldrb	r2, [r7, #3]
 8001eb4:	6879      	ldr	r1, [r7, #4]
 8001eb6:	4613      	mov	r3, r2
 8001eb8:	009b      	lsls	r3, r3, #2
 8001eba:	4413      	add	r3, r2
 8001ebc:	00db      	lsls	r3, r3, #3
 8001ebe:	440b      	add	r3, r1
 8001ec0:	3340      	adds	r3, #64	; 0x40
 8001ec2:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8001ec4:	801a      	strh	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8001ec6:	78fa      	ldrb	r2, [r7, #3]
 8001ec8:	6879      	ldr	r1, [r7, #4]
 8001eca:	4613      	mov	r3, r2
 8001ecc:	009b      	lsls	r3, r3, #2
 8001ece:	4413      	add	r3, r2
 8001ed0:	00db      	lsls	r3, r3, #3
 8001ed2:	440b      	add	r3, r1
 8001ed4:	3339      	adds	r3, #57	; 0x39
 8001ed6:	78fa      	ldrb	r2, [r7, #3]
 8001ed8:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 8001eda:	78fa      	ldrb	r2, [r7, #3]
 8001edc:	6879      	ldr	r1, [r7, #4]
 8001ede:	4613      	mov	r3, r2
 8001ee0:	009b      	lsls	r3, r3, #2
 8001ee2:	4413      	add	r3, r2
 8001ee4:	00db      	lsls	r3, r3, #3
 8001ee6:	440b      	add	r3, r1
 8001ee8:	333f      	adds	r3, #63	; 0x3f
 8001eea:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 8001eee:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 8001ef0:	78fa      	ldrb	r2, [r7, #3]
 8001ef2:	78bb      	ldrb	r3, [r7, #2]
 8001ef4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001ef8:	b2d8      	uxtb	r0, r3
 8001efa:	6879      	ldr	r1, [r7, #4]
 8001efc:	4613      	mov	r3, r2
 8001efe:	009b      	lsls	r3, r3, #2
 8001f00:	4413      	add	r3, r2
 8001f02:	00db      	lsls	r3, r3, #3
 8001f04:	440b      	add	r3, r1
 8001f06:	333a      	adds	r3, #58	; 0x3a
 8001f08:	4602      	mov	r2, r0
 8001f0a:	701a      	strb	r2, [r3, #0]

  if ((epnum & 0x80U) == 0x80U)
 8001f0c:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8001f10:	2b00      	cmp	r3, #0
 8001f12:	da0a      	bge.n	8001f2a <HAL_HCD_HC_Init+0xd0>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 8001f14:	78fa      	ldrb	r2, [r7, #3]
 8001f16:	6879      	ldr	r1, [r7, #4]
 8001f18:	4613      	mov	r3, r2
 8001f1a:	009b      	lsls	r3, r3, #2
 8001f1c:	4413      	add	r3, r2
 8001f1e:	00db      	lsls	r3, r3, #3
 8001f20:	440b      	add	r3, r1
 8001f22:	333b      	adds	r3, #59	; 0x3b
 8001f24:	2201      	movs	r2, #1
 8001f26:	701a      	strb	r2, [r3, #0]
 8001f28:	e009      	b.n	8001f3e <HAL_HCD_HC_Init+0xe4>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 8001f2a:	78fa      	ldrb	r2, [r7, #3]
 8001f2c:	6879      	ldr	r1, [r7, #4]
 8001f2e:	4613      	mov	r3, r2
 8001f30:	009b      	lsls	r3, r3, #2
 8001f32:	4413      	add	r3, r2
 8001f34:	00db      	lsls	r3, r3, #3
 8001f36:	440b      	add	r3, r1
 8001f38:	333b      	adds	r3, #59	; 0x3b
 8001f3a:	2200      	movs	r2, #0
 8001f3c:	701a      	strb	r2, [r3, #0]
  }

  hhcd->hc[ch_num].speed = speed;
 8001f3e:	78fa      	ldrb	r2, [r7, #3]
 8001f40:	6879      	ldr	r1, [r7, #4]
 8001f42:	4613      	mov	r3, r2
 8001f44:	009b      	lsls	r3, r3, #2
 8001f46:	4413      	add	r3, r2
 8001f48:	00db      	lsls	r3, r3, #3
 8001f4a:	440b      	add	r3, r1
 8001f4c:	333c      	adds	r3, #60	; 0x3c
 8001f4e:	f897 2020 	ldrb.w	r2, [r7, #32]
 8001f52:	701a      	strb	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance,
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	6818      	ldr	r0, [r3, #0]
 8001f58:	787c      	ldrb	r4, [r7, #1]
 8001f5a:	78ba      	ldrb	r2, [r7, #2]
 8001f5c:	78f9      	ldrb	r1, [r7, #3]
 8001f5e:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8001f60:	9302      	str	r3, [sp, #8]
 8001f62:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8001f66:	9301      	str	r3, [sp, #4]
 8001f68:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001f6c:	9300      	str	r3, [sp, #0]
 8001f6e:	4623      	mov	r3, r4
 8001f70:	f003 fbee 	bl	8005750 <USB_HC_Init>
 8001f74:	4603      	mov	r3, r0
 8001f76:	73fb      	strb	r3, [r7, #15]
                        epnum,
                        dev_address,
                        speed,
                        ep_type,
                        mps);
  __HAL_UNLOCK(hhcd);
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	2200      	movs	r2, #0
 8001f7c:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

  return status;
 8001f80:	7bfb      	ldrb	r3, [r7, #15]
}
 8001f82:	4618      	mov	r0, r3
 8001f84:	3714      	adds	r7, #20
 8001f86:	46bd      	mov	sp, r7
 8001f88:	bd90      	pop	{r4, r7, pc}

08001f8a <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 8001f8a:	b580      	push	{r7, lr}
 8001f8c:	b084      	sub	sp, #16
 8001f8e:	af00      	add	r7, sp, #0
 8001f90:	6078      	str	r0, [r7, #4]
 8001f92:	460b      	mov	r3, r1
 8001f94:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 8001f96:	2300      	movs	r3, #0
 8001f98:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 8001fa0:	2b01      	cmp	r3, #1
 8001fa2:	d101      	bne.n	8001fa8 <HAL_HCD_HC_Halt+0x1e>
 8001fa4:	2302      	movs	r3, #2
 8001fa6:	e00f      	b.n	8001fc8 <HAL_HCD_HC_Halt+0x3e>
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	2201      	movs	r2, #1
 8001fac:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	78fa      	ldrb	r2, [r7, #3]
 8001fb6:	4611      	mov	r1, r2
 8001fb8:	4618      	mov	r0, r3
 8001fba:	f003 fe28 	bl	8005c0e <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	2200      	movs	r2, #0
 8001fc2:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

  return status;
 8001fc6:	7bfb      	ldrb	r3, [r7, #15]
}
 8001fc8:	4618      	mov	r0, r3
 8001fca:	3710      	adds	r7, #16
 8001fcc:	46bd      	mov	sp, r7
 8001fce:	bd80      	pop	{r7, pc}

08001fd0 <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 8001fd0:	b580      	push	{r7, lr}
 8001fd2:	b082      	sub	sp, #8
 8001fd4:	af00      	add	r7, sp, #0
 8001fd6:	6078      	str	r0, [r7, #4]
 8001fd8:	4608      	mov	r0, r1
 8001fda:	4611      	mov	r1, r2
 8001fdc:	461a      	mov	r2, r3
 8001fde:	4603      	mov	r3, r0
 8001fe0:	70fb      	strb	r3, [r7, #3]
 8001fe2:	460b      	mov	r3, r1
 8001fe4:	70bb      	strb	r3, [r7, #2]
 8001fe6:	4613      	mov	r3, r2
 8001fe8:	707b      	strb	r3, [r7, #1]
  UNUSED(do_ping);

  hhcd->hc[ch_num].ep_is_in = direction;
 8001fea:	78fa      	ldrb	r2, [r7, #3]
 8001fec:	6879      	ldr	r1, [r7, #4]
 8001fee:	4613      	mov	r3, r2
 8001ff0:	009b      	lsls	r3, r3, #2
 8001ff2:	4413      	add	r3, r2
 8001ff4:	00db      	lsls	r3, r3, #3
 8001ff6:	440b      	add	r3, r1
 8001ff8:	333b      	adds	r3, #59	; 0x3b
 8001ffa:	78ba      	ldrb	r2, [r7, #2]
 8001ffc:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 8001ffe:	78fa      	ldrb	r2, [r7, #3]
 8002000:	6879      	ldr	r1, [r7, #4]
 8002002:	4613      	mov	r3, r2
 8002004:	009b      	lsls	r3, r3, #2
 8002006:	4413      	add	r3, r2
 8002008:	00db      	lsls	r3, r3, #3
 800200a:	440b      	add	r3, r1
 800200c:	333f      	adds	r3, #63	; 0x3f
 800200e:	787a      	ldrb	r2, [r7, #1]
 8002010:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 8002012:	7c3b      	ldrb	r3, [r7, #16]
 8002014:	2b00      	cmp	r3, #0
 8002016:	d10a      	bne.n	800202e <HAL_HCD_HC_SubmitRequest+0x5e>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 8002018:	78fa      	ldrb	r2, [r7, #3]
 800201a:	6879      	ldr	r1, [r7, #4]
 800201c:	4613      	mov	r3, r2
 800201e:	009b      	lsls	r3, r3, #2
 8002020:	4413      	add	r3, r2
 8002022:	00db      	lsls	r3, r3, #3
 8002024:	440b      	add	r3, r1
 8002026:	3342      	adds	r3, #66	; 0x42
 8002028:	2203      	movs	r2, #3
 800202a:	701a      	strb	r2, [r3, #0]
 800202c:	e009      	b.n	8002042 <HAL_HCD_HC_SubmitRequest+0x72>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800202e:	78fa      	ldrb	r2, [r7, #3]
 8002030:	6879      	ldr	r1, [r7, #4]
 8002032:	4613      	mov	r3, r2
 8002034:	009b      	lsls	r3, r3, #2
 8002036:	4413      	add	r3, r2
 8002038:	00db      	lsls	r3, r3, #3
 800203a:	440b      	add	r3, r1
 800203c:	3342      	adds	r3, #66	; 0x42
 800203e:	2202      	movs	r2, #2
 8002040:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 8002042:	787b      	ldrb	r3, [r7, #1]
 8002044:	2b03      	cmp	r3, #3
 8002046:	f200 80d6 	bhi.w	80021f6 <HAL_HCD_HC_SubmitRequest+0x226>
 800204a:	a201      	add	r2, pc, #4	; (adr r2, 8002050 <HAL_HCD_HC_SubmitRequest+0x80>)
 800204c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002050:	08002061 	.word	0x08002061
 8002054:	080021e1 	.word	0x080021e1
 8002058:	080020cd 	.word	0x080020cd
 800205c:	08002157 	.word	0x08002157
  {
    case EP_TYPE_CTRL:
      if ((token == 1U) && (direction == 0U)) /*send data */
 8002060:	7c3b      	ldrb	r3, [r7, #16]
 8002062:	2b01      	cmp	r3, #1
 8002064:	f040 80c9 	bne.w	80021fa <HAL_HCD_HC_SubmitRequest+0x22a>
 8002068:	78bb      	ldrb	r3, [r7, #2]
 800206a:	2b00      	cmp	r3, #0
 800206c:	f040 80c5 	bne.w	80021fa <HAL_HCD_HC_SubmitRequest+0x22a>
      {
        if (length == 0U)
 8002070:	8b3b      	ldrh	r3, [r7, #24]
 8002072:	2b00      	cmp	r3, #0
 8002074:	d109      	bne.n	800208a <HAL_HCD_HC_SubmitRequest+0xba>
        {
          /* For Status OUT stage, Length==0, Status Out PID = 1 */
          hhcd->hc[ch_num].toggle_out = 1U;
 8002076:	78fa      	ldrb	r2, [r7, #3]
 8002078:	6879      	ldr	r1, [r7, #4]
 800207a:	4613      	mov	r3, r2
 800207c:	009b      	lsls	r3, r3, #2
 800207e:	4413      	add	r3, r2
 8002080:	00db      	lsls	r3, r3, #3
 8002082:	440b      	add	r3, r1
 8002084:	3351      	adds	r3, #81	; 0x51
 8002086:	2201      	movs	r2, #1
 8002088:	701a      	strb	r2, [r3, #0]
        }

        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 800208a:	78fa      	ldrb	r2, [r7, #3]
 800208c:	6879      	ldr	r1, [r7, #4]
 800208e:	4613      	mov	r3, r2
 8002090:	009b      	lsls	r3, r3, #2
 8002092:	4413      	add	r3, r2
 8002094:	00db      	lsls	r3, r3, #3
 8002096:	440b      	add	r3, r1
 8002098:	3351      	adds	r3, #81	; 0x51
 800209a:	781b      	ldrb	r3, [r3, #0]
 800209c:	2b00      	cmp	r3, #0
 800209e:	d10a      	bne.n	80020b6 <HAL_HCD_HC_SubmitRequest+0xe6>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80020a0:	78fa      	ldrb	r2, [r7, #3]
 80020a2:	6879      	ldr	r1, [r7, #4]
 80020a4:	4613      	mov	r3, r2
 80020a6:	009b      	lsls	r3, r3, #2
 80020a8:	4413      	add	r3, r2
 80020aa:	00db      	lsls	r3, r3, #3
 80020ac:	440b      	add	r3, r1
 80020ae:	3342      	adds	r3, #66	; 0x42
 80020b0:	2200      	movs	r2, #0
 80020b2:	701a      	strb	r2, [r3, #0]
        {
          /* Put the PID 1 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 80020b4:	e0a1      	b.n	80021fa <HAL_HCD_HC_SubmitRequest+0x22a>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80020b6:	78fa      	ldrb	r2, [r7, #3]
 80020b8:	6879      	ldr	r1, [r7, #4]
 80020ba:	4613      	mov	r3, r2
 80020bc:	009b      	lsls	r3, r3, #2
 80020be:	4413      	add	r3, r2
 80020c0:	00db      	lsls	r3, r3, #3
 80020c2:	440b      	add	r3, r1
 80020c4:	3342      	adds	r3, #66	; 0x42
 80020c6:	2202      	movs	r2, #2
 80020c8:	701a      	strb	r2, [r3, #0]
      break;
 80020ca:	e096      	b.n	80021fa <HAL_HCD_HC_SubmitRequest+0x22a>

    case EP_TYPE_BULK:
      if (direction == 0U)
 80020cc:	78bb      	ldrb	r3, [r7, #2]
 80020ce:	2b00      	cmp	r3, #0
 80020d0:	d120      	bne.n	8002114 <HAL_HCD_HC_SubmitRequest+0x144>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 80020d2:	78fa      	ldrb	r2, [r7, #3]
 80020d4:	6879      	ldr	r1, [r7, #4]
 80020d6:	4613      	mov	r3, r2
 80020d8:	009b      	lsls	r3, r3, #2
 80020da:	4413      	add	r3, r2
 80020dc:	00db      	lsls	r3, r3, #3
 80020de:	440b      	add	r3, r1
 80020e0:	3351      	adds	r3, #81	; 0x51
 80020e2:	781b      	ldrb	r3, [r3, #0]
 80020e4:	2b00      	cmp	r3, #0
 80020e6:	d10a      	bne.n	80020fe <HAL_HCD_HC_SubmitRequest+0x12e>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80020e8:	78fa      	ldrb	r2, [r7, #3]
 80020ea:	6879      	ldr	r1, [r7, #4]
 80020ec:	4613      	mov	r3, r2
 80020ee:	009b      	lsls	r3, r3, #2
 80020f0:	4413      	add	r3, r2
 80020f2:	00db      	lsls	r3, r3, #3
 80020f4:	440b      	add	r3, r1
 80020f6:	3342      	adds	r3, #66	; 0x42
 80020f8:	2200      	movs	r2, #0
 80020fa:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 80020fc:	e07e      	b.n	80021fc <HAL_HCD_HC_SubmitRequest+0x22c>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80020fe:	78fa      	ldrb	r2, [r7, #3]
 8002100:	6879      	ldr	r1, [r7, #4]
 8002102:	4613      	mov	r3, r2
 8002104:	009b      	lsls	r3, r3, #2
 8002106:	4413      	add	r3, r2
 8002108:	00db      	lsls	r3, r3, #3
 800210a:	440b      	add	r3, r1
 800210c:	3342      	adds	r3, #66	; 0x42
 800210e:	2202      	movs	r2, #2
 8002110:	701a      	strb	r2, [r3, #0]
      break;
 8002112:	e073      	b.n	80021fc <HAL_HCD_HC_SubmitRequest+0x22c>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8002114:	78fa      	ldrb	r2, [r7, #3]
 8002116:	6879      	ldr	r1, [r7, #4]
 8002118:	4613      	mov	r3, r2
 800211a:	009b      	lsls	r3, r3, #2
 800211c:	4413      	add	r3, r2
 800211e:	00db      	lsls	r3, r3, #3
 8002120:	440b      	add	r3, r1
 8002122:	3350      	adds	r3, #80	; 0x50
 8002124:	781b      	ldrb	r3, [r3, #0]
 8002126:	2b00      	cmp	r3, #0
 8002128:	d10a      	bne.n	8002140 <HAL_HCD_HC_SubmitRequest+0x170>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800212a:	78fa      	ldrb	r2, [r7, #3]
 800212c:	6879      	ldr	r1, [r7, #4]
 800212e:	4613      	mov	r3, r2
 8002130:	009b      	lsls	r3, r3, #2
 8002132:	4413      	add	r3, r2
 8002134:	00db      	lsls	r3, r3, #3
 8002136:	440b      	add	r3, r1
 8002138:	3342      	adds	r3, #66	; 0x42
 800213a:	2200      	movs	r2, #0
 800213c:	701a      	strb	r2, [r3, #0]
      break;
 800213e:	e05d      	b.n	80021fc <HAL_HCD_HC_SubmitRequest+0x22c>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002140:	78fa      	ldrb	r2, [r7, #3]
 8002142:	6879      	ldr	r1, [r7, #4]
 8002144:	4613      	mov	r3, r2
 8002146:	009b      	lsls	r3, r3, #2
 8002148:	4413      	add	r3, r2
 800214a:	00db      	lsls	r3, r3, #3
 800214c:	440b      	add	r3, r1
 800214e:	3342      	adds	r3, #66	; 0x42
 8002150:	2202      	movs	r2, #2
 8002152:	701a      	strb	r2, [r3, #0]
      break;
 8002154:	e052      	b.n	80021fc <HAL_HCD_HC_SubmitRequest+0x22c>
    case EP_TYPE_INTR:
      if (direction == 0U)
 8002156:	78bb      	ldrb	r3, [r7, #2]
 8002158:	2b00      	cmp	r3, #0
 800215a:	d120      	bne.n	800219e <HAL_HCD_HC_SubmitRequest+0x1ce>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 800215c:	78fa      	ldrb	r2, [r7, #3]
 800215e:	6879      	ldr	r1, [r7, #4]
 8002160:	4613      	mov	r3, r2
 8002162:	009b      	lsls	r3, r3, #2
 8002164:	4413      	add	r3, r2
 8002166:	00db      	lsls	r3, r3, #3
 8002168:	440b      	add	r3, r1
 800216a:	3351      	adds	r3, #81	; 0x51
 800216c:	781b      	ldrb	r3, [r3, #0]
 800216e:	2b00      	cmp	r3, #0
 8002170:	d10a      	bne.n	8002188 <HAL_HCD_HC_SubmitRequest+0x1b8>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002172:	78fa      	ldrb	r2, [r7, #3]
 8002174:	6879      	ldr	r1, [r7, #4]
 8002176:	4613      	mov	r3, r2
 8002178:	009b      	lsls	r3, r3, #2
 800217a:	4413      	add	r3, r2
 800217c:	00db      	lsls	r3, r3, #3
 800217e:	440b      	add	r3, r1
 8002180:	3342      	adds	r3, #66	; 0x42
 8002182:	2200      	movs	r2, #0
 8002184:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8002186:	e039      	b.n	80021fc <HAL_HCD_HC_SubmitRequest+0x22c>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002188:	78fa      	ldrb	r2, [r7, #3]
 800218a:	6879      	ldr	r1, [r7, #4]
 800218c:	4613      	mov	r3, r2
 800218e:	009b      	lsls	r3, r3, #2
 8002190:	4413      	add	r3, r2
 8002192:	00db      	lsls	r3, r3, #3
 8002194:	440b      	add	r3, r1
 8002196:	3342      	adds	r3, #66	; 0x42
 8002198:	2202      	movs	r2, #2
 800219a:	701a      	strb	r2, [r3, #0]
      break;
 800219c:	e02e      	b.n	80021fc <HAL_HCD_HC_SubmitRequest+0x22c>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 800219e:	78fa      	ldrb	r2, [r7, #3]
 80021a0:	6879      	ldr	r1, [r7, #4]
 80021a2:	4613      	mov	r3, r2
 80021a4:	009b      	lsls	r3, r3, #2
 80021a6:	4413      	add	r3, r2
 80021a8:	00db      	lsls	r3, r3, #3
 80021aa:	440b      	add	r3, r1
 80021ac:	3350      	adds	r3, #80	; 0x50
 80021ae:	781b      	ldrb	r3, [r3, #0]
 80021b0:	2b00      	cmp	r3, #0
 80021b2:	d10a      	bne.n	80021ca <HAL_HCD_HC_SubmitRequest+0x1fa>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80021b4:	78fa      	ldrb	r2, [r7, #3]
 80021b6:	6879      	ldr	r1, [r7, #4]
 80021b8:	4613      	mov	r3, r2
 80021ba:	009b      	lsls	r3, r3, #2
 80021bc:	4413      	add	r3, r2
 80021be:	00db      	lsls	r3, r3, #3
 80021c0:	440b      	add	r3, r1
 80021c2:	3342      	adds	r3, #66	; 0x42
 80021c4:	2200      	movs	r2, #0
 80021c6:	701a      	strb	r2, [r3, #0]
      break;
 80021c8:	e018      	b.n	80021fc <HAL_HCD_HC_SubmitRequest+0x22c>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80021ca:	78fa      	ldrb	r2, [r7, #3]
 80021cc:	6879      	ldr	r1, [r7, #4]
 80021ce:	4613      	mov	r3, r2
 80021d0:	009b      	lsls	r3, r3, #2
 80021d2:	4413      	add	r3, r2
 80021d4:	00db      	lsls	r3, r3, #3
 80021d6:	440b      	add	r3, r1
 80021d8:	3342      	adds	r3, #66	; 0x42
 80021da:	2202      	movs	r2, #2
 80021dc:	701a      	strb	r2, [r3, #0]
      break;
 80021de:	e00d      	b.n	80021fc <HAL_HCD_HC_SubmitRequest+0x22c>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80021e0:	78fa      	ldrb	r2, [r7, #3]
 80021e2:	6879      	ldr	r1, [r7, #4]
 80021e4:	4613      	mov	r3, r2
 80021e6:	009b      	lsls	r3, r3, #2
 80021e8:	4413      	add	r3, r2
 80021ea:	00db      	lsls	r3, r3, #3
 80021ec:	440b      	add	r3, r1
 80021ee:	3342      	adds	r3, #66	; 0x42
 80021f0:	2200      	movs	r2, #0
 80021f2:	701a      	strb	r2, [r3, #0]
      break;
 80021f4:	e002      	b.n	80021fc <HAL_HCD_HC_SubmitRequest+0x22c>

    default:
      break;
 80021f6:	bf00      	nop
 80021f8:	e000      	b.n	80021fc <HAL_HCD_HC_SubmitRequest+0x22c>
      break;
 80021fa:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 80021fc:	78fa      	ldrb	r2, [r7, #3]
 80021fe:	6879      	ldr	r1, [r7, #4]
 8002200:	4613      	mov	r3, r2
 8002202:	009b      	lsls	r3, r3, #2
 8002204:	4413      	add	r3, r2
 8002206:	00db      	lsls	r3, r3, #3
 8002208:	440b      	add	r3, r1
 800220a:	3344      	adds	r3, #68	; 0x44
 800220c:	697a      	ldr	r2, [r7, #20]
 800220e:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 8002210:	78fa      	ldrb	r2, [r7, #3]
 8002212:	8b39      	ldrh	r1, [r7, #24]
 8002214:	6878      	ldr	r0, [r7, #4]
 8002216:	4613      	mov	r3, r2
 8002218:	009b      	lsls	r3, r3, #2
 800221a:	4413      	add	r3, r2
 800221c:	00db      	lsls	r3, r3, #3
 800221e:	4403      	add	r3, r0
 8002220:	3348      	adds	r3, #72	; 0x48
 8002222:	6019      	str	r1, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 8002224:	78fa      	ldrb	r2, [r7, #3]
 8002226:	6879      	ldr	r1, [r7, #4]
 8002228:	4613      	mov	r3, r2
 800222a:	009b      	lsls	r3, r3, #2
 800222c:	4413      	add	r3, r2
 800222e:	00db      	lsls	r3, r3, #3
 8002230:	440b      	add	r3, r1
 8002232:	335c      	adds	r3, #92	; 0x5c
 8002234:	2200      	movs	r2, #0
 8002236:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 8002238:	78fa      	ldrb	r2, [r7, #3]
 800223a:	6879      	ldr	r1, [r7, #4]
 800223c:	4613      	mov	r3, r2
 800223e:	009b      	lsls	r3, r3, #2
 8002240:	4413      	add	r3, r2
 8002242:	00db      	lsls	r3, r3, #3
 8002244:	440b      	add	r3, r1
 8002246:	334c      	adds	r3, #76	; 0x4c
 8002248:	2200      	movs	r2, #0
 800224a:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 800224c:	78fa      	ldrb	r2, [r7, #3]
 800224e:	6879      	ldr	r1, [r7, #4]
 8002250:	4613      	mov	r3, r2
 8002252:	009b      	lsls	r3, r3, #2
 8002254:	4413      	add	r3, r2
 8002256:	00db      	lsls	r3, r3, #3
 8002258:	440b      	add	r3, r1
 800225a:	3339      	adds	r3, #57	; 0x39
 800225c:	78fa      	ldrb	r2, [r7, #3]
 800225e:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 8002260:	78fa      	ldrb	r2, [r7, #3]
 8002262:	6879      	ldr	r1, [r7, #4]
 8002264:	4613      	mov	r3, r2
 8002266:	009b      	lsls	r3, r3, #2
 8002268:	4413      	add	r3, r2
 800226a:	00db      	lsls	r3, r3, #3
 800226c:	440b      	add	r3, r1
 800226e:	335d      	adds	r3, #93	; 0x5d
 8002270:	2200      	movs	r2, #0
 8002272:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	6818      	ldr	r0, [r3, #0]
 8002278:	78fa      	ldrb	r2, [r7, #3]
 800227a:	4613      	mov	r3, r2
 800227c:	009b      	lsls	r3, r3, #2
 800227e:	4413      	add	r3, r2
 8002280:	00db      	lsls	r3, r3, #3
 8002282:	3338      	adds	r3, #56	; 0x38
 8002284:	687a      	ldr	r2, [r7, #4]
 8002286:	18d1      	adds	r1, r2, r3
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	691b      	ldr	r3, [r3, #16]
 800228c:	b2db      	uxtb	r3, r3
 800228e:	461a      	mov	r2, r3
 8002290:	f003 fb68 	bl	8005964 <USB_HC_StartXfer>
 8002294:	4603      	mov	r3, r0
}
 8002296:	4618      	mov	r0, r3
 8002298:	3708      	adds	r7, #8
 800229a:	46bd      	mov	sp, r7
 800229c:	bd80      	pop	{r7, pc}
 800229e:	bf00      	nop

080022a0 <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 80022a0:	b580      	push	{r7, lr}
 80022a2:	b086      	sub	sp, #24
 80022a4:	af00      	add	r7, sp, #0
 80022a6:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80022ae:	693b      	ldr	r3, [r7, #16]
 80022b0:	60fb      	str	r3, [r7, #12]
  uint32_t i, interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	4618      	mov	r0, r3
 80022b8:	f003 f8c7 	bl	800544a <USB_GetMode>
 80022bc:	4603      	mov	r3, r0
 80022be:	2b01      	cmp	r3, #1
 80022c0:	f040 80f1 	bne.w	80024a6 <HAL_HCD_IRQHandler+0x206>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	4618      	mov	r0, r3
 80022ca:	f003 f8ab 	bl	8005424 <USB_ReadInterrupts>
 80022ce:	4603      	mov	r3, r0
 80022d0:	2b00      	cmp	r3, #0
 80022d2:	f000 80e7 	beq.w	80024a4 <HAL_HCD_IRQHandler+0x204>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	4618      	mov	r0, r3
 80022dc:	f003 f8a2 	bl	8005424 <USB_ReadInterrupts>
 80022e0:	4603      	mov	r3, r0
 80022e2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80022e6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80022ea:	d104      	bne.n	80022f6 <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 80022f4:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	4618      	mov	r0, r3
 80022fc:	f003 f892 	bl	8005424 <USB_ReadInterrupts>
 8002300:	4603      	mov	r3, r0
 8002302:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002306:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800230a:	d104      	bne.n	8002316 <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8002314:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	4618      	mov	r0, r3
 800231c:	f003 f882 	bl	8005424 <USB_ReadInterrupts>
 8002320:	4603      	mov	r3, r0
 8002322:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002326:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800232a:	d104      	bne.n	8002336 <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8002334:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	4618      	mov	r0, r3
 800233c:	f003 f872 	bl	8005424 <USB_ReadInterrupts>
 8002340:	4603      	mov	r3, r0
 8002342:	f003 0302 	and.w	r3, r3, #2
 8002346:	2b02      	cmp	r3, #2
 8002348:	d103      	bne.n	8002352 <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	2202      	movs	r2, #2
 8002350:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	4618      	mov	r0, r3
 8002358:	f003 f864 	bl	8005424 <USB_ReadInterrupts>
 800235c:	4603      	mov	r3, r0
 800235e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002362:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002366:	d117      	bne.n	8002398 <HAL_HCD_IRQHandler+0xf8>
    {

      /* Cleanup HPRT */
      USBx_HPRT0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8002368:	68fb      	ldr	r3, [r7, #12]
 800236a:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	68fa      	ldr	r2, [r7, #12]
 8002372:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8002376:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 800237a:	6013      	str	r3, [r2, #0]

      /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->DisconnectCallback(hhcd);
#else
      HAL_HCD_Disconnect_Callback(hhcd);
 800237c:	6878      	ldr	r0, [r7, #4]
 800237e:	f004 ff21 	bl	80071c4 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	2101      	movs	r1, #1
 8002388:	4618      	mov	r0, r3
 800238a:	f003 f95d 	bl	8005648 <USB_InitFSLSPClkSel>
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8002396:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	4618      	mov	r0, r3
 800239e:	f003 f841 	bl	8005424 <USB_ReadInterrupts>
 80023a2:	4603      	mov	r3, r0
 80023a4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80023a8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80023ac:	d102      	bne.n	80023b4 <HAL_HCD_IRQHandler+0x114>
    {
      HCD_Port_IRQHandler(hhcd);
 80023ae:	6878      	ldr	r0, [r7, #4]
 80023b0:	f001 f8ac 	bl	800350c <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	4618      	mov	r0, r3
 80023ba:	f003 f833 	bl	8005424 <USB_ReadInterrupts>
 80023be:	4603      	mov	r3, r0
 80023c0:	f003 0308 	and.w	r3, r3, #8
 80023c4:	2b08      	cmp	r3, #8
 80023c6:	d106      	bne.n	80023d6 <HAL_HCD_IRQHandler+0x136>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 80023c8:	6878      	ldr	r0, [r7, #4]
 80023ca:	f004 fedf 	bl	800718c <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	2208      	movs	r2, #8
 80023d4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	4618      	mov	r0, r3
 80023dc:	f003 f822 	bl	8005424 <USB_ReadInterrupts>
 80023e0:	4603      	mov	r3, r0
 80023e2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80023e6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80023ea:	d138      	bne.n	800245e <HAL_HCD_IRQHandler+0x1be>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	4618      	mov	r0, r3
 80023f2:	f003 fbfb 	bl	8005bec <USB_HC_ReadInterrupt>
 80023f6:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 80023f8:	2300      	movs	r3, #0
 80023fa:	617b      	str	r3, [r7, #20]
 80023fc:	e025      	b.n	800244a <HAL_HCD_IRQHandler+0x1aa>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 80023fe:	697b      	ldr	r3, [r7, #20]
 8002400:	f003 030f 	and.w	r3, r3, #15
 8002404:	68ba      	ldr	r2, [r7, #8]
 8002406:	fa22 f303 	lsr.w	r3, r2, r3
 800240a:	f003 0301 	and.w	r3, r3, #1
 800240e:	2b00      	cmp	r3, #0
 8002410:	d018      	beq.n	8002444 <HAL_HCD_IRQHandler+0x1a4>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 8002412:	697b      	ldr	r3, [r7, #20]
 8002414:	015a      	lsls	r2, r3, #5
 8002416:	68fb      	ldr	r3, [r7, #12]
 8002418:	4413      	add	r3, r2
 800241a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002424:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002428:	d106      	bne.n	8002438 <HAL_HCD_IRQHandler+0x198>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 800242a:	697b      	ldr	r3, [r7, #20]
 800242c:	b2db      	uxtb	r3, r3
 800242e:	4619      	mov	r1, r3
 8002430:	6878      	ldr	r0, [r7, #4]
 8002432:	f000 f8b3 	bl	800259c <HCD_HC_IN_IRQHandler>
 8002436:	e005      	b.n	8002444 <HAL_HCD_IRQHandler+0x1a4>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 8002438:	697b      	ldr	r3, [r7, #20]
 800243a:	b2db      	uxtb	r3, r3
 800243c:	4619      	mov	r1, r3
 800243e:	6878      	ldr	r0, [r7, #4]
 8002440:	f000 fc43 	bl	8002cca <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8002444:	697b      	ldr	r3, [r7, #20]
 8002446:	3301      	adds	r3, #1
 8002448:	617b      	str	r3, [r7, #20]
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	689b      	ldr	r3, [r3, #8]
 800244e:	697a      	ldr	r2, [r7, #20]
 8002450:	429a      	cmp	r2, r3
 8002452:	d3d4      	bcc.n	80023fe <HAL_HCD_IRQHandler+0x15e>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800245c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	4618      	mov	r0, r3
 8002464:	f002 ffde 	bl	8005424 <USB_ReadInterrupts>
 8002468:	4603      	mov	r3, r0
 800246a:	f003 0310 	and.w	r3, r3, #16
 800246e:	2b10      	cmp	r3, #16
 8002470:	d101      	bne.n	8002476 <HAL_HCD_IRQHandler+0x1d6>
 8002472:	2301      	movs	r3, #1
 8002474:	e000      	b.n	8002478 <HAL_HCD_IRQHandler+0x1d8>
 8002476:	2300      	movs	r3, #0
 8002478:	2b00      	cmp	r3, #0
 800247a:	d014      	beq.n	80024a6 <HAL_HCD_IRQHandler+0x206>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	699a      	ldr	r2, [r3, #24]
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	f022 0210 	bic.w	r2, r2, #16
 800248a:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 800248c:	6878      	ldr	r0, [r7, #4]
 800248e:	f000 ff91 	bl	80033b4 <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	699a      	ldr	r2, [r3, #24]
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	f042 0210 	orr.w	r2, r2, #16
 80024a0:	619a      	str	r2, [r3, #24]
 80024a2:	e000      	b.n	80024a6 <HAL_HCD_IRQHandler+0x206>
      return;
 80024a4:	bf00      	nop
    }
  }
}
 80024a6:	3718      	adds	r7, #24
 80024a8:	46bd      	mov	sp, r7
 80024aa:	bd80      	pop	{r7, pc}

080024ac <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 80024ac:	b580      	push	{r7, lr}
 80024ae:	b082      	sub	sp, #8
 80024b0:	af00      	add	r7, sp, #0
 80024b2:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 80024ba:	2b01      	cmp	r3, #1
 80024bc:	d101      	bne.n	80024c2 <HAL_HCD_Start+0x16>
 80024be:	2302      	movs	r3, #2
 80024c0:	e013      	b.n	80024ea <HAL_HCD_Start+0x3e>
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	2201      	movs	r2, #1
 80024c6:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  __HAL_HCD_ENABLE(hhcd);
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	4618      	mov	r0, r3
 80024d0:	f002 feb5 	bl	800523e <USB_EnableGlobalInt>
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	2101      	movs	r1, #1
 80024da:	4618      	mov	r0, r3
 80024dc:	f003 f8ee 	bl	80056bc <USB_DriveVbus>
  __HAL_UNLOCK(hhcd);
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	2200      	movs	r2, #0
 80024e4:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  return HAL_OK;
 80024e8:	2300      	movs	r3, #0
}
 80024ea:	4618      	mov	r0, r3
 80024ec:	3708      	adds	r7, #8
 80024ee:	46bd      	mov	sp, r7
 80024f0:	bd80      	pop	{r7, pc}

080024f2 <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 80024f2:	b580      	push	{r7, lr}
 80024f4:	b082      	sub	sp, #8
 80024f6:	af00      	add	r7, sp, #0
 80024f8:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 8002500:	2b01      	cmp	r3, #1
 8002502:	d101      	bne.n	8002508 <HAL_HCD_Stop+0x16>
 8002504:	2302      	movs	r3, #2
 8002506:	e00d      	b.n	8002524 <HAL_HCD_Stop+0x32>
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	2201      	movs	r2, #1
 800250c:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  (void)USB_StopHost(hhcd->Instance);
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	4618      	mov	r0, r3
 8002516:	f003 fcb5 	bl	8005e84 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	2200      	movs	r2, #0
 800251e:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  return HAL_OK;
 8002522:	2300      	movs	r3, #0
}
 8002524:	4618      	mov	r0, r3
 8002526:	3708      	adds	r7, #8
 8002528:	46bd      	mov	sp, r7
 800252a:	bd80      	pop	{r7, pc}

0800252c <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 800252c:	b480      	push	{r7}
 800252e:	b083      	sub	sp, #12
 8002530:	af00      	add	r7, sp, #0
 8002532:	6078      	str	r0, [r7, #4]
 8002534:	460b      	mov	r3, r1
 8002536:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 8002538:	78fa      	ldrb	r2, [r7, #3]
 800253a:	6879      	ldr	r1, [r7, #4]
 800253c:	4613      	mov	r3, r2
 800253e:	009b      	lsls	r3, r3, #2
 8002540:	4413      	add	r3, r2
 8002542:	00db      	lsls	r3, r3, #3
 8002544:	440b      	add	r3, r1
 8002546:	335c      	adds	r3, #92	; 0x5c
 8002548:	781b      	ldrb	r3, [r3, #0]
}
 800254a:	4618      	mov	r0, r3
 800254c:	370c      	adds	r7, #12
 800254e:	46bd      	mov	sp, r7
 8002550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002554:	4770      	bx	lr

08002556 <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8002556:	b480      	push	{r7}
 8002558:	b083      	sub	sp, #12
 800255a:	af00      	add	r7, sp, #0
 800255c:	6078      	str	r0, [r7, #4]
 800255e:	460b      	mov	r3, r1
 8002560:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 8002562:	78fa      	ldrb	r2, [r7, #3]
 8002564:	6879      	ldr	r1, [r7, #4]
 8002566:	4613      	mov	r3, r2
 8002568:	009b      	lsls	r3, r3, #2
 800256a:	4413      	add	r3, r2
 800256c:	00db      	lsls	r3, r3, #3
 800256e:	440b      	add	r3, r1
 8002570:	334c      	adds	r3, #76	; 0x4c
 8002572:	681b      	ldr	r3, [r3, #0]
}
 8002574:	4618      	mov	r0, r3
 8002576:	370c      	adds	r7, #12
 8002578:	46bd      	mov	sp, r7
 800257a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800257e:	4770      	bx	lr

08002580 <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 8002580:	b580      	push	{r7, lr}
 8002582:	b082      	sub	sp, #8
 8002584:	af00      	add	r7, sp, #0
 8002586:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	4618      	mov	r0, r3
 800258e:	f003 f8ce 	bl	800572e <USB_GetCurrentFrame>
 8002592:	4603      	mov	r3, r0
}
 8002594:	4618      	mov	r0, r3
 8002596:	3708      	adds	r7, #8
 8002598:	46bd      	mov	sp, r7
 800259a:	bd80      	pop	{r7, pc}

0800259c <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 800259c:	b580      	push	{r7, lr}
 800259e:	b086      	sub	sp, #24
 80025a0:	af00      	add	r7, sp, #0
 80025a2:	6078      	str	r0, [r7, #4]
 80025a4:	460b      	mov	r3, r1
 80025a6:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80025ae:	697b      	ldr	r3, [r7, #20]
 80025b0:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 80025b2:	78fb      	ldrb	r3, [r7, #3]
 80025b4:	60fb      	str	r3, [r7, #12]

  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 80025b6:	68fb      	ldr	r3, [r7, #12]
 80025b8:	015a      	lsls	r2, r3, #5
 80025ba:	693b      	ldr	r3, [r7, #16]
 80025bc:	4413      	add	r3, r2
 80025be:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80025c2:	689b      	ldr	r3, [r3, #8]
 80025c4:	f003 0304 	and.w	r3, r3, #4
 80025c8:	2b04      	cmp	r3, #4
 80025ca:	d119      	bne.n	8002600 <HCD_HC_IN_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 80025cc:	68fb      	ldr	r3, [r7, #12]
 80025ce:	015a      	lsls	r2, r3, #5
 80025d0:	693b      	ldr	r3, [r7, #16]
 80025d2:	4413      	add	r3, r2
 80025d4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80025d8:	461a      	mov	r2, r3
 80025da:	2304      	movs	r3, #4
 80025dc:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80025de:	68fb      	ldr	r3, [r7, #12]
 80025e0:	015a      	lsls	r2, r3, #5
 80025e2:	693b      	ldr	r3, [r7, #16]
 80025e4:	4413      	add	r3, r2
 80025e6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80025ea:	68db      	ldr	r3, [r3, #12]
 80025ec:	68fa      	ldr	r2, [r7, #12]
 80025ee:	0151      	lsls	r1, r2, #5
 80025f0:	693a      	ldr	r2, [r7, #16]
 80025f2:	440a      	add	r2, r1
 80025f4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80025f8:	f043 0302 	orr.w	r3, r3, #2
 80025fc:	60d3      	str	r3, [r2, #12]
 80025fe:	e095      	b.n	800272c <HCD_HC_IN_IRQHandler+0x190>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8002600:	68fb      	ldr	r3, [r7, #12]
 8002602:	015a      	lsls	r2, r3, #5
 8002604:	693b      	ldr	r3, [r7, #16]
 8002606:	4413      	add	r3, r2
 8002608:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800260c:	689b      	ldr	r3, [r3, #8]
 800260e:	f003 0320 	and.w	r3, r3, #32
 8002612:	2b20      	cmp	r3, #32
 8002614:	d109      	bne.n	800262a <HCD_HC_IN_IRQHandler+0x8e>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8002616:	68fb      	ldr	r3, [r7, #12]
 8002618:	015a      	lsls	r2, r3, #5
 800261a:	693b      	ldr	r3, [r7, #16]
 800261c:	4413      	add	r3, r2
 800261e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002622:	461a      	mov	r2, r3
 8002624:	2320      	movs	r3, #32
 8002626:	6093      	str	r3, [r2, #8]
 8002628:	e080      	b.n	800272c <HCD_HC_IN_IRQHandler+0x190>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 800262a:	68fb      	ldr	r3, [r7, #12]
 800262c:	015a      	lsls	r2, r3, #5
 800262e:	693b      	ldr	r3, [r7, #16]
 8002630:	4413      	add	r3, r2
 8002632:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002636:	689b      	ldr	r3, [r3, #8]
 8002638:	f003 0308 	and.w	r3, r3, #8
 800263c:	2b08      	cmp	r3, #8
 800263e:	d134      	bne.n	80026aa <HCD_HC_IN_IRQHandler+0x10e>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002640:	68fb      	ldr	r3, [r7, #12]
 8002642:	015a      	lsls	r2, r3, #5
 8002644:	693b      	ldr	r3, [r7, #16]
 8002646:	4413      	add	r3, r2
 8002648:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800264c:	68db      	ldr	r3, [r3, #12]
 800264e:	68fa      	ldr	r2, [r7, #12]
 8002650:	0151      	lsls	r1, r2, #5
 8002652:	693a      	ldr	r2, [r7, #16]
 8002654:	440a      	add	r2, r1
 8002656:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800265a:	f043 0302 	orr.w	r3, r3, #2
 800265e:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_STALL;
 8002660:	6879      	ldr	r1, [r7, #4]
 8002662:	68fa      	ldr	r2, [r7, #12]
 8002664:	4613      	mov	r3, r2
 8002666:	009b      	lsls	r3, r3, #2
 8002668:	4413      	add	r3, r2
 800266a:	00db      	lsls	r3, r3, #3
 800266c:	440b      	add	r3, r1
 800266e:	335d      	adds	r3, #93	; 0x5d
 8002670:	2205      	movs	r2, #5
 8002672:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8002674:	68fb      	ldr	r3, [r7, #12]
 8002676:	015a      	lsls	r2, r3, #5
 8002678:	693b      	ldr	r3, [r7, #16]
 800267a:	4413      	add	r3, r2
 800267c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002680:	461a      	mov	r2, r3
 8002682:	2310      	movs	r3, #16
 8002684:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8002686:	68fb      	ldr	r3, [r7, #12]
 8002688:	015a      	lsls	r2, r3, #5
 800268a:	693b      	ldr	r3, [r7, #16]
 800268c:	4413      	add	r3, r2
 800268e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002692:	461a      	mov	r2, r3
 8002694:	2308      	movs	r3, #8
 8002696:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	68fa      	ldr	r2, [r7, #12]
 800269e:	b2d2      	uxtb	r2, r2
 80026a0:	4611      	mov	r1, r2
 80026a2:	4618      	mov	r0, r3
 80026a4:	f003 fab3 	bl	8005c0e <USB_HC_Halt>
 80026a8:	e040      	b.n	800272c <HCD_HC_IN_IRQHandler+0x190>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 80026aa:	68fb      	ldr	r3, [r7, #12]
 80026ac:	015a      	lsls	r2, r3, #5
 80026ae:	693b      	ldr	r3, [r7, #16]
 80026b0:	4413      	add	r3, r2
 80026b2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80026b6:	689b      	ldr	r3, [r3, #8]
 80026b8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80026bc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80026c0:	d134      	bne.n	800272c <HCD_HC_IN_IRQHandler+0x190>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80026c2:	68fb      	ldr	r3, [r7, #12]
 80026c4:	015a      	lsls	r2, r3, #5
 80026c6:	693b      	ldr	r3, [r7, #16]
 80026c8:	4413      	add	r3, r2
 80026ca:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80026ce:	68db      	ldr	r3, [r3, #12]
 80026d0:	68fa      	ldr	r2, [r7, #12]
 80026d2:	0151      	lsls	r1, r2, #5
 80026d4:	693a      	ldr	r2, [r7, #16]
 80026d6:	440a      	add	r2, r1
 80026d8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80026dc:	f043 0302 	orr.w	r3, r3, #2
 80026e0:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	68fa      	ldr	r2, [r7, #12]
 80026e8:	b2d2      	uxtb	r2, r2
 80026ea:	4611      	mov	r1, r2
 80026ec:	4618      	mov	r0, r3
 80026ee:	f003 fa8e 	bl	8005c0e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80026f2:	68fb      	ldr	r3, [r7, #12]
 80026f4:	015a      	lsls	r2, r3, #5
 80026f6:	693b      	ldr	r3, [r7, #16]
 80026f8:	4413      	add	r3, r2
 80026fa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80026fe:	461a      	mov	r2, r3
 8002700:	2310      	movs	r3, #16
 8002702:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8002704:	6879      	ldr	r1, [r7, #4]
 8002706:	68fa      	ldr	r2, [r7, #12]
 8002708:	4613      	mov	r3, r2
 800270a:	009b      	lsls	r3, r3, #2
 800270c:	4413      	add	r3, r2
 800270e:	00db      	lsls	r3, r3, #3
 8002710:	440b      	add	r3, r1
 8002712:	335d      	adds	r3, #93	; 0x5d
 8002714:	2208      	movs	r2, #8
 8002716:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8002718:	68fb      	ldr	r3, [r7, #12]
 800271a:	015a      	lsls	r2, r3, #5
 800271c:	693b      	ldr	r3, [r7, #16]
 800271e:	4413      	add	r3, r2
 8002720:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002724:	461a      	mov	r2, r3
 8002726:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800272a:	6093      	str	r3, [r2, #8]
  else
  {
    /* ... */
  }

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 800272c:	68fb      	ldr	r3, [r7, #12]
 800272e:	015a      	lsls	r2, r3, #5
 8002730:	693b      	ldr	r3, [r7, #16]
 8002732:	4413      	add	r3, r2
 8002734:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002738:	689b      	ldr	r3, [r3, #8]
 800273a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800273e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002742:	d122      	bne.n	800278a <HCD_HC_IN_IRQHandler+0x1ee>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002744:	68fb      	ldr	r3, [r7, #12]
 8002746:	015a      	lsls	r2, r3, #5
 8002748:	693b      	ldr	r3, [r7, #16]
 800274a:	4413      	add	r3, r2
 800274c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002750:	68db      	ldr	r3, [r3, #12]
 8002752:	68fa      	ldr	r2, [r7, #12]
 8002754:	0151      	lsls	r1, r2, #5
 8002756:	693a      	ldr	r2, [r7, #16]
 8002758:	440a      	add	r2, r1
 800275a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800275e:	f043 0302 	orr.w	r3, r3, #2
 8002762:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	68fa      	ldr	r2, [r7, #12]
 800276a:	b2d2      	uxtb	r2, r2
 800276c:	4611      	mov	r1, r2
 800276e:	4618      	mov	r0, r3
 8002770:	f003 fa4d 	bl	8005c0e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8002774:	68fb      	ldr	r3, [r7, #12]
 8002776:	015a      	lsls	r2, r3, #5
 8002778:	693b      	ldr	r3, [r7, #16]
 800277a:	4413      	add	r3, r2
 800277c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002780:	461a      	mov	r2, r3
 8002782:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002786:	6093      	str	r3, [r2, #8]
  }
  else
  {
    /* ... */
  }
}
 8002788:	e29b      	b.n	8002cc2 <HCD_HC_IN_IRQHandler+0x726>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 800278a:	68fb      	ldr	r3, [r7, #12]
 800278c:	015a      	lsls	r2, r3, #5
 800278e:	693b      	ldr	r3, [r7, #16]
 8002790:	4413      	add	r3, r2
 8002792:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002796:	689b      	ldr	r3, [r3, #8]
 8002798:	f003 0301 	and.w	r3, r3, #1
 800279c:	2b01      	cmp	r3, #1
 800279e:	f040 80c1 	bne.w	8002924 <HCD_HC_IN_IRQHandler+0x388>
    if (hhcd->Init.dma_enable != 0U)
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	691b      	ldr	r3, [r3, #16]
 80027a6:	2b00      	cmp	r3, #0
 80027a8:	d01b      	beq.n	80027e2 <HCD_HC_IN_IRQHandler+0x246>
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].xfer_len - \
 80027aa:	6879      	ldr	r1, [r7, #4]
 80027ac:	68fa      	ldr	r2, [r7, #12]
 80027ae:	4613      	mov	r3, r2
 80027b0:	009b      	lsls	r3, r3, #2
 80027b2:	4413      	add	r3, r2
 80027b4:	00db      	lsls	r3, r3, #3
 80027b6:	440b      	add	r3, r1
 80027b8:	3348      	adds	r3, #72	; 0x48
 80027ba:	681a      	ldr	r2, [r3, #0]
                                    (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 80027bc:	68fb      	ldr	r3, [r7, #12]
 80027be:	0159      	lsls	r1, r3, #5
 80027c0:	693b      	ldr	r3, [r7, #16]
 80027c2:	440b      	add	r3, r1
 80027c4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80027c8:	691b      	ldr	r3, [r3, #16]
 80027ca:	f3c3 0312 	ubfx	r3, r3, #0, #19
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].xfer_len - \
 80027ce:	1ad1      	subs	r1, r2, r3
 80027d0:	6878      	ldr	r0, [r7, #4]
 80027d2:	68fa      	ldr	r2, [r7, #12]
 80027d4:	4613      	mov	r3, r2
 80027d6:	009b      	lsls	r3, r3, #2
 80027d8:	4413      	add	r3, r2
 80027da:	00db      	lsls	r3, r3, #3
 80027dc:	4403      	add	r3, r0
 80027de:	334c      	adds	r3, #76	; 0x4c
 80027e0:	6019      	str	r1, [r3, #0]
    hhcd->hc[ch_num].state = HC_XFRC;
 80027e2:	6879      	ldr	r1, [r7, #4]
 80027e4:	68fa      	ldr	r2, [r7, #12]
 80027e6:	4613      	mov	r3, r2
 80027e8:	009b      	lsls	r3, r3, #2
 80027ea:	4413      	add	r3, r2
 80027ec:	00db      	lsls	r3, r3, #3
 80027ee:	440b      	add	r3, r1
 80027f0:	335d      	adds	r3, #93	; 0x5d
 80027f2:	2201      	movs	r2, #1
 80027f4:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 80027f6:	6879      	ldr	r1, [r7, #4]
 80027f8:	68fa      	ldr	r2, [r7, #12]
 80027fa:	4613      	mov	r3, r2
 80027fc:	009b      	lsls	r3, r3, #2
 80027fe:	4413      	add	r3, r2
 8002800:	00db      	lsls	r3, r3, #3
 8002802:	440b      	add	r3, r1
 8002804:	3358      	adds	r3, #88	; 0x58
 8002806:	2200      	movs	r2, #0
 8002808:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 800280a:	68fb      	ldr	r3, [r7, #12]
 800280c:	015a      	lsls	r2, r3, #5
 800280e:	693b      	ldr	r3, [r7, #16]
 8002810:	4413      	add	r3, r2
 8002812:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002816:	461a      	mov	r2, r3
 8002818:	2301      	movs	r3, #1
 800281a:	6093      	str	r3, [r2, #8]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 800281c:	6879      	ldr	r1, [r7, #4]
 800281e:	68fa      	ldr	r2, [r7, #12]
 8002820:	4613      	mov	r3, r2
 8002822:	009b      	lsls	r3, r3, #2
 8002824:	4413      	add	r3, r2
 8002826:	00db      	lsls	r3, r3, #3
 8002828:	440b      	add	r3, r1
 800282a:	333f      	adds	r3, #63	; 0x3f
 800282c:	781b      	ldrb	r3, [r3, #0]
 800282e:	2b00      	cmp	r3, #0
 8002830:	d00a      	beq.n	8002848 <HCD_HC_IN_IRQHandler+0x2ac>
        (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8002832:	6879      	ldr	r1, [r7, #4]
 8002834:	68fa      	ldr	r2, [r7, #12]
 8002836:	4613      	mov	r3, r2
 8002838:	009b      	lsls	r3, r3, #2
 800283a:	4413      	add	r3, r2
 800283c:	00db      	lsls	r3, r3, #3
 800283e:	440b      	add	r3, r1
 8002840:	333f      	adds	r3, #63	; 0x3f
 8002842:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8002844:	2b02      	cmp	r3, #2
 8002846:	d121      	bne.n	800288c <HCD_HC_IN_IRQHandler+0x2f0>
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002848:	68fb      	ldr	r3, [r7, #12]
 800284a:	015a      	lsls	r2, r3, #5
 800284c:	693b      	ldr	r3, [r7, #16]
 800284e:	4413      	add	r3, r2
 8002850:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002854:	68db      	ldr	r3, [r3, #12]
 8002856:	68fa      	ldr	r2, [r7, #12]
 8002858:	0151      	lsls	r1, r2, #5
 800285a:	693a      	ldr	r2, [r7, #16]
 800285c:	440a      	add	r2, r1
 800285e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002862:	f043 0302 	orr.w	r3, r3, #2
 8002866:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	68fa      	ldr	r2, [r7, #12]
 800286e:	b2d2      	uxtb	r2, r2
 8002870:	4611      	mov	r1, r2
 8002872:	4618      	mov	r0, r3
 8002874:	f003 f9cb 	bl	8005c0e <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8002878:	68fb      	ldr	r3, [r7, #12]
 800287a:	015a      	lsls	r2, r3, #5
 800287c:	693b      	ldr	r3, [r7, #16]
 800287e:	4413      	add	r3, r2
 8002880:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002884:	461a      	mov	r2, r3
 8002886:	2310      	movs	r3, #16
 8002888:	6093      	str	r3, [r2, #8]
 800288a:	e034      	b.n	80028f6 <HCD_HC_IN_IRQHandler+0x35a>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 800288c:	6879      	ldr	r1, [r7, #4]
 800288e:	68fa      	ldr	r2, [r7, #12]
 8002890:	4613      	mov	r3, r2
 8002892:	009b      	lsls	r3, r3, #2
 8002894:	4413      	add	r3, r2
 8002896:	00db      	lsls	r3, r3, #3
 8002898:	440b      	add	r3, r1
 800289a:	333f      	adds	r3, #63	; 0x3f
 800289c:	781b      	ldrb	r3, [r3, #0]
 800289e:	2b03      	cmp	r3, #3
 80028a0:	d129      	bne.n	80028f6 <HCD_HC_IN_IRQHandler+0x35a>
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 80028a2:	68fb      	ldr	r3, [r7, #12]
 80028a4:	015a      	lsls	r2, r3, #5
 80028a6:	693b      	ldr	r3, [r7, #16]
 80028a8:	4413      	add	r3, r2
 80028aa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	68fa      	ldr	r2, [r7, #12]
 80028b2:	0151      	lsls	r1, r2, #5
 80028b4:	693a      	ldr	r2, [r7, #16]
 80028b6:	440a      	add	r2, r1
 80028b8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80028bc:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80028c0:	6013      	str	r3, [r2, #0]
      hhcd->hc[ch_num].urb_state = URB_DONE;
 80028c2:	6879      	ldr	r1, [r7, #4]
 80028c4:	68fa      	ldr	r2, [r7, #12]
 80028c6:	4613      	mov	r3, r2
 80028c8:	009b      	lsls	r3, r3, #2
 80028ca:	4413      	add	r3, r2
 80028cc:	00db      	lsls	r3, r3, #3
 80028ce:	440b      	add	r3, r1
 80028d0:	335c      	adds	r3, #92	; 0x5c
 80028d2:	2201      	movs	r2, #1
 80028d4:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 80028d6:	68fb      	ldr	r3, [r7, #12]
 80028d8:	b2d8      	uxtb	r0, r3
 80028da:	6879      	ldr	r1, [r7, #4]
 80028dc:	68fa      	ldr	r2, [r7, #12]
 80028de:	4613      	mov	r3, r2
 80028e0:	009b      	lsls	r3, r3, #2
 80028e2:	4413      	add	r3, r2
 80028e4:	00db      	lsls	r3, r3, #3
 80028e6:	440b      	add	r3, r1
 80028e8:	335c      	adds	r3, #92	; 0x5c
 80028ea:	781b      	ldrb	r3, [r3, #0]
 80028ec:	461a      	mov	r2, r3
 80028ee:	4601      	mov	r1, r0
 80028f0:	6878      	ldr	r0, [r7, #4]
 80028f2:	f004 fc75 	bl	80071e0 <HAL_HCD_HC_NotifyURBChange_Callback>
    hhcd->hc[ch_num].toggle_in ^= 1U;
 80028f6:	6879      	ldr	r1, [r7, #4]
 80028f8:	68fa      	ldr	r2, [r7, #12]
 80028fa:	4613      	mov	r3, r2
 80028fc:	009b      	lsls	r3, r3, #2
 80028fe:	4413      	add	r3, r2
 8002900:	00db      	lsls	r3, r3, #3
 8002902:	440b      	add	r3, r1
 8002904:	3350      	adds	r3, #80	; 0x50
 8002906:	781b      	ldrb	r3, [r3, #0]
 8002908:	f083 0301 	eor.w	r3, r3, #1
 800290c:	b2d8      	uxtb	r0, r3
 800290e:	6879      	ldr	r1, [r7, #4]
 8002910:	68fa      	ldr	r2, [r7, #12]
 8002912:	4613      	mov	r3, r2
 8002914:	009b      	lsls	r3, r3, #2
 8002916:	4413      	add	r3, r2
 8002918:	00db      	lsls	r3, r3, #3
 800291a:	440b      	add	r3, r1
 800291c:	3350      	adds	r3, #80	; 0x50
 800291e:	4602      	mov	r2, r0
 8002920:	701a      	strb	r2, [r3, #0]
}
 8002922:	e1ce      	b.n	8002cc2 <HCD_HC_IN_IRQHandler+0x726>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8002924:	68fb      	ldr	r3, [r7, #12]
 8002926:	015a      	lsls	r2, r3, #5
 8002928:	693b      	ldr	r3, [r7, #16]
 800292a:	4413      	add	r3, r2
 800292c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002930:	689b      	ldr	r3, [r3, #8]
 8002932:	f003 0302 	and.w	r3, r3, #2
 8002936:	2b02      	cmp	r3, #2
 8002938:	f040 80f1 	bne.w	8002b1e <HCD_HC_IN_IRQHandler+0x582>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 800293c:	68fb      	ldr	r3, [r7, #12]
 800293e:	015a      	lsls	r2, r3, #5
 8002940:	693b      	ldr	r3, [r7, #16]
 8002942:	4413      	add	r3, r2
 8002944:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002948:	68db      	ldr	r3, [r3, #12]
 800294a:	68fa      	ldr	r2, [r7, #12]
 800294c:	0151      	lsls	r1, r2, #5
 800294e:	693a      	ldr	r2, [r7, #16]
 8002950:	440a      	add	r2, r1
 8002952:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002956:	f023 0302 	bic.w	r3, r3, #2
 800295a:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 800295c:	6879      	ldr	r1, [r7, #4]
 800295e:	68fa      	ldr	r2, [r7, #12]
 8002960:	4613      	mov	r3, r2
 8002962:	009b      	lsls	r3, r3, #2
 8002964:	4413      	add	r3, r2
 8002966:	00db      	lsls	r3, r3, #3
 8002968:	440b      	add	r3, r1
 800296a:	335d      	adds	r3, #93	; 0x5d
 800296c:	781b      	ldrb	r3, [r3, #0]
 800296e:	2b01      	cmp	r3, #1
 8002970:	d10a      	bne.n	8002988 <HCD_HC_IN_IRQHandler+0x3ec>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 8002972:	6879      	ldr	r1, [r7, #4]
 8002974:	68fa      	ldr	r2, [r7, #12]
 8002976:	4613      	mov	r3, r2
 8002978:	009b      	lsls	r3, r3, #2
 800297a:	4413      	add	r3, r2
 800297c:	00db      	lsls	r3, r3, #3
 800297e:	440b      	add	r3, r1
 8002980:	335c      	adds	r3, #92	; 0x5c
 8002982:	2201      	movs	r2, #1
 8002984:	701a      	strb	r2, [r3, #0]
 8002986:	e0b0      	b.n	8002aea <HCD_HC_IN_IRQHandler+0x54e>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8002988:	6879      	ldr	r1, [r7, #4]
 800298a:	68fa      	ldr	r2, [r7, #12]
 800298c:	4613      	mov	r3, r2
 800298e:	009b      	lsls	r3, r3, #2
 8002990:	4413      	add	r3, r2
 8002992:	00db      	lsls	r3, r3, #3
 8002994:	440b      	add	r3, r1
 8002996:	335d      	adds	r3, #93	; 0x5d
 8002998:	781b      	ldrb	r3, [r3, #0]
 800299a:	2b05      	cmp	r3, #5
 800299c:	d10a      	bne.n	80029b4 <HCD_HC_IN_IRQHandler+0x418>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 800299e:	6879      	ldr	r1, [r7, #4]
 80029a0:	68fa      	ldr	r2, [r7, #12]
 80029a2:	4613      	mov	r3, r2
 80029a4:	009b      	lsls	r3, r3, #2
 80029a6:	4413      	add	r3, r2
 80029a8:	00db      	lsls	r3, r3, #3
 80029aa:	440b      	add	r3, r1
 80029ac:	335c      	adds	r3, #92	; 0x5c
 80029ae:	2205      	movs	r2, #5
 80029b0:	701a      	strb	r2, [r3, #0]
 80029b2:	e09a      	b.n	8002aea <HCD_HC_IN_IRQHandler+0x54e>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 80029b4:	6879      	ldr	r1, [r7, #4]
 80029b6:	68fa      	ldr	r2, [r7, #12]
 80029b8:	4613      	mov	r3, r2
 80029ba:	009b      	lsls	r3, r3, #2
 80029bc:	4413      	add	r3, r2
 80029be:	00db      	lsls	r3, r3, #3
 80029c0:	440b      	add	r3, r1
 80029c2:	335d      	adds	r3, #93	; 0x5d
 80029c4:	781b      	ldrb	r3, [r3, #0]
 80029c6:	2b06      	cmp	r3, #6
 80029c8:	d00a      	beq.n	80029e0 <HCD_HC_IN_IRQHandler+0x444>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 80029ca:	6879      	ldr	r1, [r7, #4]
 80029cc:	68fa      	ldr	r2, [r7, #12]
 80029ce:	4613      	mov	r3, r2
 80029d0:	009b      	lsls	r3, r3, #2
 80029d2:	4413      	add	r3, r2
 80029d4:	00db      	lsls	r3, r3, #3
 80029d6:	440b      	add	r3, r1
 80029d8:	335d      	adds	r3, #93	; 0x5d
 80029da:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 80029dc:	2b08      	cmp	r3, #8
 80029de:	d156      	bne.n	8002a8e <HCD_HC_IN_IRQHandler+0x4f2>
      hhcd->hc[ch_num].ErrCnt++;
 80029e0:	6879      	ldr	r1, [r7, #4]
 80029e2:	68fa      	ldr	r2, [r7, #12]
 80029e4:	4613      	mov	r3, r2
 80029e6:	009b      	lsls	r3, r3, #2
 80029e8:	4413      	add	r3, r2
 80029ea:	00db      	lsls	r3, r3, #3
 80029ec:	440b      	add	r3, r1
 80029ee:	3358      	adds	r3, #88	; 0x58
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	1c59      	adds	r1, r3, #1
 80029f4:	6878      	ldr	r0, [r7, #4]
 80029f6:	68fa      	ldr	r2, [r7, #12]
 80029f8:	4613      	mov	r3, r2
 80029fa:	009b      	lsls	r3, r3, #2
 80029fc:	4413      	add	r3, r2
 80029fe:	00db      	lsls	r3, r3, #3
 8002a00:	4403      	add	r3, r0
 8002a02:	3358      	adds	r3, #88	; 0x58
 8002a04:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 3U)
 8002a06:	6879      	ldr	r1, [r7, #4]
 8002a08:	68fa      	ldr	r2, [r7, #12]
 8002a0a:	4613      	mov	r3, r2
 8002a0c:	009b      	lsls	r3, r3, #2
 8002a0e:	4413      	add	r3, r2
 8002a10:	00db      	lsls	r3, r3, #3
 8002a12:	440b      	add	r3, r1
 8002a14:	3358      	adds	r3, #88	; 0x58
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	2b03      	cmp	r3, #3
 8002a1a:	d914      	bls.n	8002a46 <HCD_HC_IN_IRQHandler+0x4aa>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8002a1c:	6879      	ldr	r1, [r7, #4]
 8002a1e:	68fa      	ldr	r2, [r7, #12]
 8002a20:	4613      	mov	r3, r2
 8002a22:	009b      	lsls	r3, r3, #2
 8002a24:	4413      	add	r3, r2
 8002a26:	00db      	lsls	r3, r3, #3
 8002a28:	440b      	add	r3, r1
 8002a2a:	3358      	adds	r3, #88	; 0x58
 8002a2c:	2200      	movs	r2, #0
 8002a2e:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8002a30:	6879      	ldr	r1, [r7, #4]
 8002a32:	68fa      	ldr	r2, [r7, #12]
 8002a34:	4613      	mov	r3, r2
 8002a36:	009b      	lsls	r3, r3, #2
 8002a38:	4413      	add	r3, r2
 8002a3a:	00db      	lsls	r3, r3, #3
 8002a3c:	440b      	add	r3, r1
 8002a3e:	335c      	adds	r3, #92	; 0x5c
 8002a40:	2204      	movs	r2, #4
 8002a42:	701a      	strb	r2, [r3, #0]
 8002a44:	e009      	b.n	8002a5a <HCD_HC_IN_IRQHandler+0x4be>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8002a46:	6879      	ldr	r1, [r7, #4]
 8002a48:	68fa      	ldr	r2, [r7, #12]
 8002a4a:	4613      	mov	r3, r2
 8002a4c:	009b      	lsls	r3, r3, #2
 8002a4e:	4413      	add	r3, r2
 8002a50:	00db      	lsls	r3, r3, #3
 8002a52:	440b      	add	r3, r1
 8002a54:	335c      	adds	r3, #92	; 0x5c
 8002a56:	2202      	movs	r2, #2
 8002a58:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 8002a5a:	68fb      	ldr	r3, [r7, #12]
 8002a5c:	015a      	lsls	r2, r3, #5
 8002a5e:	693b      	ldr	r3, [r7, #16]
 8002a60:	4413      	add	r3, r2
 8002a62:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002a6a:	68bb      	ldr	r3, [r7, #8]
 8002a6c:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002a70:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002a72:	68bb      	ldr	r3, [r7, #8]
 8002a74:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002a78:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 8002a7a:	68fb      	ldr	r3, [r7, #12]
 8002a7c:	015a      	lsls	r2, r3, #5
 8002a7e:	693b      	ldr	r3, [r7, #16]
 8002a80:	4413      	add	r3, r2
 8002a82:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002a86:	461a      	mov	r2, r3
 8002a88:	68bb      	ldr	r3, [r7, #8]
 8002a8a:	6013      	str	r3, [r2, #0]
 8002a8c:	e02d      	b.n	8002aea <HCD_HC_IN_IRQHandler+0x54e>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8002a8e:	6879      	ldr	r1, [r7, #4]
 8002a90:	68fa      	ldr	r2, [r7, #12]
 8002a92:	4613      	mov	r3, r2
 8002a94:	009b      	lsls	r3, r3, #2
 8002a96:	4413      	add	r3, r2
 8002a98:	00db      	lsls	r3, r3, #3
 8002a9a:	440b      	add	r3, r1
 8002a9c:	335d      	adds	r3, #93	; 0x5d
 8002a9e:	781b      	ldrb	r3, [r3, #0]
 8002aa0:	2b03      	cmp	r3, #3
 8002aa2:	d122      	bne.n	8002aea <HCD_HC_IN_IRQHandler+0x54e>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8002aa4:	6879      	ldr	r1, [r7, #4]
 8002aa6:	68fa      	ldr	r2, [r7, #12]
 8002aa8:	4613      	mov	r3, r2
 8002aaa:	009b      	lsls	r3, r3, #2
 8002aac:	4413      	add	r3, r2
 8002aae:	00db      	lsls	r3, r3, #3
 8002ab0:	440b      	add	r3, r1
 8002ab2:	335c      	adds	r3, #92	; 0x5c
 8002ab4:	2202      	movs	r2, #2
 8002ab6:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 8002ab8:	68fb      	ldr	r3, [r7, #12]
 8002aba:	015a      	lsls	r2, r3, #5
 8002abc:	693b      	ldr	r3, [r7, #16]
 8002abe:	4413      	add	r3, r2
 8002ac0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002ac8:	68bb      	ldr	r3, [r7, #8]
 8002aca:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002ace:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002ad0:	68bb      	ldr	r3, [r7, #8]
 8002ad2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002ad6:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 8002ad8:	68fb      	ldr	r3, [r7, #12]
 8002ada:	015a      	lsls	r2, r3, #5
 8002adc:	693b      	ldr	r3, [r7, #16]
 8002ade:	4413      	add	r3, r2
 8002ae0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002ae4:	461a      	mov	r2, r3
 8002ae6:	68bb      	ldr	r3, [r7, #8]
 8002ae8:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8002aea:	68fb      	ldr	r3, [r7, #12]
 8002aec:	015a      	lsls	r2, r3, #5
 8002aee:	693b      	ldr	r3, [r7, #16]
 8002af0:	4413      	add	r3, r2
 8002af2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002af6:	461a      	mov	r2, r3
 8002af8:	2302      	movs	r3, #2
 8002afa:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8002afc:	68fb      	ldr	r3, [r7, #12]
 8002afe:	b2d8      	uxtb	r0, r3
 8002b00:	6879      	ldr	r1, [r7, #4]
 8002b02:	68fa      	ldr	r2, [r7, #12]
 8002b04:	4613      	mov	r3, r2
 8002b06:	009b      	lsls	r3, r3, #2
 8002b08:	4413      	add	r3, r2
 8002b0a:	00db      	lsls	r3, r3, #3
 8002b0c:	440b      	add	r3, r1
 8002b0e:	335c      	adds	r3, #92	; 0x5c
 8002b10:	781b      	ldrb	r3, [r3, #0]
 8002b12:	461a      	mov	r2, r3
 8002b14:	4601      	mov	r1, r0
 8002b16:	6878      	ldr	r0, [r7, #4]
 8002b18:	f004 fb62 	bl	80071e0 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8002b1c:	e0d1      	b.n	8002cc2 <HCD_HC_IN_IRQHandler+0x726>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8002b1e:	68fb      	ldr	r3, [r7, #12]
 8002b20:	015a      	lsls	r2, r3, #5
 8002b22:	693b      	ldr	r3, [r7, #16]
 8002b24:	4413      	add	r3, r2
 8002b26:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002b2a:	689b      	ldr	r3, [r3, #8]
 8002b2c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002b30:	2b80      	cmp	r3, #128	; 0x80
 8002b32:	d13e      	bne.n	8002bb2 <HCD_HC_IN_IRQHandler+0x616>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002b34:	68fb      	ldr	r3, [r7, #12]
 8002b36:	015a      	lsls	r2, r3, #5
 8002b38:	693b      	ldr	r3, [r7, #16]
 8002b3a:	4413      	add	r3, r2
 8002b3c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002b40:	68db      	ldr	r3, [r3, #12]
 8002b42:	68fa      	ldr	r2, [r7, #12]
 8002b44:	0151      	lsls	r1, r2, #5
 8002b46:	693a      	ldr	r2, [r7, #16]
 8002b48:	440a      	add	r2, r1
 8002b4a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002b4e:	f043 0302 	orr.w	r3, r3, #2
 8002b52:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].ErrCnt++;
 8002b54:	6879      	ldr	r1, [r7, #4]
 8002b56:	68fa      	ldr	r2, [r7, #12]
 8002b58:	4613      	mov	r3, r2
 8002b5a:	009b      	lsls	r3, r3, #2
 8002b5c:	4413      	add	r3, r2
 8002b5e:	00db      	lsls	r3, r3, #3
 8002b60:	440b      	add	r3, r1
 8002b62:	3358      	adds	r3, #88	; 0x58
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	1c59      	adds	r1, r3, #1
 8002b68:	6878      	ldr	r0, [r7, #4]
 8002b6a:	68fa      	ldr	r2, [r7, #12]
 8002b6c:	4613      	mov	r3, r2
 8002b6e:	009b      	lsls	r3, r3, #2
 8002b70:	4413      	add	r3, r2
 8002b72:	00db      	lsls	r3, r3, #3
 8002b74:	4403      	add	r3, r0
 8002b76:	3358      	adds	r3, #88	; 0x58
 8002b78:	6019      	str	r1, [r3, #0]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8002b7a:	6879      	ldr	r1, [r7, #4]
 8002b7c:	68fa      	ldr	r2, [r7, #12]
 8002b7e:	4613      	mov	r3, r2
 8002b80:	009b      	lsls	r3, r3, #2
 8002b82:	4413      	add	r3, r2
 8002b84:	00db      	lsls	r3, r3, #3
 8002b86:	440b      	add	r3, r1
 8002b88:	335d      	adds	r3, #93	; 0x5d
 8002b8a:	2206      	movs	r2, #6
 8002b8c:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	68fa      	ldr	r2, [r7, #12]
 8002b94:	b2d2      	uxtb	r2, r2
 8002b96:	4611      	mov	r1, r2
 8002b98:	4618      	mov	r0, r3
 8002b9a:	f003 f838 	bl	8005c0e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8002b9e:	68fb      	ldr	r3, [r7, #12]
 8002ba0:	015a      	lsls	r2, r3, #5
 8002ba2:	693b      	ldr	r3, [r7, #16]
 8002ba4:	4413      	add	r3, r2
 8002ba6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002baa:	461a      	mov	r2, r3
 8002bac:	2380      	movs	r3, #128	; 0x80
 8002bae:	6093      	str	r3, [r2, #8]
}
 8002bb0:	e087      	b.n	8002cc2 <HCD_HC_IN_IRQHandler+0x726>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8002bb2:	68fb      	ldr	r3, [r7, #12]
 8002bb4:	015a      	lsls	r2, r3, #5
 8002bb6:	693b      	ldr	r3, [r7, #16]
 8002bb8:	4413      	add	r3, r2
 8002bba:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002bbe:	689b      	ldr	r3, [r3, #8]
 8002bc0:	f003 0310 	and.w	r3, r3, #16
 8002bc4:	2b10      	cmp	r3, #16
 8002bc6:	d17c      	bne.n	8002cc2 <HCD_HC_IN_IRQHandler+0x726>
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 8002bc8:	6879      	ldr	r1, [r7, #4]
 8002bca:	68fa      	ldr	r2, [r7, #12]
 8002bcc:	4613      	mov	r3, r2
 8002bce:	009b      	lsls	r3, r3, #2
 8002bd0:	4413      	add	r3, r2
 8002bd2:	00db      	lsls	r3, r3, #3
 8002bd4:	440b      	add	r3, r1
 8002bd6:	333f      	adds	r3, #63	; 0x3f
 8002bd8:	781b      	ldrb	r3, [r3, #0]
 8002bda:	2b03      	cmp	r3, #3
 8002bdc:	d122      	bne.n	8002c24 <HCD_HC_IN_IRQHandler+0x688>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8002bde:	6879      	ldr	r1, [r7, #4]
 8002be0:	68fa      	ldr	r2, [r7, #12]
 8002be2:	4613      	mov	r3, r2
 8002be4:	009b      	lsls	r3, r3, #2
 8002be6:	4413      	add	r3, r2
 8002be8:	00db      	lsls	r3, r3, #3
 8002bea:	440b      	add	r3, r1
 8002bec:	3358      	adds	r3, #88	; 0x58
 8002bee:	2200      	movs	r2, #0
 8002bf0:	601a      	str	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002bf2:	68fb      	ldr	r3, [r7, #12]
 8002bf4:	015a      	lsls	r2, r3, #5
 8002bf6:	693b      	ldr	r3, [r7, #16]
 8002bf8:	4413      	add	r3, r2
 8002bfa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002bfe:	68db      	ldr	r3, [r3, #12]
 8002c00:	68fa      	ldr	r2, [r7, #12]
 8002c02:	0151      	lsls	r1, r2, #5
 8002c04:	693a      	ldr	r2, [r7, #16]
 8002c06:	440a      	add	r2, r1
 8002c08:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002c0c:	f043 0302 	orr.w	r3, r3, #2
 8002c10:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	68fa      	ldr	r2, [r7, #12]
 8002c18:	b2d2      	uxtb	r2, r2
 8002c1a:	4611      	mov	r1, r2
 8002c1c:	4618      	mov	r0, r3
 8002c1e:	f002 fff6 	bl	8005c0e <USB_HC_Halt>
 8002c22:	e045      	b.n	8002cb0 <HCD_HC_IN_IRQHandler+0x714>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8002c24:	6879      	ldr	r1, [r7, #4]
 8002c26:	68fa      	ldr	r2, [r7, #12]
 8002c28:	4613      	mov	r3, r2
 8002c2a:	009b      	lsls	r3, r3, #2
 8002c2c:	4413      	add	r3, r2
 8002c2e:	00db      	lsls	r3, r3, #3
 8002c30:	440b      	add	r3, r1
 8002c32:	333f      	adds	r3, #63	; 0x3f
 8002c34:	781b      	ldrb	r3, [r3, #0]
 8002c36:	2b00      	cmp	r3, #0
 8002c38:	d00a      	beq.n	8002c50 <HCD_HC_IN_IRQHandler+0x6b4>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8002c3a:	6879      	ldr	r1, [r7, #4]
 8002c3c:	68fa      	ldr	r2, [r7, #12]
 8002c3e:	4613      	mov	r3, r2
 8002c40:	009b      	lsls	r3, r3, #2
 8002c42:	4413      	add	r3, r2
 8002c44:	00db      	lsls	r3, r3, #3
 8002c46:	440b      	add	r3, r1
 8002c48:	333f      	adds	r3, #63	; 0x3f
 8002c4a:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8002c4c:	2b02      	cmp	r3, #2
 8002c4e:	d12f      	bne.n	8002cb0 <HCD_HC_IN_IRQHandler+0x714>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8002c50:	6879      	ldr	r1, [r7, #4]
 8002c52:	68fa      	ldr	r2, [r7, #12]
 8002c54:	4613      	mov	r3, r2
 8002c56:	009b      	lsls	r3, r3, #2
 8002c58:	4413      	add	r3, r2
 8002c5a:	00db      	lsls	r3, r3, #3
 8002c5c:	440b      	add	r3, r1
 8002c5e:	3358      	adds	r3, #88	; 0x58
 8002c60:	2200      	movs	r2, #0
 8002c62:	601a      	str	r2, [r3, #0]
      if (hhcd->Init.dma_enable == 0U)
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	691b      	ldr	r3, [r3, #16]
 8002c68:	2b00      	cmp	r3, #0
 8002c6a:	d121      	bne.n	8002cb0 <HCD_HC_IN_IRQHandler+0x714>
        hhcd->hc[ch_num].state = HC_NAK;
 8002c6c:	6879      	ldr	r1, [r7, #4]
 8002c6e:	68fa      	ldr	r2, [r7, #12]
 8002c70:	4613      	mov	r3, r2
 8002c72:	009b      	lsls	r3, r3, #2
 8002c74:	4413      	add	r3, r2
 8002c76:	00db      	lsls	r3, r3, #3
 8002c78:	440b      	add	r3, r1
 8002c7a:	335d      	adds	r3, #93	; 0x5d
 8002c7c:	2203      	movs	r2, #3
 8002c7e:	701a      	strb	r2, [r3, #0]
        __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002c80:	68fb      	ldr	r3, [r7, #12]
 8002c82:	015a      	lsls	r2, r3, #5
 8002c84:	693b      	ldr	r3, [r7, #16]
 8002c86:	4413      	add	r3, r2
 8002c88:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002c8c:	68db      	ldr	r3, [r3, #12]
 8002c8e:	68fa      	ldr	r2, [r7, #12]
 8002c90:	0151      	lsls	r1, r2, #5
 8002c92:	693a      	ldr	r2, [r7, #16]
 8002c94:	440a      	add	r2, r1
 8002c96:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002c9a:	f043 0302 	orr.w	r3, r3, #2
 8002c9e:	60d3      	str	r3, [r2, #12]
        (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	68fa      	ldr	r2, [r7, #12]
 8002ca6:	b2d2      	uxtb	r2, r2
 8002ca8:	4611      	mov	r1, r2
 8002caa:	4618      	mov	r0, r3
 8002cac:	f002 ffaf 	bl	8005c0e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8002cb0:	68fb      	ldr	r3, [r7, #12]
 8002cb2:	015a      	lsls	r2, r3, #5
 8002cb4:	693b      	ldr	r3, [r7, #16]
 8002cb6:	4413      	add	r3, r2
 8002cb8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002cbc:	461a      	mov	r2, r3
 8002cbe:	2310      	movs	r3, #16
 8002cc0:	6093      	str	r3, [r2, #8]
}
 8002cc2:	bf00      	nop
 8002cc4:	3718      	adds	r7, #24
 8002cc6:	46bd      	mov	sp, r7
 8002cc8:	bd80      	pop	{r7, pc}

08002cca <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8002cca:	b580      	push	{r7, lr}
 8002ccc:	b086      	sub	sp, #24
 8002cce:	af00      	add	r7, sp, #0
 8002cd0:	6078      	str	r0, [r7, #4]
 8002cd2:	460b      	mov	r3, r1
 8002cd4:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002cdc:	697b      	ldr	r3, [r7, #20]
 8002cde:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 8002ce0:	78fb      	ldrb	r3, [r7, #3]
 8002ce2:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8002ce4:	68fb      	ldr	r3, [r7, #12]
 8002ce6:	015a      	lsls	r2, r3, #5
 8002ce8:	693b      	ldr	r3, [r7, #16]
 8002cea:	4413      	add	r3, r2
 8002cec:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002cf0:	689b      	ldr	r3, [r3, #8]
 8002cf2:	f003 0304 	and.w	r3, r3, #4
 8002cf6:	2b04      	cmp	r3, #4
 8002cf8:	d119      	bne.n	8002d2e <HCD_HC_OUT_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8002cfa:	68fb      	ldr	r3, [r7, #12]
 8002cfc:	015a      	lsls	r2, r3, #5
 8002cfe:	693b      	ldr	r3, [r7, #16]
 8002d00:	4413      	add	r3, r2
 8002d02:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002d06:	461a      	mov	r2, r3
 8002d08:	2304      	movs	r3, #4
 8002d0a:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002d0c:	68fb      	ldr	r3, [r7, #12]
 8002d0e:	015a      	lsls	r2, r3, #5
 8002d10:	693b      	ldr	r3, [r7, #16]
 8002d12:	4413      	add	r3, r2
 8002d14:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002d18:	68db      	ldr	r3, [r3, #12]
 8002d1a:	68fa      	ldr	r2, [r7, #12]
 8002d1c:	0151      	lsls	r1, r2, #5
 8002d1e:	693a      	ldr	r2, [r7, #16]
 8002d20:	440a      	add	r2, r1
 8002d22:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002d26:	f043 0302 	orr.w	r3, r3, #2
 8002d2a:	60d3      	str	r3, [r2, #12]
  }
  else
  {
    /* ... */
  }
}
 8002d2c:	e33e      	b.n	80033ac <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8002d2e:	68fb      	ldr	r3, [r7, #12]
 8002d30:	015a      	lsls	r2, r3, #5
 8002d32:	693b      	ldr	r3, [r7, #16]
 8002d34:	4413      	add	r3, r2
 8002d36:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002d3a:	689b      	ldr	r3, [r3, #8]
 8002d3c:	f003 0320 	and.w	r3, r3, #32
 8002d40:	2b20      	cmp	r3, #32
 8002d42:	d141      	bne.n	8002dc8 <HCD_HC_OUT_IRQHandler+0xfe>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8002d44:	68fb      	ldr	r3, [r7, #12]
 8002d46:	015a      	lsls	r2, r3, #5
 8002d48:	693b      	ldr	r3, [r7, #16]
 8002d4a:	4413      	add	r3, r2
 8002d4c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002d50:	461a      	mov	r2, r3
 8002d52:	2320      	movs	r3, #32
 8002d54:	6093      	str	r3, [r2, #8]
    if (hhcd->hc[ch_num].do_ping == 1U)
 8002d56:	6879      	ldr	r1, [r7, #4]
 8002d58:	68fa      	ldr	r2, [r7, #12]
 8002d5a:	4613      	mov	r3, r2
 8002d5c:	009b      	lsls	r3, r3, #2
 8002d5e:	4413      	add	r3, r2
 8002d60:	00db      	lsls	r3, r3, #3
 8002d62:	440b      	add	r3, r1
 8002d64:	333d      	adds	r3, #61	; 0x3d
 8002d66:	781b      	ldrb	r3, [r3, #0]
 8002d68:	2b01      	cmp	r3, #1
 8002d6a:	f040 831f 	bne.w	80033ac <HCD_HC_OUT_IRQHandler+0x6e2>
      hhcd->hc[ch_num].do_ping = 0U;
 8002d6e:	6879      	ldr	r1, [r7, #4]
 8002d70:	68fa      	ldr	r2, [r7, #12]
 8002d72:	4613      	mov	r3, r2
 8002d74:	009b      	lsls	r3, r3, #2
 8002d76:	4413      	add	r3, r2
 8002d78:	00db      	lsls	r3, r3, #3
 8002d7a:	440b      	add	r3, r1
 8002d7c:	333d      	adds	r3, #61	; 0x3d
 8002d7e:	2200      	movs	r2, #0
 8002d80:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8002d82:	6879      	ldr	r1, [r7, #4]
 8002d84:	68fa      	ldr	r2, [r7, #12]
 8002d86:	4613      	mov	r3, r2
 8002d88:	009b      	lsls	r3, r3, #2
 8002d8a:	4413      	add	r3, r2
 8002d8c:	00db      	lsls	r3, r3, #3
 8002d8e:	440b      	add	r3, r1
 8002d90:	335c      	adds	r3, #92	; 0x5c
 8002d92:	2202      	movs	r2, #2
 8002d94:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002d96:	68fb      	ldr	r3, [r7, #12]
 8002d98:	015a      	lsls	r2, r3, #5
 8002d9a:	693b      	ldr	r3, [r7, #16]
 8002d9c:	4413      	add	r3, r2
 8002d9e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002da2:	68db      	ldr	r3, [r3, #12]
 8002da4:	68fa      	ldr	r2, [r7, #12]
 8002da6:	0151      	lsls	r1, r2, #5
 8002da8:	693a      	ldr	r2, [r7, #16]
 8002daa:	440a      	add	r2, r1
 8002dac:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002db0:	f043 0302 	orr.w	r3, r3, #2
 8002db4:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	68fa      	ldr	r2, [r7, #12]
 8002dbc:	b2d2      	uxtb	r2, r2
 8002dbe:	4611      	mov	r1, r2
 8002dc0:	4618      	mov	r0, r3
 8002dc2:	f002 ff24 	bl	8005c0e <USB_HC_Halt>
}
 8002dc6:	e2f1      	b.n	80033ac <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8002dc8:	68fb      	ldr	r3, [r7, #12]
 8002dca:	015a      	lsls	r2, r3, #5
 8002dcc:	693b      	ldr	r3, [r7, #16]
 8002dce:	4413      	add	r3, r2
 8002dd0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002dd4:	689b      	ldr	r3, [r3, #8]
 8002dd6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002dda:	2b40      	cmp	r3, #64	; 0x40
 8002ddc:	d13f      	bne.n	8002e5e <HCD_HC_OUT_IRQHandler+0x194>
    hhcd->hc[ch_num].state = HC_NYET;
 8002dde:	6879      	ldr	r1, [r7, #4]
 8002de0:	68fa      	ldr	r2, [r7, #12]
 8002de2:	4613      	mov	r3, r2
 8002de4:	009b      	lsls	r3, r3, #2
 8002de6:	4413      	add	r3, r2
 8002de8:	00db      	lsls	r3, r3, #3
 8002dea:	440b      	add	r3, r1
 8002dec:	335d      	adds	r3, #93	; 0x5d
 8002dee:	2204      	movs	r2, #4
 8002df0:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = 1U;
 8002df2:	6879      	ldr	r1, [r7, #4]
 8002df4:	68fa      	ldr	r2, [r7, #12]
 8002df6:	4613      	mov	r3, r2
 8002df8:	009b      	lsls	r3, r3, #2
 8002dfa:	4413      	add	r3, r2
 8002dfc:	00db      	lsls	r3, r3, #3
 8002dfe:	440b      	add	r3, r1
 8002e00:	333d      	adds	r3, #61	; 0x3d
 8002e02:	2201      	movs	r2, #1
 8002e04:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8002e06:	6879      	ldr	r1, [r7, #4]
 8002e08:	68fa      	ldr	r2, [r7, #12]
 8002e0a:	4613      	mov	r3, r2
 8002e0c:	009b      	lsls	r3, r3, #2
 8002e0e:	4413      	add	r3, r2
 8002e10:	00db      	lsls	r3, r3, #3
 8002e12:	440b      	add	r3, r1
 8002e14:	3358      	adds	r3, #88	; 0x58
 8002e16:	2200      	movs	r2, #0
 8002e18:	601a      	str	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002e1a:	68fb      	ldr	r3, [r7, #12]
 8002e1c:	015a      	lsls	r2, r3, #5
 8002e1e:	693b      	ldr	r3, [r7, #16]
 8002e20:	4413      	add	r3, r2
 8002e22:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002e26:	68db      	ldr	r3, [r3, #12]
 8002e28:	68fa      	ldr	r2, [r7, #12]
 8002e2a:	0151      	lsls	r1, r2, #5
 8002e2c:	693a      	ldr	r2, [r7, #16]
 8002e2e:	440a      	add	r2, r1
 8002e30:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002e34:	f043 0302 	orr.w	r3, r3, #2
 8002e38:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	68fa      	ldr	r2, [r7, #12]
 8002e40:	b2d2      	uxtb	r2, r2
 8002e42:	4611      	mov	r1, r2
 8002e44:	4618      	mov	r0, r3
 8002e46:	f002 fee2 	bl	8005c0e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8002e4a:	68fb      	ldr	r3, [r7, #12]
 8002e4c:	015a      	lsls	r2, r3, #5
 8002e4e:	693b      	ldr	r3, [r7, #16]
 8002e50:	4413      	add	r3, r2
 8002e52:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002e56:	461a      	mov	r2, r3
 8002e58:	2340      	movs	r3, #64	; 0x40
 8002e5a:	6093      	str	r3, [r2, #8]
}
 8002e5c:	e2a6      	b.n	80033ac <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8002e5e:	68fb      	ldr	r3, [r7, #12]
 8002e60:	015a      	lsls	r2, r3, #5
 8002e62:	693b      	ldr	r3, [r7, #16]
 8002e64:	4413      	add	r3, r2
 8002e66:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002e6a:	689b      	ldr	r3, [r3, #8]
 8002e6c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002e70:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002e74:	d122      	bne.n	8002ebc <HCD_HC_OUT_IRQHandler+0x1f2>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002e76:	68fb      	ldr	r3, [r7, #12]
 8002e78:	015a      	lsls	r2, r3, #5
 8002e7a:	693b      	ldr	r3, [r7, #16]
 8002e7c:	4413      	add	r3, r2
 8002e7e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002e82:	68db      	ldr	r3, [r3, #12]
 8002e84:	68fa      	ldr	r2, [r7, #12]
 8002e86:	0151      	lsls	r1, r2, #5
 8002e88:	693a      	ldr	r2, [r7, #16]
 8002e8a:	440a      	add	r2, r1
 8002e8c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002e90:	f043 0302 	orr.w	r3, r3, #2
 8002e94:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	68fa      	ldr	r2, [r7, #12]
 8002e9c:	b2d2      	uxtb	r2, r2
 8002e9e:	4611      	mov	r1, r2
 8002ea0:	4618      	mov	r0, r3
 8002ea2:	f002 feb4 	bl	8005c0e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8002ea6:	68fb      	ldr	r3, [r7, #12]
 8002ea8:	015a      	lsls	r2, r3, #5
 8002eaa:	693b      	ldr	r3, [r7, #16]
 8002eac:	4413      	add	r3, r2
 8002eae:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002eb2:	461a      	mov	r2, r3
 8002eb4:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002eb8:	6093      	str	r3, [r2, #8]
}
 8002eba:	e277      	b.n	80033ac <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8002ebc:	68fb      	ldr	r3, [r7, #12]
 8002ebe:	015a      	lsls	r2, r3, #5
 8002ec0:	693b      	ldr	r3, [r7, #16]
 8002ec2:	4413      	add	r3, r2
 8002ec4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002ec8:	689b      	ldr	r3, [r3, #8]
 8002eca:	f003 0301 	and.w	r3, r3, #1
 8002ece:	2b01      	cmp	r3, #1
 8002ed0:	d135      	bne.n	8002f3e <HCD_HC_OUT_IRQHandler+0x274>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8002ed2:	6879      	ldr	r1, [r7, #4]
 8002ed4:	68fa      	ldr	r2, [r7, #12]
 8002ed6:	4613      	mov	r3, r2
 8002ed8:	009b      	lsls	r3, r3, #2
 8002eda:	4413      	add	r3, r2
 8002edc:	00db      	lsls	r3, r3, #3
 8002ede:	440b      	add	r3, r1
 8002ee0:	3358      	adds	r3, #88	; 0x58
 8002ee2:	2200      	movs	r2, #0
 8002ee4:	601a      	str	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002ee6:	68fb      	ldr	r3, [r7, #12]
 8002ee8:	015a      	lsls	r2, r3, #5
 8002eea:	693b      	ldr	r3, [r7, #16]
 8002eec:	4413      	add	r3, r2
 8002eee:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002ef2:	68db      	ldr	r3, [r3, #12]
 8002ef4:	68fa      	ldr	r2, [r7, #12]
 8002ef6:	0151      	lsls	r1, r2, #5
 8002ef8:	693a      	ldr	r2, [r7, #16]
 8002efa:	440a      	add	r2, r1
 8002efc:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002f00:	f043 0302 	orr.w	r3, r3, #2
 8002f04:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	68fa      	ldr	r2, [r7, #12]
 8002f0c:	b2d2      	uxtb	r2, r2
 8002f0e:	4611      	mov	r1, r2
 8002f10:	4618      	mov	r0, r3
 8002f12:	f002 fe7c 	bl	8005c0e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8002f16:	68fb      	ldr	r3, [r7, #12]
 8002f18:	015a      	lsls	r2, r3, #5
 8002f1a:	693b      	ldr	r3, [r7, #16]
 8002f1c:	4413      	add	r3, r2
 8002f1e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002f22:	461a      	mov	r2, r3
 8002f24:	2301      	movs	r3, #1
 8002f26:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
 8002f28:	6879      	ldr	r1, [r7, #4]
 8002f2a:	68fa      	ldr	r2, [r7, #12]
 8002f2c:	4613      	mov	r3, r2
 8002f2e:	009b      	lsls	r3, r3, #2
 8002f30:	4413      	add	r3, r2
 8002f32:	00db      	lsls	r3, r3, #3
 8002f34:	440b      	add	r3, r1
 8002f36:	335d      	adds	r3, #93	; 0x5d
 8002f38:	2201      	movs	r2, #1
 8002f3a:	701a      	strb	r2, [r3, #0]
}
 8002f3c:	e236      	b.n	80033ac <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8002f3e:	68fb      	ldr	r3, [r7, #12]
 8002f40:	015a      	lsls	r2, r3, #5
 8002f42:	693b      	ldr	r3, [r7, #16]
 8002f44:	4413      	add	r3, r2
 8002f46:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002f4a:	689b      	ldr	r3, [r3, #8]
 8002f4c:	f003 0308 	and.w	r3, r3, #8
 8002f50:	2b08      	cmp	r3, #8
 8002f52:	d12b      	bne.n	8002fac <HCD_HC_OUT_IRQHandler+0x2e2>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8002f54:	68fb      	ldr	r3, [r7, #12]
 8002f56:	015a      	lsls	r2, r3, #5
 8002f58:	693b      	ldr	r3, [r7, #16]
 8002f5a:	4413      	add	r3, r2
 8002f5c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002f60:	461a      	mov	r2, r3
 8002f62:	2308      	movs	r3, #8
 8002f64:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002f66:	68fb      	ldr	r3, [r7, #12]
 8002f68:	015a      	lsls	r2, r3, #5
 8002f6a:	693b      	ldr	r3, [r7, #16]
 8002f6c:	4413      	add	r3, r2
 8002f6e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002f72:	68db      	ldr	r3, [r3, #12]
 8002f74:	68fa      	ldr	r2, [r7, #12]
 8002f76:	0151      	lsls	r1, r2, #5
 8002f78:	693a      	ldr	r2, [r7, #16]
 8002f7a:	440a      	add	r2, r1
 8002f7c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002f80:	f043 0302 	orr.w	r3, r3, #2
 8002f84:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	68fa      	ldr	r2, [r7, #12]
 8002f8c:	b2d2      	uxtb	r2, r2
 8002f8e:	4611      	mov	r1, r2
 8002f90:	4618      	mov	r0, r3
 8002f92:	f002 fe3c 	bl	8005c0e <USB_HC_Halt>
    hhcd->hc[ch_num].state = HC_STALL;
 8002f96:	6879      	ldr	r1, [r7, #4]
 8002f98:	68fa      	ldr	r2, [r7, #12]
 8002f9a:	4613      	mov	r3, r2
 8002f9c:	009b      	lsls	r3, r3, #2
 8002f9e:	4413      	add	r3, r2
 8002fa0:	00db      	lsls	r3, r3, #3
 8002fa2:	440b      	add	r3, r1
 8002fa4:	335d      	adds	r3, #93	; 0x5d
 8002fa6:	2205      	movs	r2, #5
 8002fa8:	701a      	strb	r2, [r3, #0]
}
 8002faa:	e1ff      	b.n	80033ac <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8002fac:	68fb      	ldr	r3, [r7, #12]
 8002fae:	015a      	lsls	r2, r3, #5
 8002fb0:	693b      	ldr	r3, [r7, #16]
 8002fb2:	4413      	add	r3, r2
 8002fb4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002fb8:	689b      	ldr	r3, [r3, #8]
 8002fba:	f003 0310 	and.w	r3, r3, #16
 8002fbe:	2b10      	cmp	r3, #16
 8002fc0:	d155      	bne.n	800306e <HCD_HC_OUT_IRQHandler+0x3a4>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8002fc2:	6879      	ldr	r1, [r7, #4]
 8002fc4:	68fa      	ldr	r2, [r7, #12]
 8002fc6:	4613      	mov	r3, r2
 8002fc8:	009b      	lsls	r3, r3, #2
 8002fca:	4413      	add	r3, r2
 8002fcc:	00db      	lsls	r3, r3, #3
 8002fce:	440b      	add	r3, r1
 8002fd0:	3358      	adds	r3, #88	; 0x58
 8002fd2:	2200      	movs	r2, #0
 8002fd4:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_NAK;
 8002fd6:	6879      	ldr	r1, [r7, #4]
 8002fd8:	68fa      	ldr	r2, [r7, #12]
 8002fda:	4613      	mov	r3, r2
 8002fdc:	009b      	lsls	r3, r3, #2
 8002fde:	4413      	add	r3, r2
 8002fe0:	00db      	lsls	r3, r3, #3
 8002fe2:	440b      	add	r3, r1
 8002fe4:	335d      	adds	r3, #93	; 0x5d
 8002fe6:	2203      	movs	r2, #3
 8002fe8:	701a      	strb	r2, [r3, #0]
    if (hhcd->hc[ch_num].do_ping == 0U)
 8002fea:	6879      	ldr	r1, [r7, #4]
 8002fec:	68fa      	ldr	r2, [r7, #12]
 8002fee:	4613      	mov	r3, r2
 8002ff0:	009b      	lsls	r3, r3, #2
 8002ff2:	4413      	add	r3, r2
 8002ff4:	00db      	lsls	r3, r3, #3
 8002ff6:	440b      	add	r3, r1
 8002ff8:	333d      	adds	r3, #61	; 0x3d
 8002ffa:	781b      	ldrb	r3, [r3, #0]
 8002ffc:	2b00      	cmp	r3, #0
 8002ffe:	d114      	bne.n	800302a <HCD_HC_OUT_IRQHandler+0x360>
      if (hhcd->hc[ch_num].speed == HCD_SPEED_HIGH)
 8003000:	6879      	ldr	r1, [r7, #4]
 8003002:	68fa      	ldr	r2, [r7, #12]
 8003004:	4613      	mov	r3, r2
 8003006:	009b      	lsls	r3, r3, #2
 8003008:	4413      	add	r3, r2
 800300a:	00db      	lsls	r3, r3, #3
 800300c:	440b      	add	r3, r1
 800300e:	333c      	adds	r3, #60	; 0x3c
 8003010:	781b      	ldrb	r3, [r3, #0]
 8003012:	2b00      	cmp	r3, #0
 8003014:	d109      	bne.n	800302a <HCD_HC_OUT_IRQHandler+0x360>
        hhcd->hc[ch_num].do_ping = 1U;
 8003016:	6879      	ldr	r1, [r7, #4]
 8003018:	68fa      	ldr	r2, [r7, #12]
 800301a:	4613      	mov	r3, r2
 800301c:	009b      	lsls	r3, r3, #2
 800301e:	4413      	add	r3, r2
 8003020:	00db      	lsls	r3, r3, #3
 8003022:	440b      	add	r3, r1
 8003024:	333d      	adds	r3, #61	; 0x3d
 8003026:	2201      	movs	r2, #1
 8003028:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800302a:	68fb      	ldr	r3, [r7, #12]
 800302c:	015a      	lsls	r2, r3, #5
 800302e:	693b      	ldr	r3, [r7, #16]
 8003030:	4413      	add	r3, r2
 8003032:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003036:	68db      	ldr	r3, [r3, #12]
 8003038:	68fa      	ldr	r2, [r7, #12]
 800303a:	0151      	lsls	r1, r2, #5
 800303c:	693a      	ldr	r2, [r7, #16]
 800303e:	440a      	add	r2, r1
 8003040:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003044:	f043 0302 	orr.w	r3, r3, #2
 8003048:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	68fa      	ldr	r2, [r7, #12]
 8003050:	b2d2      	uxtb	r2, r2
 8003052:	4611      	mov	r1, r2
 8003054:	4618      	mov	r0, r3
 8003056:	f002 fdda 	bl	8005c0e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 800305a:	68fb      	ldr	r3, [r7, #12]
 800305c:	015a      	lsls	r2, r3, #5
 800305e:	693b      	ldr	r3, [r7, #16]
 8003060:	4413      	add	r3, r2
 8003062:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003066:	461a      	mov	r2, r3
 8003068:	2310      	movs	r3, #16
 800306a:	6093      	str	r3, [r2, #8]
}
 800306c:	e19e      	b.n	80033ac <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 800306e:	68fb      	ldr	r3, [r7, #12]
 8003070:	015a      	lsls	r2, r3, #5
 8003072:	693b      	ldr	r3, [r7, #16]
 8003074:	4413      	add	r3, r2
 8003076:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800307a:	689b      	ldr	r3, [r3, #8]
 800307c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003080:	2b80      	cmp	r3, #128	; 0x80
 8003082:	d12b      	bne.n	80030dc <HCD_HC_OUT_IRQHandler+0x412>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003084:	68fb      	ldr	r3, [r7, #12]
 8003086:	015a      	lsls	r2, r3, #5
 8003088:	693b      	ldr	r3, [r7, #16]
 800308a:	4413      	add	r3, r2
 800308c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003090:	68db      	ldr	r3, [r3, #12]
 8003092:	68fa      	ldr	r2, [r7, #12]
 8003094:	0151      	lsls	r1, r2, #5
 8003096:	693a      	ldr	r2, [r7, #16]
 8003098:	440a      	add	r2, r1
 800309a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800309e:	f043 0302 	orr.w	r3, r3, #2
 80030a2:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	68fa      	ldr	r2, [r7, #12]
 80030aa:	b2d2      	uxtb	r2, r2
 80030ac:	4611      	mov	r1, r2
 80030ae:	4618      	mov	r0, r3
 80030b0:	f002 fdad 	bl	8005c0e <USB_HC_Halt>
    hhcd->hc[ch_num].state = HC_XACTERR;
 80030b4:	6879      	ldr	r1, [r7, #4]
 80030b6:	68fa      	ldr	r2, [r7, #12]
 80030b8:	4613      	mov	r3, r2
 80030ba:	009b      	lsls	r3, r3, #2
 80030bc:	4413      	add	r3, r2
 80030be:	00db      	lsls	r3, r3, #3
 80030c0:	440b      	add	r3, r1
 80030c2:	335d      	adds	r3, #93	; 0x5d
 80030c4:	2206      	movs	r2, #6
 80030c6:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 80030c8:	68fb      	ldr	r3, [r7, #12]
 80030ca:	015a      	lsls	r2, r3, #5
 80030cc:	693b      	ldr	r3, [r7, #16]
 80030ce:	4413      	add	r3, r2
 80030d0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80030d4:	461a      	mov	r2, r3
 80030d6:	2380      	movs	r3, #128	; 0x80
 80030d8:	6093      	str	r3, [r2, #8]
}
 80030da:	e167      	b.n	80033ac <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 80030dc:	68fb      	ldr	r3, [r7, #12]
 80030de:	015a      	lsls	r2, r3, #5
 80030e0:	693b      	ldr	r3, [r7, #16]
 80030e2:	4413      	add	r3, r2
 80030e4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80030e8:	689b      	ldr	r3, [r3, #8]
 80030ea:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80030ee:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80030f2:	d135      	bne.n	8003160 <HCD_HC_OUT_IRQHandler+0x496>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80030f4:	68fb      	ldr	r3, [r7, #12]
 80030f6:	015a      	lsls	r2, r3, #5
 80030f8:	693b      	ldr	r3, [r7, #16]
 80030fa:	4413      	add	r3, r2
 80030fc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003100:	68db      	ldr	r3, [r3, #12]
 8003102:	68fa      	ldr	r2, [r7, #12]
 8003104:	0151      	lsls	r1, r2, #5
 8003106:	693a      	ldr	r2, [r7, #16]
 8003108:	440a      	add	r2, r1
 800310a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800310e:	f043 0302 	orr.w	r3, r3, #2
 8003112:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	68fa      	ldr	r2, [r7, #12]
 800311a:	b2d2      	uxtb	r2, r2
 800311c:	4611      	mov	r1, r2
 800311e:	4618      	mov	r0, r3
 8003120:	f002 fd75 	bl	8005c0e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8003124:	68fb      	ldr	r3, [r7, #12]
 8003126:	015a      	lsls	r2, r3, #5
 8003128:	693b      	ldr	r3, [r7, #16]
 800312a:	4413      	add	r3, r2
 800312c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003130:	461a      	mov	r2, r3
 8003132:	2310      	movs	r3, #16
 8003134:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8003136:	68fb      	ldr	r3, [r7, #12]
 8003138:	015a      	lsls	r2, r3, #5
 800313a:	693b      	ldr	r3, [r7, #16]
 800313c:	4413      	add	r3, r2
 800313e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003142:	461a      	mov	r2, r3
 8003144:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003148:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 800314a:	6879      	ldr	r1, [r7, #4]
 800314c:	68fa      	ldr	r2, [r7, #12]
 800314e:	4613      	mov	r3, r2
 8003150:	009b      	lsls	r3, r3, #2
 8003152:	4413      	add	r3, r2
 8003154:	00db      	lsls	r3, r3, #3
 8003156:	440b      	add	r3, r1
 8003158:	335d      	adds	r3, #93	; 0x5d
 800315a:	2208      	movs	r2, #8
 800315c:	701a      	strb	r2, [r3, #0]
}
 800315e:	e125      	b.n	80033ac <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8003160:	68fb      	ldr	r3, [r7, #12]
 8003162:	015a      	lsls	r2, r3, #5
 8003164:	693b      	ldr	r3, [r7, #16]
 8003166:	4413      	add	r3, r2
 8003168:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800316c:	689b      	ldr	r3, [r3, #8]
 800316e:	f003 0302 	and.w	r3, r3, #2
 8003172:	2b02      	cmp	r3, #2
 8003174:	f040 811a 	bne.w	80033ac <HCD_HC_OUT_IRQHandler+0x6e2>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 8003178:	68fb      	ldr	r3, [r7, #12]
 800317a:	015a      	lsls	r2, r3, #5
 800317c:	693b      	ldr	r3, [r7, #16]
 800317e:	4413      	add	r3, r2
 8003180:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003184:	68db      	ldr	r3, [r3, #12]
 8003186:	68fa      	ldr	r2, [r7, #12]
 8003188:	0151      	lsls	r1, r2, #5
 800318a:	693a      	ldr	r2, [r7, #16]
 800318c:	440a      	add	r2, r1
 800318e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003192:	f023 0302 	bic.w	r3, r3, #2
 8003196:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8003198:	6879      	ldr	r1, [r7, #4]
 800319a:	68fa      	ldr	r2, [r7, #12]
 800319c:	4613      	mov	r3, r2
 800319e:	009b      	lsls	r3, r3, #2
 80031a0:	4413      	add	r3, r2
 80031a2:	00db      	lsls	r3, r3, #3
 80031a4:	440b      	add	r3, r1
 80031a6:	335d      	adds	r3, #93	; 0x5d
 80031a8:	781b      	ldrb	r3, [r3, #0]
 80031aa:	2b01      	cmp	r3, #1
 80031ac:	d137      	bne.n	800321e <HCD_HC_OUT_IRQHandler+0x554>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 80031ae:	6879      	ldr	r1, [r7, #4]
 80031b0:	68fa      	ldr	r2, [r7, #12]
 80031b2:	4613      	mov	r3, r2
 80031b4:	009b      	lsls	r3, r3, #2
 80031b6:	4413      	add	r3, r2
 80031b8:	00db      	lsls	r3, r3, #3
 80031ba:	440b      	add	r3, r1
 80031bc:	335c      	adds	r3, #92	; 0x5c
 80031be:	2201      	movs	r2, #1
 80031c0:	701a      	strb	r2, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 80031c2:	6879      	ldr	r1, [r7, #4]
 80031c4:	68fa      	ldr	r2, [r7, #12]
 80031c6:	4613      	mov	r3, r2
 80031c8:	009b      	lsls	r3, r3, #2
 80031ca:	4413      	add	r3, r2
 80031cc:	00db      	lsls	r3, r3, #3
 80031ce:	440b      	add	r3, r1
 80031d0:	333f      	adds	r3, #63	; 0x3f
 80031d2:	781b      	ldrb	r3, [r3, #0]
 80031d4:	2b02      	cmp	r3, #2
 80031d6:	d00b      	beq.n	80031f0 <HCD_HC_OUT_IRQHandler+0x526>
          (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR))
 80031d8:	6879      	ldr	r1, [r7, #4]
 80031da:	68fa      	ldr	r2, [r7, #12]
 80031dc:	4613      	mov	r3, r2
 80031de:	009b      	lsls	r3, r3, #2
 80031e0:	4413      	add	r3, r2
 80031e2:	00db      	lsls	r3, r3, #3
 80031e4:	440b      	add	r3, r1
 80031e6:	333f      	adds	r3, #63	; 0x3f
 80031e8:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 80031ea:	2b03      	cmp	r3, #3
 80031ec:	f040 80c5 	bne.w	800337a <HCD_HC_OUT_IRQHandler+0x6b0>
        hhcd->hc[ch_num].toggle_out ^= 1U;
 80031f0:	6879      	ldr	r1, [r7, #4]
 80031f2:	68fa      	ldr	r2, [r7, #12]
 80031f4:	4613      	mov	r3, r2
 80031f6:	009b      	lsls	r3, r3, #2
 80031f8:	4413      	add	r3, r2
 80031fa:	00db      	lsls	r3, r3, #3
 80031fc:	440b      	add	r3, r1
 80031fe:	3351      	adds	r3, #81	; 0x51
 8003200:	781b      	ldrb	r3, [r3, #0]
 8003202:	f083 0301 	eor.w	r3, r3, #1
 8003206:	b2d8      	uxtb	r0, r3
 8003208:	6879      	ldr	r1, [r7, #4]
 800320a:	68fa      	ldr	r2, [r7, #12]
 800320c:	4613      	mov	r3, r2
 800320e:	009b      	lsls	r3, r3, #2
 8003210:	4413      	add	r3, r2
 8003212:	00db      	lsls	r3, r3, #3
 8003214:	440b      	add	r3, r1
 8003216:	3351      	adds	r3, #81	; 0x51
 8003218:	4602      	mov	r2, r0
 800321a:	701a      	strb	r2, [r3, #0]
 800321c:	e0ad      	b.n	800337a <HCD_HC_OUT_IRQHandler+0x6b0>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 800321e:	6879      	ldr	r1, [r7, #4]
 8003220:	68fa      	ldr	r2, [r7, #12]
 8003222:	4613      	mov	r3, r2
 8003224:	009b      	lsls	r3, r3, #2
 8003226:	4413      	add	r3, r2
 8003228:	00db      	lsls	r3, r3, #3
 800322a:	440b      	add	r3, r1
 800322c:	335d      	adds	r3, #93	; 0x5d
 800322e:	781b      	ldrb	r3, [r3, #0]
 8003230:	2b03      	cmp	r3, #3
 8003232:	d10a      	bne.n	800324a <HCD_HC_OUT_IRQHandler+0x580>
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8003234:	6879      	ldr	r1, [r7, #4]
 8003236:	68fa      	ldr	r2, [r7, #12]
 8003238:	4613      	mov	r3, r2
 800323a:	009b      	lsls	r3, r3, #2
 800323c:	4413      	add	r3, r2
 800323e:	00db      	lsls	r3, r3, #3
 8003240:	440b      	add	r3, r1
 8003242:	335c      	adds	r3, #92	; 0x5c
 8003244:	2202      	movs	r2, #2
 8003246:	701a      	strb	r2, [r3, #0]
 8003248:	e097      	b.n	800337a <HCD_HC_OUT_IRQHandler+0x6b0>
    else if (hhcd->hc[ch_num].state == HC_NYET)
 800324a:	6879      	ldr	r1, [r7, #4]
 800324c:	68fa      	ldr	r2, [r7, #12]
 800324e:	4613      	mov	r3, r2
 8003250:	009b      	lsls	r3, r3, #2
 8003252:	4413      	add	r3, r2
 8003254:	00db      	lsls	r3, r3, #3
 8003256:	440b      	add	r3, r1
 8003258:	335d      	adds	r3, #93	; 0x5d
 800325a:	781b      	ldrb	r3, [r3, #0]
 800325c:	2b04      	cmp	r3, #4
 800325e:	d10a      	bne.n	8003276 <HCD_HC_OUT_IRQHandler+0x5ac>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8003260:	6879      	ldr	r1, [r7, #4]
 8003262:	68fa      	ldr	r2, [r7, #12]
 8003264:	4613      	mov	r3, r2
 8003266:	009b      	lsls	r3, r3, #2
 8003268:	4413      	add	r3, r2
 800326a:	00db      	lsls	r3, r3, #3
 800326c:	440b      	add	r3, r1
 800326e:	335c      	adds	r3, #92	; 0x5c
 8003270:	2202      	movs	r2, #2
 8003272:	701a      	strb	r2, [r3, #0]
 8003274:	e081      	b.n	800337a <HCD_HC_OUT_IRQHandler+0x6b0>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8003276:	6879      	ldr	r1, [r7, #4]
 8003278:	68fa      	ldr	r2, [r7, #12]
 800327a:	4613      	mov	r3, r2
 800327c:	009b      	lsls	r3, r3, #2
 800327e:	4413      	add	r3, r2
 8003280:	00db      	lsls	r3, r3, #3
 8003282:	440b      	add	r3, r1
 8003284:	335d      	adds	r3, #93	; 0x5d
 8003286:	781b      	ldrb	r3, [r3, #0]
 8003288:	2b05      	cmp	r3, #5
 800328a:	d10a      	bne.n	80032a2 <HCD_HC_OUT_IRQHandler+0x5d8>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 800328c:	6879      	ldr	r1, [r7, #4]
 800328e:	68fa      	ldr	r2, [r7, #12]
 8003290:	4613      	mov	r3, r2
 8003292:	009b      	lsls	r3, r3, #2
 8003294:	4413      	add	r3, r2
 8003296:	00db      	lsls	r3, r3, #3
 8003298:	440b      	add	r3, r1
 800329a:	335c      	adds	r3, #92	; 0x5c
 800329c:	2205      	movs	r2, #5
 800329e:	701a      	strb	r2, [r3, #0]
 80032a0:	e06b      	b.n	800337a <HCD_HC_OUT_IRQHandler+0x6b0>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 80032a2:	6879      	ldr	r1, [r7, #4]
 80032a4:	68fa      	ldr	r2, [r7, #12]
 80032a6:	4613      	mov	r3, r2
 80032a8:	009b      	lsls	r3, r3, #2
 80032aa:	4413      	add	r3, r2
 80032ac:	00db      	lsls	r3, r3, #3
 80032ae:	440b      	add	r3, r1
 80032b0:	335d      	adds	r3, #93	; 0x5d
 80032b2:	781b      	ldrb	r3, [r3, #0]
 80032b4:	2b06      	cmp	r3, #6
 80032b6:	d00a      	beq.n	80032ce <HCD_HC_OUT_IRQHandler+0x604>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 80032b8:	6879      	ldr	r1, [r7, #4]
 80032ba:	68fa      	ldr	r2, [r7, #12]
 80032bc:	4613      	mov	r3, r2
 80032be:	009b      	lsls	r3, r3, #2
 80032c0:	4413      	add	r3, r2
 80032c2:	00db      	lsls	r3, r3, #3
 80032c4:	440b      	add	r3, r1
 80032c6:	335d      	adds	r3, #93	; 0x5d
 80032c8:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 80032ca:	2b08      	cmp	r3, #8
 80032cc:	d155      	bne.n	800337a <HCD_HC_OUT_IRQHandler+0x6b0>
      hhcd->hc[ch_num].ErrCnt++;
 80032ce:	6879      	ldr	r1, [r7, #4]
 80032d0:	68fa      	ldr	r2, [r7, #12]
 80032d2:	4613      	mov	r3, r2
 80032d4:	009b      	lsls	r3, r3, #2
 80032d6:	4413      	add	r3, r2
 80032d8:	00db      	lsls	r3, r3, #3
 80032da:	440b      	add	r3, r1
 80032dc:	3358      	adds	r3, #88	; 0x58
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	1c59      	adds	r1, r3, #1
 80032e2:	6878      	ldr	r0, [r7, #4]
 80032e4:	68fa      	ldr	r2, [r7, #12]
 80032e6:	4613      	mov	r3, r2
 80032e8:	009b      	lsls	r3, r3, #2
 80032ea:	4413      	add	r3, r2
 80032ec:	00db      	lsls	r3, r3, #3
 80032ee:	4403      	add	r3, r0
 80032f0:	3358      	adds	r3, #88	; 0x58
 80032f2:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 3U)
 80032f4:	6879      	ldr	r1, [r7, #4]
 80032f6:	68fa      	ldr	r2, [r7, #12]
 80032f8:	4613      	mov	r3, r2
 80032fa:	009b      	lsls	r3, r3, #2
 80032fc:	4413      	add	r3, r2
 80032fe:	00db      	lsls	r3, r3, #3
 8003300:	440b      	add	r3, r1
 8003302:	3358      	adds	r3, #88	; 0x58
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	2b03      	cmp	r3, #3
 8003308:	d914      	bls.n	8003334 <HCD_HC_OUT_IRQHandler+0x66a>
        hhcd->hc[ch_num].ErrCnt = 0U;
 800330a:	6879      	ldr	r1, [r7, #4]
 800330c:	68fa      	ldr	r2, [r7, #12]
 800330e:	4613      	mov	r3, r2
 8003310:	009b      	lsls	r3, r3, #2
 8003312:	4413      	add	r3, r2
 8003314:	00db      	lsls	r3, r3, #3
 8003316:	440b      	add	r3, r1
 8003318:	3358      	adds	r3, #88	; 0x58
 800331a:	2200      	movs	r2, #0
 800331c:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 800331e:	6879      	ldr	r1, [r7, #4]
 8003320:	68fa      	ldr	r2, [r7, #12]
 8003322:	4613      	mov	r3, r2
 8003324:	009b      	lsls	r3, r3, #2
 8003326:	4413      	add	r3, r2
 8003328:	00db      	lsls	r3, r3, #3
 800332a:	440b      	add	r3, r1
 800332c:	335c      	adds	r3, #92	; 0x5c
 800332e:	2204      	movs	r2, #4
 8003330:	701a      	strb	r2, [r3, #0]
 8003332:	e009      	b.n	8003348 <HCD_HC_OUT_IRQHandler+0x67e>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8003334:	6879      	ldr	r1, [r7, #4]
 8003336:	68fa      	ldr	r2, [r7, #12]
 8003338:	4613      	mov	r3, r2
 800333a:	009b      	lsls	r3, r3, #2
 800333c:	4413      	add	r3, r2
 800333e:	00db      	lsls	r3, r3, #3
 8003340:	440b      	add	r3, r1
 8003342:	335c      	adds	r3, #92	; 0x5c
 8003344:	2202      	movs	r2, #2
 8003346:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 8003348:	68fb      	ldr	r3, [r7, #12]
 800334a:	015a      	lsls	r2, r3, #5
 800334c:	693b      	ldr	r3, [r7, #16]
 800334e:	4413      	add	r3, r2
 8003350:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003358:	68bb      	ldr	r3, [r7, #8]
 800335a:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800335e:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003360:	68bb      	ldr	r3, [r7, #8]
 8003362:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8003366:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 8003368:	68fb      	ldr	r3, [r7, #12]
 800336a:	015a      	lsls	r2, r3, #5
 800336c:	693b      	ldr	r3, [r7, #16]
 800336e:	4413      	add	r3, r2
 8003370:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003374:	461a      	mov	r2, r3
 8003376:	68bb      	ldr	r3, [r7, #8]
 8003378:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 800337a:	68fb      	ldr	r3, [r7, #12]
 800337c:	015a      	lsls	r2, r3, #5
 800337e:	693b      	ldr	r3, [r7, #16]
 8003380:	4413      	add	r3, r2
 8003382:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003386:	461a      	mov	r2, r3
 8003388:	2302      	movs	r3, #2
 800338a:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 800338c:	68fb      	ldr	r3, [r7, #12]
 800338e:	b2d8      	uxtb	r0, r3
 8003390:	6879      	ldr	r1, [r7, #4]
 8003392:	68fa      	ldr	r2, [r7, #12]
 8003394:	4613      	mov	r3, r2
 8003396:	009b      	lsls	r3, r3, #2
 8003398:	4413      	add	r3, r2
 800339a:	00db      	lsls	r3, r3, #3
 800339c:	440b      	add	r3, r1
 800339e:	335c      	adds	r3, #92	; 0x5c
 80033a0:	781b      	ldrb	r3, [r3, #0]
 80033a2:	461a      	mov	r2, r3
 80033a4:	4601      	mov	r1, r0
 80033a6:	6878      	ldr	r0, [r7, #4]
 80033a8:	f003 ff1a 	bl	80071e0 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 80033ac:	bf00      	nop
 80033ae:	3718      	adds	r7, #24
 80033b0:	46bd      	mov	sp, r7
 80033b2:	bd80      	pop	{r7, pc}

080033b4 <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 80033b4:	b580      	push	{r7, lr}
 80033b6:	b08a      	sub	sp, #40	; 0x28
 80033b8:	af00      	add	r7, sp, #0
 80033ba:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 80033c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033c4:	623b      	str	r3, [r7, #32]
  uint32_t pktcnt;
  uint32_t temp;
  uint32_t tmpreg;
  uint32_t ch_num;

  temp = hhcd->Instance->GRXSTSP;
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	6a1b      	ldr	r3, [r3, #32]
 80033cc:	61fb      	str	r3, [r7, #28]
  ch_num = temp & USB_OTG_GRXSTSP_EPNUM;
 80033ce:	69fb      	ldr	r3, [r7, #28]
 80033d0:	f003 030f 	and.w	r3, r3, #15
 80033d4:	61bb      	str	r3, [r7, #24]
  pktsts = (temp & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 80033d6:	69fb      	ldr	r3, [r7, #28]
 80033d8:	0c5b      	lsrs	r3, r3, #17
 80033da:	f003 030f 	and.w	r3, r3, #15
 80033de:	617b      	str	r3, [r7, #20]
  pktcnt = (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 80033e0:	69fb      	ldr	r3, [r7, #28]
 80033e2:	091b      	lsrs	r3, r3, #4
 80033e4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80033e8:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 80033ea:	697b      	ldr	r3, [r7, #20]
 80033ec:	2b02      	cmp	r3, #2
 80033ee:	d003      	beq.n	80033f8 <HCD_RXQLVL_IRQHandler+0x44>
 80033f0:	2b05      	cmp	r3, #5
 80033f2:	f000 8082 	beq.w	80034fa <HCD_RXQLVL_IRQHandler+0x146>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 80033f6:	e083      	b.n	8003500 <HCD_RXQLVL_IRQHandler+0x14c>
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 80033f8:	693b      	ldr	r3, [r7, #16]
 80033fa:	2b00      	cmp	r3, #0
 80033fc:	d07f      	beq.n	80034fe <HCD_RXQLVL_IRQHandler+0x14a>
 80033fe:	6879      	ldr	r1, [r7, #4]
 8003400:	69ba      	ldr	r2, [r7, #24]
 8003402:	4613      	mov	r3, r2
 8003404:	009b      	lsls	r3, r3, #2
 8003406:	4413      	add	r3, r2
 8003408:	00db      	lsls	r3, r3, #3
 800340a:	440b      	add	r3, r1
 800340c:	3344      	adds	r3, #68	; 0x44
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	2b00      	cmp	r3, #0
 8003412:	d074      	beq.n	80034fe <HCD_RXQLVL_IRQHandler+0x14a>
        (void)USB_ReadPacket(hhcd->Instance, hhcd->hc[ch_num].xfer_buff, (uint16_t)pktcnt);
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	6818      	ldr	r0, [r3, #0]
 8003418:	6879      	ldr	r1, [r7, #4]
 800341a:	69ba      	ldr	r2, [r7, #24]
 800341c:	4613      	mov	r3, r2
 800341e:	009b      	lsls	r3, r3, #2
 8003420:	4413      	add	r3, r2
 8003422:	00db      	lsls	r3, r3, #3
 8003424:	440b      	add	r3, r1
 8003426:	3344      	adds	r3, #68	; 0x44
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	693a      	ldr	r2, [r7, #16]
 800342c:	b292      	uxth	r2, r2
 800342e:	4619      	mov	r1, r3
 8003430:	f001 ffcf 	bl	80053d2 <USB_ReadPacket>
        hhcd->hc[ch_num].xfer_buff += pktcnt;
 8003434:	6879      	ldr	r1, [r7, #4]
 8003436:	69ba      	ldr	r2, [r7, #24]
 8003438:	4613      	mov	r3, r2
 800343a:	009b      	lsls	r3, r3, #2
 800343c:	4413      	add	r3, r2
 800343e:	00db      	lsls	r3, r3, #3
 8003440:	440b      	add	r3, r1
 8003442:	3344      	adds	r3, #68	; 0x44
 8003444:	681a      	ldr	r2, [r3, #0]
 8003446:	693b      	ldr	r3, [r7, #16]
 8003448:	18d1      	adds	r1, r2, r3
 800344a:	6878      	ldr	r0, [r7, #4]
 800344c:	69ba      	ldr	r2, [r7, #24]
 800344e:	4613      	mov	r3, r2
 8003450:	009b      	lsls	r3, r3, #2
 8003452:	4413      	add	r3, r2
 8003454:	00db      	lsls	r3, r3, #3
 8003456:	4403      	add	r3, r0
 8003458:	3344      	adds	r3, #68	; 0x44
 800345a:	6019      	str	r1, [r3, #0]
        hhcd->hc[ch_num].xfer_count  += pktcnt;
 800345c:	6879      	ldr	r1, [r7, #4]
 800345e:	69ba      	ldr	r2, [r7, #24]
 8003460:	4613      	mov	r3, r2
 8003462:	009b      	lsls	r3, r3, #2
 8003464:	4413      	add	r3, r2
 8003466:	00db      	lsls	r3, r3, #3
 8003468:	440b      	add	r3, r1
 800346a:	334c      	adds	r3, #76	; 0x4c
 800346c:	681a      	ldr	r2, [r3, #0]
 800346e:	693b      	ldr	r3, [r7, #16]
 8003470:	18d1      	adds	r1, r2, r3
 8003472:	6878      	ldr	r0, [r7, #4]
 8003474:	69ba      	ldr	r2, [r7, #24]
 8003476:	4613      	mov	r3, r2
 8003478:	009b      	lsls	r3, r3, #2
 800347a:	4413      	add	r3, r2
 800347c:	00db      	lsls	r3, r3, #3
 800347e:	4403      	add	r3, r0
 8003480:	334c      	adds	r3, #76	; 0x4c
 8003482:	6019      	str	r1, [r3, #0]
        if ((USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) > 0U)
 8003484:	69bb      	ldr	r3, [r7, #24]
 8003486:	015a      	lsls	r2, r3, #5
 8003488:	6a3b      	ldr	r3, [r7, #32]
 800348a:	4413      	add	r3, r2
 800348c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003490:	691a      	ldr	r2, [r3, #16]
 8003492:	4b1d      	ldr	r3, [pc, #116]	; (8003508 <HCD_RXQLVL_IRQHandler+0x154>)
 8003494:	4013      	ands	r3, r2
 8003496:	2b00      	cmp	r3, #0
 8003498:	d031      	beq.n	80034fe <HCD_RXQLVL_IRQHandler+0x14a>
          tmpreg = USBx_HC(ch_num)->HCCHAR;
 800349a:	69bb      	ldr	r3, [r7, #24]
 800349c:	015a      	lsls	r2, r3, #5
 800349e:	6a3b      	ldr	r3, [r7, #32]
 80034a0:	4413      	add	r3, r2
 80034a2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80034aa:	68fb      	ldr	r3, [r7, #12]
 80034ac:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80034b0:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 80034b2:	68fb      	ldr	r3, [r7, #12]
 80034b4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80034b8:	60fb      	str	r3, [r7, #12]
          USBx_HC(ch_num)->HCCHAR = tmpreg;
 80034ba:	69bb      	ldr	r3, [r7, #24]
 80034bc:	015a      	lsls	r2, r3, #5
 80034be:	6a3b      	ldr	r3, [r7, #32]
 80034c0:	4413      	add	r3, r2
 80034c2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80034c6:	461a      	mov	r2, r3
 80034c8:	68fb      	ldr	r3, [r7, #12]
 80034ca:	6013      	str	r3, [r2, #0]
          hhcd->hc[ch_num].toggle_in ^= 1U;
 80034cc:	6879      	ldr	r1, [r7, #4]
 80034ce:	69ba      	ldr	r2, [r7, #24]
 80034d0:	4613      	mov	r3, r2
 80034d2:	009b      	lsls	r3, r3, #2
 80034d4:	4413      	add	r3, r2
 80034d6:	00db      	lsls	r3, r3, #3
 80034d8:	440b      	add	r3, r1
 80034da:	3350      	adds	r3, #80	; 0x50
 80034dc:	781b      	ldrb	r3, [r3, #0]
 80034de:	f083 0301 	eor.w	r3, r3, #1
 80034e2:	b2d8      	uxtb	r0, r3
 80034e4:	6879      	ldr	r1, [r7, #4]
 80034e6:	69ba      	ldr	r2, [r7, #24]
 80034e8:	4613      	mov	r3, r2
 80034ea:	009b      	lsls	r3, r3, #2
 80034ec:	4413      	add	r3, r2
 80034ee:	00db      	lsls	r3, r3, #3
 80034f0:	440b      	add	r3, r1
 80034f2:	3350      	adds	r3, #80	; 0x50
 80034f4:	4602      	mov	r2, r0
 80034f6:	701a      	strb	r2, [r3, #0]
      break;
 80034f8:	e001      	b.n	80034fe <HCD_RXQLVL_IRQHandler+0x14a>
      break;
 80034fa:	bf00      	nop
 80034fc:	e000      	b.n	8003500 <HCD_RXQLVL_IRQHandler+0x14c>
      break;
 80034fe:	bf00      	nop
  }
}
 8003500:	bf00      	nop
 8003502:	3728      	adds	r7, #40	; 0x28
 8003504:	46bd      	mov	sp, r7
 8003506:	bd80      	pop	{r7, pc}
 8003508:	1ff80000 	.word	0x1ff80000

0800350c <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 800350c:	b580      	push	{r7, lr}
 800350e:	b086      	sub	sp, #24
 8003510:	af00      	add	r7, sp, #0
 8003512:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800351a:	697b      	ldr	r3, [r7, #20]
 800351c:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0, hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 800351e:	693b      	ldr	r3, [r7, #16]
 8003520:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 8003528:	693b      	ldr	r3, [r7, #16]
 800352a:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8003532:	68bb      	ldr	r3, [r7, #8]
 8003534:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8003538:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 800353a:	68fb      	ldr	r3, [r7, #12]
 800353c:	f003 0302 	and.w	r3, r3, #2
 8003540:	2b02      	cmp	r3, #2
 8003542:	d113      	bne.n	800356c <HCD_Port_IRQHandler+0x60>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 8003544:	68fb      	ldr	r3, [r7, #12]
 8003546:	f003 0301 	and.w	r3, r3, #1
 800354a:	2b01      	cmp	r3, #1
 800354c:	d10a      	bne.n	8003564 <HCD_Port_IRQHandler+0x58>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_DISCINT);
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	699a      	ldr	r2, [r3, #24]
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	f022 5200 	bic.w	r2, r2, #536870912	; 0x20000000
 800355c:	619a      	str	r2, [r3, #24]

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 800355e:	6878      	ldr	r0, [r7, #4]
 8003560:	f003 fe22 	bl	80071a8 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup  |= USB_OTG_HPRT_PCDET;
 8003564:	68bb      	ldr	r3, [r7, #8]
 8003566:	f043 0302 	orr.w	r3, r3, #2
 800356a:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 800356c:	68fb      	ldr	r3, [r7, #12]
 800356e:	f003 0308 	and.w	r3, r3, #8
 8003572:	2b08      	cmp	r3, #8
 8003574:	d147      	bne.n	8003606 <HCD_Port_IRQHandler+0xfa>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 8003576:	68bb      	ldr	r3, [r7, #8]
 8003578:	f043 0308 	orr.w	r3, r3, #8
 800357c:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 800357e:	68fb      	ldr	r3, [r7, #12]
 8003580:	f003 0304 	and.w	r3, r3, #4
 8003584:	2b04      	cmp	r3, #4
 8003586:	d129      	bne.n	80035dc <HCD_Port_IRQHandler+0xd0>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	699b      	ldr	r3, [r3, #24]
 800358c:	2b02      	cmp	r3, #2
 800358e:	d113      	bne.n	80035b8 <HCD_Port_IRQHandler+0xac>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 8003590:	68fb      	ldr	r3, [r7, #12]
 8003592:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 8003596:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800359a:	d106      	bne.n	80035aa <HCD_Port_IRQHandler+0x9e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	2102      	movs	r1, #2
 80035a2:	4618      	mov	r0, r3
 80035a4:	f002 f850 	bl	8005648 <USB_InitFSLSPClkSel>
 80035a8:	e011      	b.n	80035ce <HCD_Port_IRQHandler+0xc2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	2101      	movs	r1, #1
 80035b0:	4618      	mov	r0, r3
 80035b2:	f002 f849 	bl	8005648 <USB_InitFSLSPClkSel>
 80035b6:	e00a      	b.n	80035ce <HCD_Port_IRQHandler+0xc2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	68db      	ldr	r3, [r3, #12]
 80035bc:	2b01      	cmp	r3, #1
 80035be:	d106      	bne.n	80035ce <HCD_Port_IRQHandler+0xc2>
        {
          USBx_HOST->HFIR = 60000U;
 80035c0:	693b      	ldr	r3, [r7, #16]
 80035c2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80035c6:	461a      	mov	r2, r3
 80035c8:	f64e 2360 	movw	r3, #60000	; 0xea60
 80035cc:	6053      	str	r3, [r2, #4]
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 80035ce:	6878      	ldr	r0, [r7, #4]
 80035d0:	f003 fe14 	bl	80071fc <HAL_HCD_PortEnabled_Callback>
      HAL_HCD_Connect_Callback(hhcd);
 80035d4:	6878      	ldr	r0, [r7, #4]
 80035d6:	f003 fde7 	bl	80071a8 <HAL_HCD_Connect_Callback>
 80035da:	e014      	b.n	8003606 <HCD_Port_IRQHandler+0xfa>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 80035dc:	6878      	ldr	r0, [r7, #4]
 80035de:	f003 fe1b 	bl	8007218 <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      /* Cleanup HPRT */
      USBx_HPRT0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 80035e2:	693b      	ldr	r3, [r7, #16]
 80035e4:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	693a      	ldr	r2, [r7, #16]
 80035ec:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 80035f0:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 80035f4:	6013      	str	r3, [r2, #0]
                      USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_DISCINT);
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	699a      	ldr	r2, [r3, #24]
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 8003604:	619a      	str	r2, [r3, #24]
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 8003606:	68fb      	ldr	r3, [r7, #12]
 8003608:	f003 0320 	and.w	r3, r3, #32
 800360c:	2b20      	cmp	r3, #32
 800360e:	d103      	bne.n	8003618 <HCD_Port_IRQHandler+0x10c>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 8003610:	68bb      	ldr	r3, [r7, #8]
 8003612:	f043 0320 	orr.w	r3, r3, #32
 8003616:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 8003618:	693b      	ldr	r3, [r7, #16]
 800361a:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800361e:	461a      	mov	r2, r3
 8003620:	68bb      	ldr	r3, [r7, #8]
 8003622:	6013      	str	r3, [r2, #0]
}
 8003624:	bf00      	nop
 8003626:	3718      	adds	r7, #24
 8003628:	46bd      	mov	sp, r7
 800362a:	bd80      	pop	{r7, pc}

0800362c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800362c:	b580      	push	{r7, lr}
 800362e:	b084      	sub	sp, #16
 8003630:	af00      	add	r7, sp, #0
 8003632:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	2b00      	cmp	r3, #0
 8003638:	d101      	bne.n	800363e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800363a:	2301      	movs	r3, #1
 800363c:	e11f      	b.n	800387e <HAL_I2C_Init+0x252>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003644:	b2db      	uxtb	r3, r3
 8003646:	2b00      	cmp	r3, #0
 8003648:	d106      	bne.n	8003658 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	2200      	movs	r2, #0
 800364e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8003652:	6878      	ldr	r0, [r7, #4]
 8003654:	f7fd f866 	bl	8000724 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	2224      	movs	r2, #36	; 0x24
 800365c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	681a      	ldr	r2, [r3, #0]
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	f022 0201 	bic.w	r2, r2, #1
 800366e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	681a      	ldr	r2, [r3, #0]
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800367e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	681a      	ldr	r2, [r3, #0]
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800368e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003690:	f001 f9de 	bl	8004a50 <HAL_RCC_GetPCLK1Freq>
 8003694:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	685b      	ldr	r3, [r3, #4]
 800369a:	4a7b      	ldr	r2, [pc, #492]	; (8003888 <HAL_I2C_Init+0x25c>)
 800369c:	4293      	cmp	r3, r2
 800369e:	d807      	bhi.n	80036b0 <HAL_I2C_Init+0x84>
 80036a0:	68fb      	ldr	r3, [r7, #12]
 80036a2:	4a7a      	ldr	r2, [pc, #488]	; (800388c <HAL_I2C_Init+0x260>)
 80036a4:	4293      	cmp	r3, r2
 80036a6:	bf94      	ite	ls
 80036a8:	2301      	movls	r3, #1
 80036aa:	2300      	movhi	r3, #0
 80036ac:	b2db      	uxtb	r3, r3
 80036ae:	e006      	b.n	80036be <HAL_I2C_Init+0x92>
 80036b0:	68fb      	ldr	r3, [r7, #12]
 80036b2:	4a77      	ldr	r2, [pc, #476]	; (8003890 <HAL_I2C_Init+0x264>)
 80036b4:	4293      	cmp	r3, r2
 80036b6:	bf94      	ite	ls
 80036b8:	2301      	movls	r3, #1
 80036ba:	2300      	movhi	r3, #0
 80036bc:	b2db      	uxtb	r3, r3
 80036be:	2b00      	cmp	r3, #0
 80036c0:	d001      	beq.n	80036c6 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80036c2:	2301      	movs	r3, #1
 80036c4:	e0db      	b.n	800387e <HAL_I2C_Init+0x252>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80036c6:	68fb      	ldr	r3, [r7, #12]
 80036c8:	4a72      	ldr	r2, [pc, #456]	; (8003894 <HAL_I2C_Init+0x268>)
 80036ca:	fba2 2303 	umull	r2, r3, r2, r3
 80036ce:	0c9b      	lsrs	r3, r3, #18
 80036d0:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	685b      	ldr	r3, [r3, #4]
 80036d8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	68ba      	ldr	r2, [r7, #8]
 80036e2:	430a      	orrs	r2, r1
 80036e4:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	6a1b      	ldr	r3, [r3, #32]
 80036ec:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	685b      	ldr	r3, [r3, #4]
 80036f4:	4a64      	ldr	r2, [pc, #400]	; (8003888 <HAL_I2C_Init+0x25c>)
 80036f6:	4293      	cmp	r3, r2
 80036f8:	d802      	bhi.n	8003700 <HAL_I2C_Init+0xd4>
 80036fa:	68bb      	ldr	r3, [r7, #8]
 80036fc:	3301      	adds	r3, #1
 80036fe:	e009      	b.n	8003714 <HAL_I2C_Init+0xe8>
 8003700:	68bb      	ldr	r3, [r7, #8]
 8003702:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8003706:	fb02 f303 	mul.w	r3, r2, r3
 800370a:	4a63      	ldr	r2, [pc, #396]	; (8003898 <HAL_I2C_Init+0x26c>)
 800370c:	fba2 2303 	umull	r2, r3, r2, r3
 8003710:	099b      	lsrs	r3, r3, #6
 8003712:	3301      	adds	r3, #1
 8003714:	687a      	ldr	r2, [r7, #4]
 8003716:	6812      	ldr	r2, [r2, #0]
 8003718:	430b      	orrs	r3, r1
 800371a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	69db      	ldr	r3, [r3, #28]
 8003722:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8003726:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	685b      	ldr	r3, [r3, #4]
 800372e:	4956      	ldr	r1, [pc, #344]	; (8003888 <HAL_I2C_Init+0x25c>)
 8003730:	428b      	cmp	r3, r1
 8003732:	d80d      	bhi.n	8003750 <HAL_I2C_Init+0x124>
 8003734:	68fb      	ldr	r3, [r7, #12]
 8003736:	1e59      	subs	r1, r3, #1
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	685b      	ldr	r3, [r3, #4]
 800373c:	005b      	lsls	r3, r3, #1
 800373e:	fbb1 f3f3 	udiv	r3, r1, r3
 8003742:	3301      	adds	r3, #1
 8003744:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003748:	2b04      	cmp	r3, #4
 800374a:	bf38      	it	cc
 800374c:	2304      	movcc	r3, #4
 800374e:	e04f      	b.n	80037f0 <HAL_I2C_Init+0x1c4>
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	689b      	ldr	r3, [r3, #8]
 8003754:	2b00      	cmp	r3, #0
 8003756:	d111      	bne.n	800377c <HAL_I2C_Init+0x150>
 8003758:	68fb      	ldr	r3, [r7, #12]
 800375a:	1e58      	subs	r0, r3, #1
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	6859      	ldr	r1, [r3, #4]
 8003760:	460b      	mov	r3, r1
 8003762:	005b      	lsls	r3, r3, #1
 8003764:	440b      	add	r3, r1
 8003766:	fbb0 f3f3 	udiv	r3, r0, r3
 800376a:	3301      	adds	r3, #1
 800376c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003770:	2b00      	cmp	r3, #0
 8003772:	bf0c      	ite	eq
 8003774:	2301      	moveq	r3, #1
 8003776:	2300      	movne	r3, #0
 8003778:	b2db      	uxtb	r3, r3
 800377a:	e012      	b.n	80037a2 <HAL_I2C_Init+0x176>
 800377c:	68fb      	ldr	r3, [r7, #12]
 800377e:	1e58      	subs	r0, r3, #1
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	6859      	ldr	r1, [r3, #4]
 8003784:	460b      	mov	r3, r1
 8003786:	009b      	lsls	r3, r3, #2
 8003788:	440b      	add	r3, r1
 800378a:	0099      	lsls	r1, r3, #2
 800378c:	440b      	add	r3, r1
 800378e:	fbb0 f3f3 	udiv	r3, r0, r3
 8003792:	3301      	adds	r3, #1
 8003794:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003798:	2b00      	cmp	r3, #0
 800379a:	bf0c      	ite	eq
 800379c:	2301      	moveq	r3, #1
 800379e:	2300      	movne	r3, #0
 80037a0:	b2db      	uxtb	r3, r3
 80037a2:	2b00      	cmp	r3, #0
 80037a4:	d001      	beq.n	80037aa <HAL_I2C_Init+0x17e>
 80037a6:	2301      	movs	r3, #1
 80037a8:	e022      	b.n	80037f0 <HAL_I2C_Init+0x1c4>
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	689b      	ldr	r3, [r3, #8]
 80037ae:	2b00      	cmp	r3, #0
 80037b0:	d10e      	bne.n	80037d0 <HAL_I2C_Init+0x1a4>
 80037b2:	68fb      	ldr	r3, [r7, #12]
 80037b4:	1e58      	subs	r0, r3, #1
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	6859      	ldr	r1, [r3, #4]
 80037ba:	460b      	mov	r3, r1
 80037bc:	005b      	lsls	r3, r3, #1
 80037be:	440b      	add	r3, r1
 80037c0:	fbb0 f3f3 	udiv	r3, r0, r3
 80037c4:	3301      	adds	r3, #1
 80037c6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80037ca:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80037ce:	e00f      	b.n	80037f0 <HAL_I2C_Init+0x1c4>
 80037d0:	68fb      	ldr	r3, [r7, #12]
 80037d2:	1e58      	subs	r0, r3, #1
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	6859      	ldr	r1, [r3, #4]
 80037d8:	460b      	mov	r3, r1
 80037da:	009b      	lsls	r3, r3, #2
 80037dc:	440b      	add	r3, r1
 80037de:	0099      	lsls	r1, r3, #2
 80037e0:	440b      	add	r3, r1
 80037e2:	fbb0 f3f3 	udiv	r3, r0, r3
 80037e6:	3301      	adds	r3, #1
 80037e8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80037ec:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80037f0:	6879      	ldr	r1, [r7, #4]
 80037f2:	6809      	ldr	r1, [r1, #0]
 80037f4:	4313      	orrs	r3, r2
 80037f6:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	69da      	ldr	r2, [r3, #28]
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	6a1b      	ldr	r3, [r3, #32]
 800380a:	431a      	orrs	r2, r3
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	430a      	orrs	r2, r1
 8003812:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	689b      	ldr	r3, [r3, #8]
 800381a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800381e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8003822:	687a      	ldr	r2, [r7, #4]
 8003824:	6911      	ldr	r1, [r2, #16]
 8003826:	687a      	ldr	r2, [r7, #4]
 8003828:	68d2      	ldr	r2, [r2, #12]
 800382a:	4311      	orrs	r1, r2
 800382c:	687a      	ldr	r2, [r7, #4]
 800382e:	6812      	ldr	r2, [r2, #0]
 8003830:	430b      	orrs	r3, r1
 8003832:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	68db      	ldr	r3, [r3, #12]
 800383a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	695a      	ldr	r2, [r3, #20]
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	699b      	ldr	r3, [r3, #24]
 8003846:	431a      	orrs	r2, r3
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	430a      	orrs	r2, r1
 800384e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	681a      	ldr	r2, [r3, #0]
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	f042 0201 	orr.w	r2, r2, #1
 800385e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	2200      	movs	r2, #0
 8003864:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	2220      	movs	r2, #32
 800386a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	2200      	movs	r2, #0
 8003872:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	2200      	movs	r2, #0
 8003878:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800387c:	2300      	movs	r3, #0
}
 800387e:	4618      	mov	r0, r3
 8003880:	3710      	adds	r7, #16
 8003882:	46bd      	mov	sp, r7
 8003884:	bd80      	pop	{r7, pc}
 8003886:	bf00      	nop
 8003888:	000186a0 	.word	0x000186a0
 800388c:	001e847f 	.word	0x001e847f
 8003890:	003d08ff 	.word	0x003d08ff
 8003894:	431bde83 	.word	0x431bde83
 8003898:	10624dd3 	.word	0x10624dd3

0800389c <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 800389c:	b580      	push	{r7, lr}
 800389e:	b088      	sub	sp, #32
 80038a0:	af00      	add	r7, sp, #0
 80038a2:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	2b00      	cmp	r3, #0
 80038a8:	d101      	bne.n	80038ae <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 80038aa:	2301      	movs	r3, #1
 80038ac:	e128      	b.n	8003b00 <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80038b4:	b2db      	uxtb	r3, r3
 80038b6:	2b00      	cmp	r3, #0
 80038b8:	d109      	bne.n	80038ce <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	2200      	movs	r2, #0
 80038be:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	4a90      	ldr	r2, [pc, #576]	; (8003b08 <HAL_I2S_Init+0x26c>)
 80038c6:	635a      	str	r2, [r3, #52]	; 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 80038c8:	6878      	ldr	r0, [r7, #4]
 80038ca:	f7fc ffa3 	bl	8000814 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	2202      	movs	r2, #2
 80038d2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	69db      	ldr	r3, [r3, #28]
 80038dc:	687a      	ldr	r2, [r7, #4]
 80038de:	6812      	ldr	r2, [r2, #0]
 80038e0:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 80038e4:	f023 030f 	bic.w	r3, r3, #15
 80038e8:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	2202      	movs	r2, #2
 80038f0:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	695b      	ldr	r3, [r3, #20]
 80038f6:	2b02      	cmp	r3, #2
 80038f8:	d060      	beq.n	80039bc <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	68db      	ldr	r3, [r3, #12]
 80038fe:	2b00      	cmp	r3, #0
 8003900:	d102      	bne.n	8003908 <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 8003902:	2310      	movs	r3, #16
 8003904:	617b      	str	r3, [r7, #20]
 8003906:	e001      	b.n	800390c <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 8003908:	2320      	movs	r3, #32
 800390a:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	689b      	ldr	r3, [r3, #8]
 8003910:	2b20      	cmp	r3, #32
 8003912:	d802      	bhi.n	800391a <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet lenght is multiplied by 2 */
      packetlength = packetlength * 2U;
 8003914:	697b      	ldr	r3, [r7, #20]
 8003916:	005b      	lsls	r3, r3, #1
 8003918:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 800391a:	2001      	movs	r0, #1
 800391c:	f001 f98e 	bl	8004c3c <HAL_RCCEx_GetPeriphCLKFreq>
 8003920:	60f8      	str	r0, [r7, #12]
#endif

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	691b      	ldr	r3, [r3, #16]
 8003926:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800392a:	d125      	bne.n	8003978 <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	68db      	ldr	r3, [r3, #12]
 8003930:	2b00      	cmp	r3, #0
 8003932:	d010      	beq.n	8003956 <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8003934:	697b      	ldr	r3, [r7, #20]
 8003936:	009b      	lsls	r3, r3, #2
 8003938:	68fa      	ldr	r2, [r7, #12]
 800393a:	fbb2 f2f3 	udiv	r2, r2, r3
 800393e:	4613      	mov	r3, r2
 8003940:	009b      	lsls	r3, r3, #2
 8003942:	4413      	add	r3, r2
 8003944:	005b      	lsls	r3, r3, #1
 8003946:	461a      	mov	r2, r3
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	695b      	ldr	r3, [r3, #20]
 800394c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003950:	3305      	adds	r3, #5
 8003952:	613b      	str	r3, [r7, #16]
 8003954:	e01f      	b.n	8003996 <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8003956:	697b      	ldr	r3, [r7, #20]
 8003958:	00db      	lsls	r3, r3, #3
 800395a:	68fa      	ldr	r2, [r7, #12]
 800395c:	fbb2 f2f3 	udiv	r2, r2, r3
 8003960:	4613      	mov	r3, r2
 8003962:	009b      	lsls	r3, r3, #2
 8003964:	4413      	add	r3, r2
 8003966:	005b      	lsls	r3, r3, #1
 8003968:	461a      	mov	r2, r3
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	695b      	ldr	r3, [r3, #20]
 800396e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003972:	3305      	adds	r3, #5
 8003974:	613b      	str	r3, [r7, #16]
 8003976:	e00e      	b.n	8003996 <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8003978:	68fa      	ldr	r2, [r7, #12]
 800397a:	697b      	ldr	r3, [r7, #20]
 800397c:	fbb2 f2f3 	udiv	r2, r2, r3
 8003980:	4613      	mov	r3, r2
 8003982:	009b      	lsls	r3, r3, #2
 8003984:	4413      	add	r3, r2
 8003986:	005b      	lsls	r3, r3, #1
 8003988:	461a      	mov	r2, r3
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	695b      	ldr	r3, [r3, #20]
 800398e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003992:	3305      	adds	r3, #5
 8003994:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 8003996:	693b      	ldr	r3, [r7, #16]
 8003998:	4a5c      	ldr	r2, [pc, #368]	; (8003b0c <HAL_I2S_Init+0x270>)
 800399a:	fba2 2303 	umull	r2, r3, r2, r3
 800399e:	08db      	lsrs	r3, r3, #3
 80039a0:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 80039a2:	693b      	ldr	r3, [r7, #16]
 80039a4:	f003 0301 	and.w	r3, r3, #1
 80039a8:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 80039aa:	693a      	ldr	r2, [r7, #16]
 80039ac:	69bb      	ldr	r3, [r7, #24]
 80039ae:	1ad3      	subs	r3, r2, r3
 80039b0:	085b      	lsrs	r3, r3, #1
 80039b2:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 80039b4:	69bb      	ldr	r3, [r7, #24]
 80039b6:	021b      	lsls	r3, r3, #8
 80039b8:	61bb      	str	r3, [r7, #24]
 80039ba:	e003      	b.n	80039c4 <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 80039bc:	2302      	movs	r3, #2
 80039be:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 80039c0:	2300      	movs	r3, #0
 80039c2:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 80039c4:	69fb      	ldr	r3, [r7, #28]
 80039c6:	2b01      	cmp	r3, #1
 80039c8:	d902      	bls.n	80039d0 <HAL_I2S_Init+0x134>
 80039ca:	69fb      	ldr	r3, [r7, #28]
 80039cc:	2bff      	cmp	r3, #255	; 0xff
 80039ce:	d907      	bls.n	80039e0 <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80039d4:	f043 0210 	orr.w	r2, r3, #16
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	645a      	str	r2, [r3, #68]	; 0x44
    return  HAL_ERROR;
 80039dc:	2301      	movs	r3, #1
 80039de:	e08f      	b.n	8003b00 <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	691a      	ldr	r2, [r3, #16]
 80039e4:	69bb      	ldr	r3, [r7, #24]
 80039e6:	ea42 0103 	orr.w	r1, r2, r3
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	69fa      	ldr	r2, [r7, #28]
 80039f0:	430a      	orrs	r2, r1
 80039f2:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	69db      	ldr	r3, [r3, #28]
 80039fa:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 80039fe:	f023 030f 	bic.w	r3, r3, #15
 8003a02:	687a      	ldr	r2, [r7, #4]
 8003a04:	6851      	ldr	r1, [r2, #4]
 8003a06:	687a      	ldr	r2, [r7, #4]
 8003a08:	6892      	ldr	r2, [r2, #8]
 8003a0a:	4311      	orrs	r1, r2
 8003a0c:	687a      	ldr	r2, [r7, #4]
 8003a0e:	68d2      	ldr	r2, [r2, #12]
 8003a10:	4311      	orrs	r1, r2
 8003a12:	687a      	ldr	r2, [r7, #4]
 8003a14:	6992      	ldr	r2, [r2, #24]
 8003a16:	430a      	orrs	r2, r1
 8003a18:	431a      	orrs	r2, r3
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003a22:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	6a1b      	ldr	r3, [r3, #32]
 8003a28:	2b01      	cmp	r3, #1
 8003a2a:	d161      	bne.n	8003af0 <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	4a38      	ldr	r2, [pc, #224]	; (8003b10 <HAL_I2S_Init+0x274>)
 8003a30:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	4a37      	ldr	r2, [pc, #220]	; (8003b14 <HAL_I2S_Init+0x278>)
 8003a38:	4293      	cmp	r3, r2
 8003a3a:	d101      	bne.n	8003a40 <HAL_I2S_Init+0x1a4>
 8003a3c:	4b36      	ldr	r3, [pc, #216]	; (8003b18 <HAL_I2S_Init+0x27c>)
 8003a3e:	e001      	b.n	8003a44 <HAL_I2S_Init+0x1a8>
 8003a40:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003a44:	69db      	ldr	r3, [r3, #28]
 8003a46:	687a      	ldr	r2, [r7, #4]
 8003a48:	6812      	ldr	r2, [r2, #0]
 8003a4a:	4932      	ldr	r1, [pc, #200]	; (8003b14 <HAL_I2S_Init+0x278>)
 8003a4c:	428a      	cmp	r2, r1
 8003a4e:	d101      	bne.n	8003a54 <HAL_I2S_Init+0x1b8>
 8003a50:	4a31      	ldr	r2, [pc, #196]	; (8003b18 <HAL_I2S_Init+0x27c>)
 8003a52:	e001      	b.n	8003a58 <HAL_I2S_Init+0x1bc>
 8003a54:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 8003a58:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8003a5c:	f023 030f 	bic.w	r3, r3, #15
 8003a60:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	4a2b      	ldr	r2, [pc, #172]	; (8003b14 <HAL_I2S_Init+0x278>)
 8003a68:	4293      	cmp	r3, r2
 8003a6a:	d101      	bne.n	8003a70 <HAL_I2S_Init+0x1d4>
 8003a6c:	4b2a      	ldr	r3, [pc, #168]	; (8003b18 <HAL_I2S_Init+0x27c>)
 8003a6e:	e001      	b.n	8003a74 <HAL_I2S_Init+0x1d8>
 8003a70:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003a74:	2202      	movs	r2, #2
 8003a76:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	4a25      	ldr	r2, [pc, #148]	; (8003b14 <HAL_I2S_Init+0x278>)
 8003a7e:	4293      	cmp	r3, r2
 8003a80:	d101      	bne.n	8003a86 <HAL_I2S_Init+0x1ea>
 8003a82:	4b25      	ldr	r3, [pc, #148]	; (8003b18 <HAL_I2S_Init+0x27c>)
 8003a84:	e001      	b.n	8003a8a <HAL_I2S_Init+0x1ee>
 8003a86:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003a8a:	69db      	ldr	r3, [r3, #28]
 8003a8c:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	685b      	ldr	r3, [r3, #4]
 8003a92:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003a96:	d003      	beq.n	8003aa0 <HAL_I2S_Init+0x204>
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	685b      	ldr	r3, [r3, #4]
 8003a9c:	2b00      	cmp	r3, #0
 8003a9e:	d103      	bne.n	8003aa8 <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 8003aa0:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003aa4:	613b      	str	r3, [r7, #16]
 8003aa6:	e001      	b.n	8003aac <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 8003aa8:	2300      	movs	r3, #0
 8003aaa:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD | (uint16_t)(tmp | \
 8003aac:	693b      	ldr	r3, [r7, #16]
 8003aae:	b29a      	uxth	r2, r3
                         (uint16_t)(hi2s->Init.Standard | (uint16_t)(hi2s->Init.DataFormat | \
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	689b      	ldr	r3, [r3, #8]
 8003ab4:	b299      	uxth	r1, r3
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	68db      	ldr	r3, [r3, #12]
 8003aba:	b298      	uxth	r0, r3
                                    (uint16_t)hi2s->Init.CPOL))));
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	699b      	ldr	r3, [r3, #24]
 8003ac0:	b29b      	uxth	r3, r3
                         (uint16_t)(hi2s->Init.Standard | (uint16_t)(hi2s->Init.DataFormat | \
 8003ac2:	4303      	orrs	r3, r0
 8003ac4:	b29b      	uxth	r3, r3
 8003ac6:	430b      	orrs	r3, r1
 8003ac8:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD | (uint16_t)(tmp | \
 8003aca:	4313      	orrs	r3, r2
 8003acc:	b29a      	uxth	r2, r3
 8003ace:	897b      	ldrh	r3, [r7, #10]
 8003ad0:	4313      	orrs	r3, r2
 8003ad2:	b29b      	uxth	r3, r3
 8003ad4:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8003ad8:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	4a0d      	ldr	r2, [pc, #52]	; (8003b14 <HAL_I2S_Init+0x278>)
 8003ae0:	4293      	cmp	r3, r2
 8003ae2:	d101      	bne.n	8003ae8 <HAL_I2S_Init+0x24c>
 8003ae4:	4b0c      	ldr	r3, [pc, #48]	; (8003b18 <HAL_I2S_Init+0x27c>)
 8003ae6:	e001      	b.n	8003aec <HAL_I2S_Init+0x250>
 8003ae8:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003aec:	897a      	ldrh	r2, [r7, #10]
 8003aee:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	2200      	movs	r2, #0
 8003af4:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	2201      	movs	r2, #1
 8003afa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  return HAL_OK;
 8003afe:	2300      	movs	r3, #0
}
 8003b00:	4618      	mov	r0, r3
 8003b02:	3720      	adds	r7, #32
 8003b04:	46bd      	mov	sp, r7
 8003b06:	bd80      	pop	{r7, pc}
 8003b08:	08003c13 	.word	0x08003c13
 8003b0c:	cccccccd 	.word	0xcccccccd
 8003b10:	08003d29 	.word	0x08003d29
 8003b14:	40003800 	.word	0x40003800
 8003b18:	40003400 	.word	0x40003400

08003b1c <HAL_I2S_TxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8003b1c:	b480      	push	{r7}
 8003b1e:	b083      	sub	sp, #12
 8003b20:	af00      	add	r7, sp, #0
 8003b22:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxCpltCallback could be implemented in the user file
   */
}
 8003b24:	bf00      	nop
 8003b26:	370c      	adds	r7, #12
 8003b28:	46bd      	mov	sp, r7
 8003b2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b2e:	4770      	bx	lr

08003b30 <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8003b30:	b480      	push	{r7}
 8003b32:	b083      	sub	sp, #12
 8003b34:	af00      	add	r7, sp, #0
 8003b36:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 8003b38:	bf00      	nop
 8003b3a:	370c      	adds	r7, #12
 8003b3c:	46bd      	mov	sp, r7
 8003b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b42:	4770      	bx	lr

08003b44 <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 8003b44:	b480      	push	{r7}
 8003b46:	b083      	sub	sp, #12
 8003b48:	af00      	add	r7, sp, #0
 8003b4a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 8003b4c:	bf00      	nop
 8003b4e:	370c      	adds	r7, #12
 8003b50:	46bd      	mov	sp, r7
 8003b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b56:	4770      	bx	lr

08003b58 <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 8003b58:	b580      	push	{r7, lr}
 8003b5a:	b082      	sub	sp, #8
 8003b5c:	af00      	add	r7, sp, #0
 8003b5e:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b64:	881a      	ldrh	r2, [r3, #0]
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b70:	1c9a      	adds	r2, r3, #2
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	625a      	str	r2, [r3, #36]	; 0x24
  hi2s->TxXferCount--;
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b7a:	b29b      	uxth	r3, r3
 8003b7c:	3b01      	subs	r3, #1
 8003b7e:	b29a      	uxth	r2, r3
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b88:	b29b      	uxth	r3, r3
 8003b8a:	2b00      	cmp	r3, #0
 8003b8c:	d10e      	bne.n	8003bac <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	685a      	ldr	r2, [r3, #4]
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003b9c:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	2201      	movs	r2, #1
 8003ba2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 8003ba6:	6878      	ldr	r0, [r7, #4]
 8003ba8:	f7ff ffb8 	bl	8003b1c <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8003bac:	bf00      	nop
 8003bae:	3708      	adds	r7, #8
 8003bb0:	46bd      	mov	sp, r7
 8003bb2:	bd80      	pop	{r7, pc}

08003bb4 <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 8003bb4:	b580      	push	{r7, lr}
 8003bb6:	b082      	sub	sp, #8
 8003bb8:	af00      	add	r7, sp, #0
 8003bba:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	68da      	ldr	r2, [r3, #12]
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003bc6:	b292      	uxth	r2, r2
 8003bc8:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003bce:	1c9a      	adds	r2, r3, #2
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2s->RxXferCount--;
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003bd8:	b29b      	uxth	r3, r3
 8003bda:	3b01      	subs	r3, #1
 8003bdc:	b29a      	uxth	r2, r3
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003be6:	b29b      	uxth	r3, r3
 8003be8:	2b00      	cmp	r3, #0
 8003bea:	d10e      	bne.n	8003c0a <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	685a      	ldr	r2, [r3, #4]
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003bfa:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	2201      	movs	r2, #1
 8003c00:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 8003c04:	6878      	ldr	r0, [r7, #4]
 8003c06:	f7ff ff93 	bl	8003b30 <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8003c0a:	bf00      	nop
 8003c0c:	3708      	adds	r7, #8
 8003c0e:	46bd      	mov	sp, r7
 8003c10:	bd80      	pop	{r7, pc}

08003c12 <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8003c12:	b580      	push	{r7, lr}
 8003c14:	b086      	sub	sp, #24
 8003c16:	af00      	add	r7, sp, #0
 8003c18:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	689b      	ldr	r3, [r3, #8]
 8003c20:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003c28:	b2db      	uxtb	r3, r3
 8003c2a:	2b04      	cmp	r3, #4
 8003c2c:	d13a      	bne.n	8003ca4 <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 8003c2e:	697b      	ldr	r3, [r7, #20]
 8003c30:	f003 0301 	and.w	r3, r3, #1
 8003c34:	2b01      	cmp	r3, #1
 8003c36:	d109      	bne.n	8003c4c <I2S_IRQHandler+0x3a>
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	685b      	ldr	r3, [r3, #4]
 8003c3e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003c42:	2b40      	cmp	r3, #64	; 0x40
 8003c44:	d102      	bne.n	8003c4c <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 8003c46:	6878      	ldr	r0, [r7, #4]
 8003c48:	f7ff ffb4 	bl	8003bb4 <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8003c4c:	697b      	ldr	r3, [r7, #20]
 8003c4e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003c52:	2b40      	cmp	r3, #64	; 0x40
 8003c54:	d126      	bne.n	8003ca4 <I2S_IRQHandler+0x92>
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	685b      	ldr	r3, [r3, #4]
 8003c5c:	f003 0320 	and.w	r3, r3, #32
 8003c60:	2b20      	cmp	r3, #32
 8003c62:	d11f      	bne.n	8003ca4 <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	685a      	ldr	r2, [r3, #4]
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003c72:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8003c74:	2300      	movs	r3, #0
 8003c76:	613b      	str	r3, [r7, #16]
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	68db      	ldr	r3, [r3, #12]
 8003c7e:	613b      	str	r3, [r7, #16]
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	689b      	ldr	r3, [r3, #8]
 8003c86:	613b      	str	r3, [r7, #16]
 8003c88:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	2201      	movs	r2, #1
 8003c8e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c96:	f043 0202 	orr.w	r2, r3, #2
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003c9e:	6878      	ldr	r0, [r7, #4]
 8003ca0:	f7ff ff50 	bl	8003b44 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003caa:	b2db      	uxtb	r3, r3
 8003cac:	2b03      	cmp	r3, #3
 8003cae:	d136      	bne.n	8003d1e <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 8003cb0:	697b      	ldr	r3, [r7, #20]
 8003cb2:	f003 0302 	and.w	r3, r3, #2
 8003cb6:	2b02      	cmp	r3, #2
 8003cb8:	d109      	bne.n	8003cce <I2S_IRQHandler+0xbc>
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	685b      	ldr	r3, [r3, #4]
 8003cc0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003cc4:	2b80      	cmp	r3, #128	; 0x80
 8003cc6:	d102      	bne.n	8003cce <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 8003cc8:	6878      	ldr	r0, [r7, #4]
 8003cca:	f7ff ff45 	bl	8003b58 <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8003cce:	697b      	ldr	r3, [r7, #20]
 8003cd0:	f003 0308 	and.w	r3, r3, #8
 8003cd4:	2b08      	cmp	r3, #8
 8003cd6:	d122      	bne.n	8003d1e <I2S_IRQHandler+0x10c>
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	685b      	ldr	r3, [r3, #4]
 8003cde:	f003 0320 	and.w	r3, r3, #32
 8003ce2:	2b20      	cmp	r3, #32
 8003ce4:	d11b      	bne.n	8003d1e <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	685a      	ldr	r2, [r3, #4]
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003cf4:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8003cf6:	2300      	movs	r3, #0
 8003cf8:	60fb      	str	r3, [r7, #12]
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	689b      	ldr	r3, [r3, #8]
 8003d00:	60fb      	str	r3, [r7, #12]
 8003d02:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	2201      	movs	r2, #1
 8003d08:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d10:	f043 0204 	orr.w	r2, r3, #4
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003d18:	6878      	ldr	r0, [r7, #4]
 8003d1a:	f7ff ff13 	bl	8003b44 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003d1e:	bf00      	nop
 8003d20:	3718      	adds	r7, #24
 8003d22:	46bd      	mov	sp, r7
 8003d24:	bd80      	pop	{r7, pc}
	...

08003d28 <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8003d28:	b580      	push	{r7, lr}
 8003d2a:	b088      	sub	sp, #32
 8003d2c:	af00      	add	r7, sp, #0
 8003d2e:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	689b      	ldr	r3, [r3, #8]
 8003d36:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	4aa2      	ldr	r2, [pc, #648]	; (8003fc8 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8003d3e:	4293      	cmp	r3, r2
 8003d40:	d101      	bne.n	8003d46 <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 8003d42:	4ba2      	ldr	r3, [pc, #648]	; (8003fcc <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8003d44:	e001      	b.n	8003d4a <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 8003d46:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003d4a:	689b      	ldr	r3, [r3, #8]
 8003d4c:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	685b      	ldr	r3, [r3, #4]
 8003d54:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	4a9b      	ldr	r2, [pc, #620]	; (8003fc8 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8003d5c:	4293      	cmp	r3, r2
 8003d5e:	d101      	bne.n	8003d64 <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 8003d60:	4b9a      	ldr	r3, [pc, #616]	; (8003fcc <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8003d62:	e001      	b.n	8003d68 <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 8003d64:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003d68:	685b      	ldr	r3, [r3, #4]
 8003d6a:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	685b      	ldr	r3, [r3, #4]
 8003d70:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003d74:	d004      	beq.n	8003d80 <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	685b      	ldr	r3, [r3, #4]
 8003d7a:	2b00      	cmp	r3, #0
 8003d7c:	f040 8099 	bne.w	8003eb2 <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 8003d80:	69fb      	ldr	r3, [r7, #28]
 8003d82:	f003 0302 	and.w	r3, r3, #2
 8003d86:	2b02      	cmp	r3, #2
 8003d88:	d107      	bne.n	8003d9a <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 8003d8a:	697b      	ldr	r3, [r7, #20]
 8003d8c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003d90:	2b00      	cmp	r3, #0
 8003d92:	d002      	beq.n	8003d9a <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 8003d94:	6878      	ldr	r0, [r7, #4]
 8003d96:	f000 f925 	bl	8003fe4 <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 8003d9a:	69bb      	ldr	r3, [r7, #24]
 8003d9c:	f003 0301 	and.w	r3, r3, #1
 8003da0:	2b01      	cmp	r3, #1
 8003da2:	d107      	bne.n	8003db4 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 8003da4:	693b      	ldr	r3, [r7, #16]
 8003da6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003daa:	2b00      	cmp	r3, #0
 8003dac:	d002      	beq.n	8003db4 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 8003dae:	6878      	ldr	r0, [r7, #4]
 8003db0:	f000 f9c8 	bl	8004144 <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8003db4:	69bb      	ldr	r3, [r7, #24]
 8003db6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003dba:	2b40      	cmp	r3, #64	; 0x40
 8003dbc:	d13a      	bne.n	8003e34 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 8003dbe:	693b      	ldr	r3, [r7, #16]
 8003dc0:	f003 0320 	and.w	r3, r3, #32
 8003dc4:	2b00      	cmp	r3, #0
 8003dc6:	d035      	beq.n	8003e34 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	4a7e      	ldr	r2, [pc, #504]	; (8003fc8 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8003dce:	4293      	cmp	r3, r2
 8003dd0:	d101      	bne.n	8003dd6 <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 8003dd2:	4b7e      	ldr	r3, [pc, #504]	; (8003fcc <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8003dd4:	e001      	b.n	8003dda <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 8003dd6:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003dda:	685a      	ldr	r2, [r3, #4]
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	4979      	ldr	r1, [pc, #484]	; (8003fc8 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8003de2:	428b      	cmp	r3, r1
 8003de4:	d101      	bne.n	8003dea <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 8003de6:	4b79      	ldr	r3, [pc, #484]	; (8003fcc <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8003de8:	e001      	b.n	8003dee <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 8003dea:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003dee:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003df2:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	685a      	ldr	r2, [r3, #4]
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003e02:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8003e04:	2300      	movs	r3, #0
 8003e06:	60fb      	str	r3, [r7, #12]
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	68db      	ldr	r3, [r3, #12]
 8003e0e:	60fb      	str	r3, [r7, #12]
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	689b      	ldr	r3, [r3, #8]
 8003e16:	60fb      	str	r3, [r7, #12]
 8003e18:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	2201      	movs	r2, #1
 8003e1e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e26:	f043 0202 	orr.w	r2, r3, #2
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003e2e:	6878      	ldr	r0, [r7, #4]
 8003e30:	f7ff fe88 	bl	8003b44 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8003e34:	69fb      	ldr	r3, [r7, #28]
 8003e36:	f003 0308 	and.w	r3, r3, #8
 8003e3a:	2b08      	cmp	r3, #8
 8003e3c:	f040 80be 	bne.w	8003fbc <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
 8003e40:	697b      	ldr	r3, [r7, #20]
 8003e42:	f003 0320 	and.w	r3, r3, #32
 8003e46:	2b00      	cmp	r3, #0
 8003e48:	f000 80b8 	beq.w	8003fbc <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	685a      	ldr	r2, [r3, #4]
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003e5a:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	4a59      	ldr	r2, [pc, #356]	; (8003fc8 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8003e62:	4293      	cmp	r3, r2
 8003e64:	d101      	bne.n	8003e6a <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 8003e66:	4b59      	ldr	r3, [pc, #356]	; (8003fcc <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8003e68:	e001      	b.n	8003e6e <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 8003e6a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003e6e:	685a      	ldr	r2, [r3, #4]
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	4954      	ldr	r1, [pc, #336]	; (8003fc8 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8003e76:	428b      	cmp	r3, r1
 8003e78:	d101      	bne.n	8003e7e <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 8003e7a:	4b54      	ldr	r3, [pc, #336]	; (8003fcc <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8003e7c:	e001      	b.n	8003e82 <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 8003e7e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003e82:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003e86:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8003e88:	2300      	movs	r3, #0
 8003e8a:	60bb      	str	r3, [r7, #8]
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	689b      	ldr	r3, [r3, #8]
 8003e92:	60bb      	str	r3, [r7, #8]
 8003e94:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	2201      	movs	r2, #1
 8003e9a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ea2:	f043 0204 	orr.w	r2, r3, #4
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003eaa:	6878      	ldr	r0, [r7, #4]
 8003eac:	f7ff fe4a 	bl	8003b44 <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8003eb0:	e084      	b.n	8003fbc <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 8003eb2:	69bb      	ldr	r3, [r7, #24]
 8003eb4:	f003 0302 	and.w	r3, r3, #2
 8003eb8:	2b02      	cmp	r3, #2
 8003eba:	d107      	bne.n	8003ecc <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 8003ebc:	693b      	ldr	r3, [r7, #16]
 8003ebe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003ec2:	2b00      	cmp	r3, #0
 8003ec4:	d002      	beq.n	8003ecc <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 8003ec6:	6878      	ldr	r0, [r7, #4]
 8003ec8:	f000 f8be 	bl	8004048 <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 8003ecc:	69fb      	ldr	r3, [r7, #28]
 8003ece:	f003 0301 	and.w	r3, r3, #1
 8003ed2:	2b01      	cmp	r3, #1
 8003ed4:	d107      	bne.n	8003ee6 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 8003ed6:	697b      	ldr	r3, [r7, #20]
 8003ed8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003edc:	2b00      	cmp	r3, #0
 8003ede:	d002      	beq.n	8003ee6 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 8003ee0:	6878      	ldr	r0, [r7, #4]
 8003ee2:	f000 f8fd 	bl	80040e0 <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8003ee6:	69fb      	ldr	r3, [r7, #28]
 8003ee8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003eec:	2b40      	cmp	r3, #64	; 0x40
 8003eee:	d12f      	bne.n	8003f50 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 8003ef0:	697b      	ldr	r3, [r7, #20]
 8003ef2:	f003 0320 	and.w	r3, r3, #32
 8003ef6:	2b00      	cmp	r3, #0
 8003ef8:	d02a      	beq.n	8003f50 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	685a      	ldr	r2, [r3, #4]
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003f08:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	4a2e      	ldr	r2, [pc, #184]	; (8003fc8 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8003f10:	4293      	cmp	r3, r2
 8003f12:	d101      	bne.n	8003f18 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 8003f14:	4b2d      	ldr	r3, [pc, #180]	; (8003fcc <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8003f16:	e001      	b.n	8003f1c <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 8003f18:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003f1c:	685a      	ldr	r2, [r3, #4]
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	4929      	ldr	r1, [pc, #164]	; (8003fc8 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8003f24:	428b      	cmp	r3, r1
 8003f26:	d101      	bne.n	8003f2c <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 8003f28:	4b28      	ldr	r3, [pc, #160]	; (8003fcc <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8003f2a:	e001      	b.n	8003f30 <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 8003f2c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003f30:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003f34:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	2201      	movs	r2, #1
 8003f3a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f42:	f043 0202 	orr.w	r2, r3, #2
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003f4a:	6878      	ldr	r0, [r7, #4]
 8003f4c:	f7ff fdfa 	bl	8003b44 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8003f50:	69bb      	ldr	r3, [r7, #24]
 8003f52:	f003 0308 	and.w	r3, r3, #8
 8003f56:	2b08      	cmp	r3, #8
 8003f58:	d131      	bne.n	8003fbe <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
 8003f5a:	693b      	ldr	r3, [r7, #16]
 8003f5c:	f003 0320 	and.w	r3, r3, #32
 8003f60:	2b00      	cmp	r3, #0
 8003f62:	d02c      	beq.n	8003fbe <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	4a17      	ldr	r2, [pc, #92]	; (8003fc8 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8003f6a:	4293      	cmp	r3, r2
 8003f6c:	d101      	bne.n	8003f72 <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 8003f6e:	4b17      	ldr	r3, [pc, #92]	; (8003fcc <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8003f70:	e001      	b.n	8003f76 <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 8003f72:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003f76:	685a      	ldr	r2, [r3, #4]
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	4912      	ldr	r1, [pc, #72]	; (8003fc8 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8003f7e:	428b      	cmp	r3, r1
 8003f80:	d101      	bne.n	8003f86 <HAL_I2SEx_FullDuplex_IRQHandler+0x25e>
 8003f82:	4b12      	ldr	r3, [pc, #72]	; (8003fcc <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8003f84:	e001      	b.n	8003f8a <HAL_I2SEx_FullDuplex_IRQHandler+0x262>
 8003f86:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003f8a:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003f8e:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	685a      	ldr	r2, [r3, #4]
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003f9e:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	2201      	movs	r2, #1
 8003fa4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003fac:	f043 0204 	orr.w	r2, r3, #4
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003fb4:	6878      	ldr	r0, [r7, #4]
 8003fb6:	f7ff fdc5 	bl	8003b44 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003fba:	e000      	b.n	8003fbe <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8003fbc:	bf00      	nop
}
 8003fbe:	bf00      	nop
 8003fc0:	3720      	adds	r7, #32
 8003fc2:	46bd      	mov	sp, r7
 8003fc4:	bd80      	pop	{r7, pc}
 8003fc6:	bf00      	nop
 8003fc8:	40003800 	.word	0x40003800
 8003fcc:	40003400 	.word	0x40003400

08003fd0 <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8003fd0:	b480      	push	{r7}
 8003fd2:	b083      	sub	sp, #12
 8003fd4:	af00      	add	r7, sp, #0
 8003fd6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 8003fd8:	bf00      	nop
 8003fda:	370c      	adds	r7, #12
 8003fdc:	46bd      	mov	sp, r7
 8003fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fe2:	4770      	bx	lr

08003fe4 <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8003fe4:	b580      	push	{r7, lr}
 8003fe6:	b082      	sub	sp, #8
 8003fe8:	af00      	add	r7, sp, #0
 8003fea:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ff0:	1c99      	adds	r1, r3, #2
 8003ff2:	687a      	ldr	r2, [r7, #4]
 8003ff4:	6251      	str	r1, [r2, #36]	; 0x24
 8003ff6:	881a      	ldrh	r2, [r3, #0]
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004002:	b29b      	uxth	r3, r3
 8004004:	3b01      	subs	r3, #1
 8004006:	b29a      	uxth	r2, r3
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004010:	b29b      	uxth	r3, r3
 8004012:	2b00      	cmp	r3, #0
 8004014:	d113      	bne.n	800403e <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	685a      	ldr	r2, [r3, #4]
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8004024:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800402a:	b29b      	uxth	r3, r3
 800402c:	2b00      	cmp	r3, #0
 800402e:	d106      	bne.n	800403e <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	2201      	movs	r2, #1
 8004034:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8004038:	6878      	ldr	r0, [r7, #4]
 800403a:	f7ff ffc9 	bl	8003fd0 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800403e:	bf00      	nop
 8004040:	3708      	adds	r7, #8
 8004042:	46bd      	mov	sp, r7
 8004044:	bd80      	pop	{r7, pc}
	...

08004048 <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8004048:	b580      	push	{r7, lr}
 800404a:	b082      	sub	sp, #8
 800404c:	af00      	add	r7, sp, #0
 800404e:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004054:	1c99      	adds	r1, r3, #2
 8004056:	687a      	ldr	r2, [r7, #4]
 8004058:	6251      	str	r1, [r2, #36]	; 0x24
 800405a:	8819      	ldrh	r1, [r3, #0]
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	4a1d      	ldr	r2, [pc, #116]	; (80040d8 <I2SEx_TxISR_I2SExt+0x90>)
 8004062:	4293      	cmp	r3, r2
 8004064:	d101      	bne.n	800406a <I2SEx_TxISR_I2SExt+0x22>
 8004066:	4b1d      	ldr	r3, [pc, #116]	; (80040dc <I2SEx_TxISR_I2SExt+0x94>)
 8004068:	e001      	b.n	800406e <I2SEx_TxISR_I2SExt+0x26>
 800406a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800406e:	460a      	mov	r2, r1
 8004070:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004076:	b29b      	uxth	r3, r3
 8004078:	3b01      	subs	r3, #1
 800407a:	b29a      	uxth	r2, r3
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004084:	b29b      	uxth	r3, r3
 8004086:	2b00      	cmp	r3, #0
 8004088:	d121      	bne.n	80040ce <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	4a12      	ldr	r2, [pc, #72]	; (80040d8 <I2SEx_TxISR_I2SExt+0x90>)
 8004090:	4293      	cmp	r3, r2
 8004092:	d101      	bne.n	8004098 <I2SEx_TxISR_I2SExt+0x50>
 8004094:	4b11      	ldr	r3, [pc, #68]	; (80040dc <I2SEx_TxISR_I2SExt+0x94>)
 8004096:	e001      	b.n	800409c <I2SEx_TxISR_I2SExt+0x54>
 8004098:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800409c:	685a      	ldr	r2, [r3, #4]
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	490d      	ldr	r1, [pc, #52]	; (80040d8 <I2SEx_TxISR_I2SExt+0x90>)
 80040a4:	428b      	cmp	r3, r1
 80040a6:	d101      	bne.n	80040ac <I2SEx_TxISR_I2SExt+0x64>
 80040a8:	4b0c      	ldr	r3, [pc, #48]	; (80040dc <I2SEx_TxISR_I2SExt+0x94>)
 80040aa:	e001      	b.n	80040b0 <I2SEx_TxISR_I2SExt+0x68>
 80040ac:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80040b0:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80040b4:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80040ba:	b29b      	uxth	r3, r3
 80040bc:	2b00      	cmp	r3, #0
 80040be:	d106      	bne.n	80040ce <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	2201      	movs	r2, #1
 80040c4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80040c8:	6878      	ldr	r0, [r7, #4]
 80040ca:	f7ff ff81 	bl	8003fd0 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80040ce:	bf00      	nop
 80040d0:	3708      	adds	r7, #8
 80040d2:	46bd      	mov	sp, r7
 80040d4:	bd80      	pop	{r7, pc}
 80040d6:	bf00      	nop
 80040d8:	40003800 	.word	0x40003800
 80040dc:	40003400 	.word	0x40003400

080040e0 <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 80040e0:	b580      	push	{r7, lr}
 80040e2:	b082      	sub	sp, #8
 80040e4:	af00      	add	r7, sp, #0
 80040e6:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	68d8      	ldr	r0, [r3, #12]
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040f2:	1c99      	adds	r1, r3, #2
 80040f4:	687a      	ldr	r2, [r7, #4]
 80040f6:	62d1      	str	r1, [r2, #44]	; 0x2c
 80040f8:	b282      	uxth	r2, r0
 80040fa:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8004100:	b29b      	uxth	r3, r3
 8004102:	3b01      	subs	r3, #1
 8004104:	b29a      	uxth	r2, r3
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800410e:	b29b      	uxth	r3, r3
 8004110:	2b00      	cmp	r3, #0
 8004112:	d113      	bne.n	800413c <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	685a      	ldr	r2, [r3, #4]
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8004122:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004128:	b29b      	uxth	r3, r3
 800412a:	2b00      	cmp	r3, #0
 800412c:	d106      	bne.n	800413c <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	2201      	movs	r2, #1
 8004132:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8004136:	6878      	ldr	r0, [r7, #4]
 8004138:	f7ff ff4a 	bl	8003fd0 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800413c:	bf00      	nop
 800413e:	3708      	adds	r7, #8
 8004140:	46bd      	mov	sp, r7
 8004142:	bd80      	pop	{r7, pc}

08004144 <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8004144:	b580      	push	{r7, lr}
 8004146:	b082      	sub	sp, #8
 8004148:	af00      	add	r7, sp, #0
 800414a:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	4a20      	ldr	r2, [pc, #128]	; (80041d4 <I2SEx_RxISR_I2SExt+0x90>)
 8004152:	4293      	cmp	r3, r2
 8004154:	d101      	bne.n	800415a <I2SEx_RxISR_I2SExt+0x16>
 8004156:	4b20      	ldr	r3, [pc, #128]	; (80041d8 <I2SEx_RxISR_I2SExt+0x94>)
 8004158:	e001      	b.n	800415e <I2SEx_RxISR_I2SExt+0x1a>
 800415a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800415e:	68d8      	ldr	r0, [r3, #12]
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004164:	1c99      	adds	r1, r3, #2
 8004166:	687a      	ldr	r2, [r7, #4]
 8004168:	62d1      	str	r1, [r2, #44]	; 0x2c
 800416a:	b282      	uxth	r2, r0
 800416c:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8004172:	b29b      	uxth	r3, r3
 8004174:	3b01      	subs	r3, #1
 8004176:	b29a      	uxth	r2, r3
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8004180:	b29b      	uxth	r3, r3
 8004182:	2b00      	cmp	r3, #0
 8004184:	d121      	bne.n	80041ca <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	4a12      	ldr	r2, [pc, #72]	; (80041d4 <I2SEx_RxISR_I2SExt+0x90>)
 800418c:	4293      	cmp	r3, r2
 800418e:	d101      	bne.n	8004194 <I2SEx_RxISR_I2SExt+0x50>
 8004190:	4b11      	ldr	r3, [pc, #68]	; (80041d8 <I2SEx_RxISR_I2SExt+0x94>)
 8004192:	e001      	b.n	8004198 <I2SEx_RxISR_I2SExt+0x54>
 8004194:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004198:	685a      	ldr	r2, [r3, #4]
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	490d      	ldr	r1, [pc, #52]	; (80041d4 <I2SEx_RxISR_I2SExt+0x90>)
 80041a0:	428b      	cmp	r3, r1
 80041a2:	d101      	bne.n	80041a8 <I2SEx_RxISR_I2SExt+0x64>
 80041a4:	4b0c      	ldr	r3, [pc, #48]	; (80041d8 <I2SEx_RxISR_I2SExt+0x94>)
 80041a6:	e001      	b.n	80041ac <I2SEx_RxISR_I2SExt+0x68>
 80041a8:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80041ac:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80041b0:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80041b6:	b29b      	uxth	r3, r3
 80041b8:	2b00      	cmp	r3, #0
 80041ba:	d106      	bne.n	80041ca <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	2201      	movs	r2, #1
 80041c0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80041c4:	6878      	ldr	r0, [r7, #4]
 80041c6:	f7ff ff03 	bl	8003fd0 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80041ca:	bf00      	nop
 80041cc:	3708      	adds	r7, #8
 80041ce:	46bd      	mov	sp, r7
 80041d0:	bd80      	pop	{r7, pc}
 80041d2:	bf00      	nop
 80041d4:	40003800 	.word	0x40003800
 80041d8:	40003400 	.word	0x40003400

080041dc <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80041dc:	b580      	push	{r7, lr}
 80041de:	b086      	sub	sp, #24
 80041e0:	af00      	add	r7, sp, #0
 80041e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	2b00      	cmp	r3, #0
 80041e8:	d101      	bne.n	80041ee <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80041ea:	2301      	movs	r3, #1
 80041ec:	e25b      	b.n	80046a6 <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	f003 0301 	and.w	r3, r3, #1
 80041f6:	2b00      	cmp	r3, #0
 80041f8:	d075      	beq.n	80042e6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80041fa:	4ba3      	ldr	r3, [pc, #652]	; (8004488 <HAL_RCC_OscConfig+0x2ac>)
 80041fc:	689b      	ldr	r3, [r3, #8]
 80041fe:	f003 030c 	and.w	r3, r3, #12
 8004202:	2b04      	cmp	r3, #4
 8004204:	d00c      	beq.n	8004220 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004206:	4ba0      	ldr	r3, [pc, #640]	; (8004488 <HAL_RCC_OscConfig+0x2ac>)
 8004208:	689b      	ldr	r3, [r3, #8]
 800420a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800420e:	2b08      	cmp	r3, #8
 8004210:	d112      	bne.n	8004238 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004212:	4b9d      	ldr	r3, [pc, #628]	; (8004488 <HAL_RCC_OscConfig+0x2ac>)
 8004214:	685b      	ldr	r3, [r3, #4]
 8004216:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800421a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800421e:	d10b      	bne.n	8004238 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004220:	4b99      	ldr	r3, [pc, #612]	; (8004488 <HAL_RCC_OscConfig+0x2ac>)
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004228:	2b00      	cmp	r3, #0
 800422a:	d05b      	beq.n	80042e4 <HAL_RCC_OscConfig+0x108>
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	685b      	ldr	r3, [r3, #4]
 8004230:	2b00      	cmp	r3, #0
 8004232:	d157      	bne.n	80042e4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004234:	2301      	movs	r3, #1
 8004236:	e236      	b.n	80046a6 <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	685b      	ldr	r3, [r3, #4]
 800423c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004240:	d106      	bne.n	8004250 <HAL_RCC_OscConfig+0x74>
 8004242:	4b91      	ldr	r3, [pc, #580]	; (8004488 <HAL_RCC_OscConfig+0x2ac>)
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	4a90      	ldr	r2, [pc, #576]	; (8004488 <HAL_RCC_OscConfig+0x2ac>)
 8004248:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800424c:	6013      	str	r3, [r2, #0]
 800424e:	e01d      	b.n	800428c <HAL_RCC_OscConfig+0xb0>
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	685b      	ldr	r3, [r3, #4]
 8004254:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004258:	d10c      	bne.n	8004274 <HAL_RCC_OscConfig+0x98>
 800425a:	4b8b      	ldr	r3, [pc, #556]	; (8004488 <HAL_RCC_OscConfig+0x2ac>)
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	4a8a      	ldr	r2, [pc, #552]	; (8004488 <HAL_RCC_OscConfig+0x2ac>)
 8004260:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004264:	6013      	str	r3, [r2, #0]
 8004266:	4b88      	ldr	r3, [pc, #544]	; (8004488 <HAL_RCC_OscConfig+0x2ac>)
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	4a87      	ldr	r2, [pc, #540]	; (8004488 <HAL_RCC_OscConfig+0x2ac>)
 800426c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004270:	6013      	str	r3, [r2, #0]
 8004272:	e00b      	b.n	800428c <HAL_RCC_OscConfig+0xb0>
 8004274:	4b84      	ldr	r3, [pc, #528]	; (8004488 <HAL_RCC_OscConfig+0x2ac>)
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	4a83      	ldr	r2, [pc, #524]	; (8004488 <HAL_RCC_OscConfig+0x2ac>)
 800427a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800427e:	6013      	str	r3, [r2, #0]
 8004280:	4b81      	ldr	r3, [pc, #516]	; (8004488 <HAL_RCC_OscConfig+0x2ac>)
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	4a80      	ldr	r2, [pc, #512]	; (8004488 <HAL_RCC_OscConfig+0x2ac>)
 8004286:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800428a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	685b      	ldr	r3, [r3, #4]
 8004290:	2b00      	cmp	r3, #0
 8004292:	d013      	beq.n	80042bc <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004294:	f7fd fa8c 	bl	80017b0 <HAL_GetTick>
 8004298:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800429a:	e008      	b.n	80042ae <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800429c:	f7fd fa88 	bl	80017b0 <HAL_GetTick>
 80042a0:	4602      	mov	r2, r0
 80042a2:	693b      	ldr	r3, [r7, #16]
 80042a4:	1ad3      	subs	r3, r2, r3
 80042a6:	2b64      	cmp	r3, #100	; 0x64
 80042a8:	d901      	bls.n	80042ae <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80042aa:	2303      	movs	r3, #3
 80042ac:	e1fb      	b.n	80046a6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80042ae:	4b76      	ldr	r3, [pc, #472]	; (8004488 <HAL_RCC_OscConfig+0x2ac>)
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80042b6:	2b00      	cmp	r3, #0
 80042b8:	d0f0      	beq.n	800429c <HAL_RCC_OscConfig+0xc0>
 80042ba:	e014      	b.n	80042e6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80042bc:	f7fd fa78 	bl	80017b0 <HAL_GetTick>
 80042c0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80042c2:	e008      	b.n	80042d6 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80042c4:	f7fd fa74 	bl	80017b0 <HAL_GetTick>
 80042c8:	4602      	mov	r2, r0
 80042ca:	693b      	ldr	r3, [r7, #16]
 80042cc:	1ad3      	subs	r3, r2, r3
 80042ce:	2b64      	cmp	r3, #100	; 0x64
 80042d0:	d901      	bls.n	80042d6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80042d2:	2303      	movs	r3, #3
 80042d4:	e1e7      	b.n	80046a6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80042d6:	4b6c      	ldr	r3, [pc, #432]	; (8004488 <HAL_RCC_OscConfig+0x2ac>)
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80042de:	2b00      	cmp	r3, #0
 80042e0:	d1f0      	bne.n	80042c4 <HAL_RCC_OscConfig+0xe8>
 80042e2:	e000      	b.n	80042e6 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80042e4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	f003 0302 	and.w	r3, r3, #2
 80042ee:	2b00      	cmp	r3, #0
 80042f0:	d063      	beq.n	80043ba <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80042f2:	4b65      	ldr	r3, [pc, #404]	; (8004488 <HAL_RCC_OscConfig+0x2ac>)
 80042f4:	689b      	ldr	r3, [r3, #8]
 80042f6:	f003 030c 	and.w	r3, r3, #12
 80042fa:	2b00      	cmp	r3, #0
 80042fc:	d00b      	beq.n	8004316 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80042fe:	4b62      	ldr	r3, [pc, #392]	; (8004488 <HAL_RCC_OscConfig+0x2ac>)
 8004300:	689b      	ldr	r3, [r3, #8]
 8004302:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004306:	2b08      	cmp	r3, #8
 8004308:	d11c      	bne.n	8004344 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800430a:	4b5f      	ldr	r3, [pc, #380]	; (8004488 <HAL_RCC_OscConfig+0x2ac>)
 800430c:	685b      	ldr	r3, [r3, #4]
 800430e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004312:	2b00      	cmp	r3, #0
 8004314:	d116      	bne.n	8004344 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004316:	4b5c      	ldr	r3, [pc, #368]	; (8004488 <HAL_RCC_OscConfig+0x2ac>)
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	f003 0302 	and.w	r3, r3, #2
 800431e:	2b00      	cmp	r3, #0
 8004320:	d005      	beq.n	800432e <HAL_RCC_OscConfig+0x152>
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	68db      	ldr	r3, [r3, #12]
 8004326:	2b01      	cmp	r3, #1
 8004328:	d001      	beq.n	800432e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800432a:	2301      	movs	r3, #1
 800432c:	e1bb      	b.n	80046a6 <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800432e:	4b56      	ldr	r3, [pc, #344]	; (8004488 <HAL_RCC_OscConfig+0x2ac>)
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	691b      	ldr	r3, [r3, #16]
 800433a:	00db      	lsls	r3, r3, #3
 800433c:	4952      	ldr	r1, [pc, #328]	; (8004488 <HAL_RCC_OscConfig+0x2ac>)
 800433e:	4313      	orrs	r3, r2
 8004340:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004342:	e03a      	b.n	80043ba <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	68db      	ldr	r3, [r3, #12]
 8004348:	2b00      	cmp	r3, #0
 800434a:	d020      	beq.n	800438e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800434c:	4b4f      	ldr	r3, [pc, #316]	; (800448c <HAL_RCC_OscConfig+0x2b0>)
 800434e:	2201      	movs	r2, #1
 8004350:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004352:	f7fd fa2d 	bl	80017b0 <HAL_GetTick>
 8004356:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004358:	e008      	b.n	800436c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800435a:	f7fd fa29 	bl	80017b0 <HAL_GetTick>
 800435e:	4602      	mov	r2, r0
 8004360:	693b      	ldr	r3, [r7, #16]
 8004362:	1ad3      	subs	r3, r2, r3
 8004364:	2b02      	cmp	r3, #2
 8004366:	d901      	bls.n	800436c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004368:	2303      	movs	r3, #3
 800436a:	e19c      	b.n	80046a6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800436c:	4b46      	ldr	r3, [pc, #280]	; (8004488 <HAL_RCC_OscConfig+0x2ac>)
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	f003 0302 	and.w	r3, r3, #2
 8004374:	2b00      	cmp	r3, #0
 8004376:	d0f0      	beq.n	800435a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004378:	4b43      	ldr	r3, [pc, #268]	; (8004488 <HAL_RCC_OscConfig+0x2ac>)
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	691b      	ldr	r3, [r3, #16]
 8004384:	00db      	lsls	r3, r3, #3
 8004386:	4940      	ldr	r1, [pc, #256]	; (8004488 <HAL_RCC_OscConfig+0x2ac>)
 8004388:	4313      	orrs	r3, r2
 800438a:	600b      	str	r3, [r1, #0]
 800438c:	e015      	b.n	80043ba <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800438e:	4b3f      	ldr	r3, [pc, #252]	; (800448c <HAL_RCC_OscConfig+0x2b0>)
 8004390:	2200      	movs	r2, #0
 8004392:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004394:	f7fd fa0c 	bl	80017b0 <HAL_GetTick>
 8004398:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800439a:	e008      	b.n	80043ae <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800439c:	f7fd fa08 	bl	80017b0 <HAL_GetTick>
 80043a0:	4602      	mov	r2, r0
 80043a2:	693b      	ldr	r3, [r7, #16]
 80043a4:	1ad3      	subs	r3, r2, r3
 80043a6:	2b02      	cmp	r3, #2
 80043a8:	d901      	bls.n	80043ae <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80043aa:	2303      	movs	r3, #3
 80043ac:	e17b      	b.n	80046a6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80043ae:	4b36      	ldr	r3, [pc, #216]	; (8004488 <HAL_RCC_OscConfig+0x2ac>)
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	f003 0302 	and.w	r3, r3, #2
 80043b6:	2b00      	cmp	r3, #0
 80043b8:	d1f0      	bne.n	800439c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	f003 0308 	and.w	r3, r3, #8
 80043c2:	2b00      	cmp	r3, #0
 80043c4:	d030      	beq.n	8004428 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	695b      	ldr	r3, [r3, #20]
 80043ca:	2b00      	cmp	r3, #0
 80043cc:	d016      	beq.n	80043fc <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80043ce:	4b30      	ldr	r3, [pc, #192]	; (8004490 <HAL_RCC_OscConfig+0x2b4>)
 80043d0:	2201      	movs	r2, #1
 80043d2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80043d4:	f7fd f9ec 	bl	80017b0 <HAL_GetTick>
 80043d8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80043da:	e008      	b.n	80043ee <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80043dc:	f7fd f9e8 	bl	80017b0 <HAL_GetTick>
 80043e0:	4602      	mov	r2, r0
 80043e2:	693b      	ldr	r3, [r7, #16]
 80043e4:	1ad3      	subs	r3, r2, r3
 80043e6:	2b02      	cmp	r3, #2
 80043e8:	d901      	bls.n	80043ee <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80043ea:	2303      	movs	r3, #3
 80043ec:	e15b      	b.n	80046a6 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80043ee:	4b26      	ldr	r3, [pc, #152]	; (8004488 <HAL_RCC_OscConfig+0x2ac>)
 80043f0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80043f2:	f003 0302 	and.w	r3, r3, #2
 80043f6:	2b00      	cmp	r3, #0
 80043f8:	d0f0      	beq.n	80043dc <HAL_RCC_OscConfig+0x200>
 80043fa:	e015      	b.n	8004428 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80043fc:	4b24      	ldr	r3, [pc, #144]	; (8004490 <HAL_RCC_OscConfig+0x2b4>)
 80043fe:	2200      	movs	r2, #0
 8004400:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004402:	f7fd f9d5 	bl	80017b0 <HAL_GetTick>
 8004406:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004408:	e008      	b.n	800441c <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800440a:	f7fd f9d1 	bl	80017b0 <HAL_GetTick>
 800440e:	4602      	mov	r2, r0
 8004410:	693b      	ldr	r3, [r7, #16]
 8004412:	1ad3      	subs	r3, r2, r3
 8004414:	2b02      	cmp	r3, #2
 8004416:	d901      	bls.n	800441c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8004418:	2303      	movs	r3, #3
 800441a:	e144      	b.n	80046a6 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800441c:	4b1a      	ldr	r3, [pc, #104]	; (8004488 <HAL_RCC_OscConfig+0x2ac>)
 800441e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004420:	f003 0302 	and.w	r3, r3, #2
 8004424:	2b00      	cmp	r3, #0
 8004426:	d1f0      	bne.n	800440a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	f003 0304 	and.w	r3, r3, #4
 8004430:	2b00      	cmp	r3, #0
 8004432:	f000 80a0 	beq.w	8004576 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004436:	2300      	movs	r3, #0
 8004438:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800443a:	4b13      	ldr	r3, [pc, #76]	; (8004488 <HAL_RCC_OscConfig+0x2ac>)
 800443c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800443e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004442:	2b00      	cmp	r3, #0
 8004444:	d10f      	bne.n	8004466 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004446:	2300      	movs	r3, #0
 8004448:	60bb      	str	r3, [r7, #8]
 800444a:	4b0f      	ldr	r3, [pc, #60]	; (8004488 <HAL_RCC_OscConfig+0x2ac>)
 800444c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800444e:	4a0e      	ldr	r2, [pc, #56]	; (8004488 <HAL_RCC_OscConfig+0x2ac>)
 8004450:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004454:	6413      	str	r3, [r2, #64]	; 0x40
 8004456:	4b0c      	ldr	r3, [pc, #48]	; (8004488 <HAL_RCC_OscConfig+0x2ac>)
 8004458:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800445a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800445e:	60bb      	str	r3, [r7, #8]
 8004460:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004462:	2301      	movs	r3, #1
 8004464:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004466:	4b0b      	ldr	r3, [pc, #44]	; (8004494 <HAL_RCC_OscConfig+0x2b8>)
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800446e:	2b00      	cmp	r3, #0
 8004470:	d121      	bne.n	80044b6 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004472:	4b08      	ldr	r3, [pc, #32]	; (8004494 <HAL_RCC_OscConfig+0x2b8>)
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	4a07      	ldr	r2, [pc, #28]	; (8004494 <HAL_RCC_OscConfig+0x2b8>)
 8004478:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800447c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800447e:	f7fd f997 	bl	80017b0 <HAL_GetTick>
 8004482:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004484:	e011      	b.n	80044aa <HAL_RCC_OscConfig+0x2ce>
 8004486:	bf00      	nop
 8004488:	40023800 	.word	0x40023800
 800448c:	42470000 	.word	0x42470000
 8004490:	42470e80 	.word	0x42470e80
 8004494:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004498:	f7fd f98a 	bl	80017b0 <HAL_GetTick>
 800449c:	4602      	mov	r2, r0
 800449e:	693b      	ldr	r3, [r7, #16]
 80044a0:	1ad3      	subs	r3, r2, r3
 80044a2:	2b02      	cmp	r3, #2
 80044a4:	d901      	bls.n	80044aa <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 80044a6:	2303      	movs	r3, #3
 80044a8:	e0fd      	b.n	80046a6 <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80044aa:	4b81      	ldr	r3, [pc, #516]	; (80046b0 <HAL_RCC_OscConfig+0x4d4>)
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80044b2:	2b00      	cmp	r3, #0
 80044b4:	d0f0      	beq.n	8004498 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	689b      	ldr	r3, [r3, #8]
 80044ba:	2b01      	cmp	r3, #1
 80044bc:	d106      	bne.n	80044cc <HAL_RCC_OscConfig+0x2f0>
 80044be:	4b7d      	ldr	r3, [pc, #500]	; (80046b4 <HAL_RCC_OscConfig+0x4d8>)
 80044c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80044c2:	4a7c      	ldr	r2, [pc, #496]	; (80046b4 <HAL_RCC_OscConfig+0x4d8>)
 80044c4:	f043 0301 	orr.w	r3, r3, #1
 80044c8:	6713      	str	r3, [r2, #112]	; 0x70
 80044ca:	e01c      	b.n	8004506 <HAL_RCC_OscConfig+0x32a>
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	689b      	ldr	r3, [r3, #8]
 80044d0:	2b05      	cmp	r3, #5
 80044d2:	d10c      	bne.n	80044ee <HAL_RCC_OscConfig+0x312>
 80044d4:	4b77      	ldr	r3, [pc, #476]	; (80046b4 <HAL_RCC_OscConfig+0x4d8>)
 80044d6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80044d8:	4a76      	ldr	r2, [pc, #472]	; (80046b4 <HAL_RCC_OscConfig+0x4d8>)
 80044da:	f043 0304 	orr.w	r3, r3, #4
 80044de:	6713      	str	r3, [r2, #112]	; 0x70
 80044e0:	4b74      	ldr	r3, [pc, #464]	; (80046b4 <HAL_RCC_OscConfig+0x4d8>)
 80044e2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80044e4:	4a73      	ldr	r2, [pc, #460]	; (80046b4 <HAL_RCC_OscConfig+0x4d8>)
 80044e6:	f043 0301 	orr.w	r3, r3, #1
 80044ea:	6713      	str	r3, [r2, #112]	; 0x70
 80044ec:	e00b      	b.n	8004506 <HAL_RCC_OscConfig+0x32a>
 80044ee:	4b71      	ldr	r3, [pc, #452]	; (80046b4 <HAL_RCC_OscConfig+0x4d8>)
 80044f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80044f2:	4a70      	ldr	r2, [pc, #448]	; (80046b4 <HAL_RCC_OscConfig+0x4d8>)
 80044f4:	f023 0301 	bic.w	r3, r3, #1
 80044f8:	6713      	str	r3, [r2, #112]	; 0x70
 80044fa:	4b6e      	ldr	r3, [pc, #440]	; (80046b4 <HAL_RCC_OscConfig+0x4d8>)
 80044fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80044fe:	4a6d      	ldr	r2, [pc, #436]	; (80046b4 <HAL_RCC_OscConfig+0x4d8>)
 8004500:	f023 0304 	bic.w	r3, r3, #4
 8004504:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	689b      	ldr	r3, [r3, #8]
 800450a:	2b00      	cmp	r3, #0
 800450c:	d015      	beq.n	800453a <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800450e:	f7fd f94f 	bl	80017b0 <HAL_GetTick>
 8004512:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004514:	e00a      	b.n	800452c <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004516:	f7fd f94b 	bl	80017b0 <HAL_GetTick>
 800451a:	4602      	mov	r2, r0
 800451c:	693b      	ldr	r3, [r7, #16]
 800451e:	1ad3      	subs	r3, r2, r3
 8004520:	f241 3288 	movw	r2, #5000	; 0x1388
 8004524:	4293      	cmp	r3, r2
 8004526:	d901      	bls.n	800452c <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8004528:	2303      	movs	r3, #3
 800452a:	e0bc      	b.n	80046a6 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800452c:	4b61      	ldr	r3, [pc, #388]	; (80046b4 <HAL_RCC_OscConfig+0x4d8>)
 800452e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004530:	f003 0302 	and.w	r3, r3, #2
 8004534:	2b00      	cmp	r3, #0
 8004536:	d0ee      	beq.n	8004516 <HAL_RCC_OscConfig+0x33a>
 8004538:	e014      	b.n	8004564 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800453a:	f7fd f939 	bl	80017b0 <HAL_GetTick>
 800453e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004540:	e00a      	b.n	8004558 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004542:	f7fd f935 	bl	80017b0 <HAL_GetTick>
 8004546:	4602      	mov	r2, r0
 8004548:	693b      	ldr	r3, [r7, #16]
 800454a:	1ad3      	subs	r3, r2, r3
 800454c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004550:	4293      	cmp	r3, r2
 8004552:	d901      	bls.n	8004558 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8004554:	2303      	movs	r3, #3
 8004556:	e0a6      	b.n	80046a6 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004558:	4b56      	ldr	r3, [pc, #344]	; (80046b4 <HAL_RCC_OscConfig+0x4d8>)
 800455a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800455c:	f003 0302 	and.w	r3, r3, #2
 8004560:	2b00      	cmp	r3, #0
 8004562:	d1ee      	bne.n	8004542 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004564:	7dfb      	ldrb	r3, [r7, #23]
 8004566:	2b01      	cmp	r3, #1
 8004568:	d105      	bne.n	8004576 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800456a:	4b52      	ldr	r3, [pc, #328]	; (80046b4 <HAL_RCC_OscConfig+0x4d8>)
 800456c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800456e:	4a51      	ldr	r2, [pc, #324]	; (80046b4 <HAL_RCC_OscConfig+0x4d8>)
 8004570:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004574:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	699b      	ldr	r3, [r3, #24]
 800457a:	2b00      	cmp	r3, #0
 800457c:	f000 8092 	beq.w	80046a4 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004580:	4b4c      	ldr	r3, [pc, #304]	; (80046b4 <HAL_RCC_OscConfig+0x4d8>)
 8004582:	689b      	ldr	r3, [r3, #8]
 8004584:	f003 030c 	and.w	r3, r3, #12
 8004588:	2b08      	cmp	r3, #8
 800458a:	d05c      	beq.n	8004646 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	699b      	ldr	r3, [r3, #24]
 8004590:	2b02      	cmp	r3, #2
 8004592:	d141      	bne.n	8004618 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004594:	4b48      	ldr	r3, [pc, #288]	; (80046b8 <HAL_RCC_OscConfig+0x4dc>)
 8004596:	2200      	movs	r2, #0
 8004598:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800459a:	f7fd f909 	bl	80017b0 <HAL_GetTick>
 800459e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80045a0:	e008      	b.n	80045b4 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80045a2:	f7fd f905 	bl	80017b0 <HAL_GetTick>
 80045a6:	4602      	mov	r2, r0
 80045a8:	693b      	ldr	r3, [r7, #16]
 80045aa:	1ad3      	subs	r3, r2, r3
 80045ac:	2b02      	cmp	r3, #2
 80045ae:	d901      	bls.n	80045b4 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 80045b0:	2303      	movs	r3, #3
 80045b2:	e078      	b.n	80046a6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80045b4:	4b3f      	ldr	r3, [pc, #252]	; (80046b4 <HAL_RCC_OscConfig+0x4d8>)
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80045bc:	2b00      	cmp	r3, #0
 80045be:	d1f0      	bne.n	80045a2 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	69da      	ldr	r2, [r3, #28]
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	6a1b      	ldr	r3, [r3, #32]
 80045c8:	431a      	orrs	r2, r3
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045ce:	019b      	lsls	r3, r3, #6
 80045d0:	431a      	orrs	r2, r3
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80045d6:	085b      	lsrs	r3, r3, #1
 80045d8:	3b01      	subs	r3, #1
 80045da:	041b      	lsls	r3, r3, #16
 80045dc:	431a      	orrs	r2, r3
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045e2:	061b      	lsls	r3, r3, #24
 80045e4:	4933      	ldr	r1, [pc, #204]	; (80046b4 <HAL_RCC_OscConfig+0x4d8>)
 80045e6:	4313      	orrs	r3, r2
 80045e8:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80045ea:	4b33      	ldr	r3, [pc, #204]	; (80046b8 <HAL_RCC_OscConfig+0x4dc>)
 80045ec:	2201      	movs	r2, #1
 80045ee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80045f0:	f7fd f8de 	bl	80017b0 <HAL_GetTick>
 80045f4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80045f6:	e008      	b.n	800460a <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80045f8:	f7fd f8da 	bl	80017b0 <HAL_GetTick>
 80045fc:	4602      	mov	r2, r0
 80045fe:	693b      	ldr	r3, [r7, #16]
 8004600:	1ad3      	subs	r3, r2, r3
 8004602:	2b02      	cmp	r3, #2
 8004604:	d901      	bls.n	800460a <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8004606:	2303      	movs	r3, #3
 8004608:	e04d      	b.n	80046a6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800460a:	4b2a      	ldr	r3, [pc, #168]	; (80046b4 <HAL_RCC_OscConfig+0x4d8>)
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004612:	2b00      	cmp	r3, #0
 8004614:	d0f0      	beq.n	80045f8 <HAL_RCC_OscConfig+0x41c>
 8004616:	e045      	b.n	80046a4 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004618:	4b27      	ldr	r3, [pc, #156]	; (80046b8 <HAL_RCC_OscConfig+0x4dc>)
 800461a:	2200      	movs	r2, #0
 800461c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800461e:	f7fd f8c7 	bl	80017b0 <HAL_GetTick>
 8004622:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004624:	e008      	b.n	8004638 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004626:	f7fd f8c3 	bl	80017b0 <HAL_GetTick>
 800462a:	4602      	mov	r2, r0
 800462c:	693b      	ldr	r3, [r7, #16]
 800462e:	1ad3      	subs	r3, r2, r3
 8004630:	2b02      	cmp	r3, #2
 8004632:	d901      	bls.n	8004638 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8004634:	2303      	movs	r3, #3
 8004636:	e036      	b.n	80046a6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004638:	4b1e      	ldr	r3, [pc, #120]	; (80046b4 <HAL_RCC_OscConfig+0x4d8>)
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004640:	2b00      	cmp	r3, #0
 8004642:	d1f0      	bne.n	8004626 <HAL_RCC_OscConfig+0x44a>
 8004644:	e02e      	b.n	80046a4 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	699b      	ldr	r3, [r3, #24]
 800464a:	2b01      	cmp	r3, #1
 800464c:	d101      	bne.n	8004652 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 800464e:	2301      	movs	r3, #1
 8004650:	e029      	b.n	80046a6 <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8004652:	4b18      	ldr	r3, [pc, #96]	; (80046b4 <HAL_RCC_OscConfig+0x4d8>)
 8004654:	689b      	ldr	r3, [r3, #8]
 8004656:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004658:	68fb      	ldr	r3, [r7, #12]
 800465a:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	69db      	ldr	r3, [r3, #28]
 8004662:	429a      	cmp	r2, r3
 8004664:	d11c      	bne.n	80046a0 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004666:	68fb      	ldr	r3, [r7, #12]
 8004668:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004670:	429a      	cmp	r2, r3
 8004672:	d115      	bne.n	80046a0 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8004674:	68fa      	ldr	r2, [r7, #12]
 8004676:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800467a:	4013      	ands	r3, r2
 800467c:	687a      	ldr	r2, [r7, #4]
 800467e:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004680:	4293      	cmp	r3, r2
 8004682:	d10d      	bne.n	80046a0 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8004684:	68fb      	ldr	r3, [r7, #12]
 8004686:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 800468e:	429a      	cmp	r2, r3
 8004690:	d106      	bne.n	80046a0 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8004692:	68fb      	ldr	r3, [r7, #12]
 8004694:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800469c:	429a      	cmp	r2, r3
 800469e:	d001      	beq.n	80046a4 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 80046a0:	2301      	movs	r3, #1
 80046a2:	e000      	b.n	80046a6 <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 80046a4:	2300      	movs	r3, #0
}
 80046a6:	4618      	mov	r0, r3
 80046a8:	3718      	adds	r7, #24
 80046aa:	46bd      	mov	sp, r7
 80046ac:	bd80      	pop	{r7, pc}
 80046ae:	bf00      	nop
 80046b0:	40007000 	.word	0x40007000
 80046b4:	40023800 	.word	0x40023800
 80046b8:	42470060 	.word	0x42470060

080046bc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80046bc:	b580      	push	{r7, lr}
 80046be:	b084      	sub	sp, #16
 80046c0:	af00      	add	r7, sp, #0
 80046c2:	6078      	str	r0, [r7, #4]
 80046c4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	2b00      	cmp	r3, #0
 80046ca:	d101      	bne.n	80046d0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80046cc:	2301      	movs	r3, #1
 80046ce:	e0cc      	b.n	800486a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80046d0:	4b68      	ldr	r3, [pc, #416]	; (8004874 <HAL_RCC_ClockConfig+0x1b8>)
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	f003 030f 	and.w	r3, r3, #15
 80046d8:	683a      	ldr	r2, [r7, #0]
 80046da:	429a      	cmp	r2, r3
 80046dc:	d90c      	bls.n	80046f8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80046de:	4b65      	ldr	r3, [pc, #404]	; (8004874 <HAL_RCC_ClockConfig+0x1b8>)
 80046e0:	683a      	ldr	r2, [r7, #0]
 80046e2:	b2d2      	uxtb	r2, r2
 80046e4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80046e6:	4b63      	ldr	r3, [pc, #396]	; (8004874 <HAL_RCC_ClockConfig+0x1b8>)
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	f003 030f 	and.w	r3, r3, #15
 80046ee:	683a      	ldr	r2, [r7, #0]
 80046f0:	429a      	cmp	r2, r3
 80046f2:	d001      	beq.n	80046f8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80046f4:	2301      	movs	r3, #1
 80046f6:	e0b8      	b.n	800486a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	f003 0302 	and.w	r3, r3, #2
 8004700:	2b00      	cmp	r3, #0
 8004702:	d020      	beq.n	8004746 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	f003 0304 	and.w	r3, r3, #4
 800470c:	2b00      	cmp	r3, #0
 800470e:	d005      	beq.n	800471c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004710:	4b59      	ldr	r3, [pc, #356]	; (8004878 <HAL_RCC_ClockConfig+0x1bc>)
 8004712:	689b      	ldr	r3, [r3, #8]
 8004714:	4a58      	ldr	r2, [pc, #352]	; (8004878 <HAL_RCC_ClockConfig+0x1bc>)
 8004716:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800471a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	f003 0308 	and.w	r3, r3, #8
 8004724:	2b00      	cmp	r3, #0
 8004726:	d005      	beq.n	8004734 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004728:	4b53      	ldr	r3, [pc, #332]	; (8004878 <HAL_RCC_ClockConfig+0x1bc>)
 800472a:	689b      	ldr	r3, [r3, #8]
 800472c:	4a52      	ldr	r2, [pc, #328]	; (8004878 <HAL_RCC_ClockConfig+0x1bc>)
 800472e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004732:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004734:	4b50      	ldr	r3, [pc, #320]	; (8004878 <HAL_RCC_ClockConfig+0x1bc>)
 8004736:	689b      	ldr	r3, [r3, #8]
 8004738:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	689b      	ldr	r3, [r3, #8]
 8004740:	494d      	ldr	r1, [pc, #308]	; (8004878 <HAL_RCC_ClockConfig+0x1bc>)
 8004742:	4313      	orrs	r3, r2
 8004744:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	f003 0301 	and.w	r3, r3, #1
 800474e:	2b00      	cmp	r3, #0
 8004750:	d044      	beq.n	80047dc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	685b      	ldr	r3, [r3, #4]
 8004756:	2b01      	cmp	r3, #1
 8004758:	d107      	bne.n	800476a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800475a:	4b47      	ldr	r3, [pc, #284]	; (8004878 <HAL_RCC_ClockConfig+0x1bc>)
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004762:	2b00      	cmp	r3, #0
 8004764:	d119      	bne.n	800479a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004766:	2301      	movs	r3, #1
 8004768:	e07f      	b.n	800486a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	685b      	ldr	r3, [r3, #4]
 800476e:	2b02      	cmp	r3, #2
 8004770:	d003      	beq.n	800477a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004776:	2b03      	cmp	r3, #3
 8004778:	d107      	bne.n	800478a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800477a:	4b3f      	ldr	r3, [pc, #252]	; (8004878 <HAL_RCC_ClockConfig+0x1bc>)
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004782:	2b00      	cmp	r3, #0
 8004784:	d109      	bne.n	800479a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004786:	2301      	movs	r3, #1
 8004788:	e06f      	b.n	800486a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800478a:	4b3b      	ldr	r3, [pc, #236]	; (8004878 <HAL_RCC_ClockConfig+0x1bc>)
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	f003 0302 	and.w	r3, r3, #2
 8004792:	2b00      	cmp	r3, #0
 8004794:	d101      	bne.n	800479a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004796:	2301      	movs	r3, #1
 8004798:	e067      	b.n	800486a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800479a:	4b37      	ldr	r3, [pc, #220]	; (8004878 <HAL_RCC_ClockConfig+0x1bc>)
 800479c:	689b      	ldr	r3, [r3, #8]
 800479e:	f023 0203 	bic.w	r2, r3, #3
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	685b      	ldr	r3, [r3, #4]
 80047a6:	4934      	ldr	r1, [pc, #208]	; (8004878 <HAL_RCC_ClockConfig+0x1bc>)
 80047a8:	4313      	orrs	r3, r2
 80047aa:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80047ac:	f7fd f800 	bl	80017b0 <HAL_GetTick>
 80047b0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80047b2:	e00a      	b.n	80047ca <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80047b4:	f7fc fffc 	bl	80017b0 <HAL_GetTick>
 80047b8:	4602      	mov	r2, r0
 80047ba:	68fb      	ldr	r3, [r7, #12]
 80047bc:	1ad3      	subs	r3, r2, r3
 80047be:	f241 3288 	movw	r2, #5000	; 0x1388
 80047c2:	4293      	cmp	r3, r2
 80047c4:	d901      	bls.n	80047ca <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80047c6:	2303      	movs	r3, #3
 80047c8:	e04f      	b.n	800486a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80047ca:	4b2b      	ldr	r3, [pc, #172]	; (8004878 <HAL_RCC_ClockConfig+0x1bc>)
 80047cc:	689b      	ldr	r3, [r3, #8]
 80047ce:	f003 020c 	and.w	r2, r3, #12
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	685b      	ldr	r3, [r3, #4]
 80047d6:	009b      	lsls	r3, r3, #2
 80047d8:	429a      	cmp	r2, r3
 80047da:	d1eb      	bne.n	80047b4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80047dc:	4b25      	ldr	r3, [pc, #148]	; (8004874 <HAL_RCC_ClockConfig+0x1b8>)
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	f003 030f 	and.w	r3, r3, #15
 80047e4:	683a      	ldr	r2, [r7, #0]
 80047e6:	429a      	cmp	r2, r3
 80047e8:	d20c      	bcs.n	8004804 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80047ea:	4b22      	ldr	r3, [pc, #136]	; (8004874 <HAL_RCC_ClockConfig+0x1b8>)
 80047ec:	683a      	ldr	r2, [r7, #0]
 80047ee:	b2d2      	uxtb	r2, r2
 80047f0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80047f2:	4b20      	ldr	r3, [pc, #128]	; (8004874 <HAL_RCC_ClockConfig+0x1b8>)
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	f003 030f 	and.w	r3, r3, #15
 80047fa:	683a      	ldr	r2, [r7, #0]
 80047fc:	429a      	cmp	r2, r3
 80047fe:	d001      	beq.n	8004804 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004800:	2301      	movs	r3, #1
 8004802:	e032      	b.n	800486a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	f003 0304 	and.w	r3, r3, #4
 800480c:	2b00      	cmp	r3, #0
 800480e:	d008      	beq.n	8004822 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004810:	4b19      	ldr	r3, [pc, #100]	; (8004878 <HAL_RCC_ClockConfig+0x1bc>)
 8004812:	689b      	ldr	r3, [r3, #8]
 8004814:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	68db      	ldr	r3, [r3, #12]
 800481c:	4916      	ldr	r1, [pc, #88]	; (8004878 <HAL_RCC_ClockConfig+0x1bc>)
 800481e:	4313      	orrs	r3, r2
 8004820:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	f003 0308 	and.w	r3, r3, #8
 800482a:	2b00      	cmp	r3, #0
 800482c:	d009      	beq.n	8004842 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800482e:	4b12      	ldr	r3, [pc, #72]	; (8004878 <HAL_RCC_ClockConfig+0x1bc>)
 8004830:	689b      	ldr	r3, [r3, #8]
 8004832:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	691b      	ldr	r3, [r3, #16]
 800483a:	00db      	lsls	r3, r3, #3
 800483c:	490e      	ldr	r1, [pc, #56]	; (8004878 <HAL_RCC_ClockConfig+0x1bc>)
 800483e:	4313      	orrs	r3, r2
 8004840:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004842:	f000 f821 	bl	8004888 <HAL_RCC_GetSysClockFreq>
 8004846:	4601      	mov	r1, r0
 8004848:	4b0b      	ldr	r3, [pc, #44]	; (8004878 <HAL_RCC_ClockConfig+0x1bc>)
 800484a:	689b      	ldr	r3, [r3, #8]
 800484c:	091b      	lsrs	r3, r3, #4
 800484e:	f003 030f 	and.w	r3, r3, #15
 8004852:	4a0a      	ldr	r2, [pc, #40]	; (800487c <HAL_RCC_ClockConfig+0x1c0>)
 8004854:	5cd3      	ldrb	r3, [r2, r3]
 8004856:	fa21 f303 	lsr.w	r3, r1, r3
 800485a:	4a09      	ldr	r2, [pc, #36]	; (8004880 <HAL_RCC_ClockConfig+0x1c4>)
 800485c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800485e:	4b09      	ldr	r3, [pc, #36]	; (8004884 <HAL_RCC_ClockConfig+0x1c8>)
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	4618      	mov	r0, r3
 8004864:	f7fc ff60 	bl	8001728 <HAL_InitTick>

  return HAL_OK;
 8004868:	2300      	movs	r3, #0
}
 800486a:	4618      	mov	r0, r3
 800486c:	3710      	adds	r7, #16
 800486e:	46bd      	mov	sp, r7
 8004870:	bd80      	pop	{r7, pc}
 8004872:	bf00      	nop
 8004874:	40023c00 	.word	0x40023c00
 8004878:	40023800 	.word	0x40023800
 800487c:	0800779c 	.word	0x0800779c
 8004880:	20000000 	.word	0x20000000
 8004884:	20000004 	.word	0x20000004

08004888 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004888:	b5f0      	push	{r4, r5, r6, r7, lr}
 800488a:	b085      	sub	sp, #20
 800488c:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800488e:	2300      	movs	r3, #0
 8004890:	607b      	str	r3, [r7, #4]
 8004892:	2300      	movs	r3, #0
 8004894:	60fb      	str	r3, [r7, #12]
 8004896:	2300      	movs	r3, #0
 8004898:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 800489a:	2300      	movs	r3, #0
 800489c:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800489e:	4b63      	ldr	r3, [pc, #396]	; (8004a2c <HAL_RCC_GetSysClockFreq+0x1a4>)
 80048a0:	689b      	ldr	r3, [r3, #8]
 80048a2:	f003 030c 	and.w	r3, r3, #12
 80048a6:	2b04      	cmp	r3, #4
 80048a8:	d007      	beq.n	80048ba <HAL_RCC_GetSysClockFreq+0x32>
 80048aa:	2b08      	cmp	r3, #8
 80048ac:	d008      	beq.n	80048c0 <HAL_RCC_GetSysClockFreq+0x38>
 80048ae:	2b00      	cmp	r3, #0
 80048b0:	f040 80b4 	bne.w	8004a1c <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80048b4:	4b5e      	ldr	r3, [pc, #376]	; (8004a30 <HAL_RCC_GetSysClockFreq+0x1a8>)
 80048b6:	60bb      	str	r3, [r7, #8]
       break;
 80048b8:	e0b3      	b.n	8004a22 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80048ba:	4b5e      	ldr	r3, [pc, #376]	; (8004a34 <HAL_RCC_GetSysClockFreq+0x1ac>)
 80048bc:	60bb      	str	r3, [r7, #8]
      break;
 80048be:	e0b0      	b.n	8004a22 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80048c0:	4b5a      	ldr	r3, [pc, #360]	; (8004a2c <HAL_RCC_GetSysClockFreq+0x1a4>)
 80048c2:	685b      	ldr	r3, [r3, #4]
 80048c4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80048c8:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80048ca:	4b58      	ldr	r3, [pc, #352]	; (8004a2c <HAL_RCC_GetSysClockFreq+0x1a4>)
 80048cc:	685b      	ldr	r3, [r3, #4]
 80048ce:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80048d2:	2b00      	cmp	r3, #0
 80048d4:	d04a      	beq.n	800496c <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80048d6:	4b55      	ldr	r3, [pc, #340]	; (8004a2c <HAL_RCC_GetSysClockFreq+0x1a4>)
 80048d8:	685b      	ldr	r3, [r3, #4]
 80048da:	099b      	lsrs	r3, r3, #6
 80048dc:	f04f 0400 	mov.w	r4, #0
 80048e0:	f240 11ff 	movw	r1, #511	; 0x1ff
 80048e4:	f04f 0200 	mov.w	r2, #0
 80048e8:	ea03 0501 	and.w	r5, r3, r1
 80048ec:	ea04 0602 	and.w	r6, r4, r2
 80048f0:	4629      	mov	r1, r5
 80048f2:	4632      	mov	r2, r6
 80048f4:	f04f 0300 	mov.w	r3, #0
 80048f8:	f04f 0400 	mov.w	r4, #0
 80048fc:	0154      	lsls	r4, r2, #5
 80048fe:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8004902:	014b      	lsls	r3, r1, #5
 8004904:	4619      	mov	r1, r3
 8004906:	4622      	mov	r2, r4
 8004908:	1b49      	subs	r1, r1, r5
 800490a:	eb62 0206 	sbc.w	r2, r2, r6
 800490e:	f04f 0300 	mov.w	r3, #0
 8004912:	f04f 0400 	mov.w	r4, #0
 8004916:	0194      	lsls	r4, r2, #6
 8004918:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 800491c:	018b      	lsls	r3, r1, #6
 800491e:	1a5b      	subs	r3, r3, r1
 8004920:	eb64 0402 	sbc.w	r4, r4, r2
 8004924:	f04f 0100 	mov.w	r1, #0
 8004928:	f04f 0200 	mov.w	r2, #0
 800492c:	00e2      	lsls	r2, r4, #3
 800492e:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8004932:	00d9      	lsls	r1, r3, #3
 8004934:	460b      	mov	r3, r1
 8004936:	4614      	mov	r4, r2
 8004938:	195b      	adds	r3, r3, r5
 800493a:	eb44 0406 	adc.w	r4, r4, r6
 800493e:	f04f 0100 	mov.w	r1, #0
 8004942:	f04f 0200 	mov.w	r2, #0
 8004946:	0262      	lsls	r2, r4, #9
 8004948:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 800494c:	0259      	lsls	r1, r3, #9
 800494e:	460b      	mov	r3, r1
 8004950:	4614      	mov	r4, r2
 8004952:	4618      	mov	r0, r3
 8004954:	4621      	mov	r1, r4
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	f04f 0400 	mov.w	r4, #0
 800495c:	461a      	mov	r2, r3
 800495e:	4623      	mov	r3, r4
 8004960:	f7fb fc32 	bl	80001c8 <__aeabi_uldivmod>
 8004964:	4603      	mov	r3, r0
 8004966:	460c      	mov	r4, r1
 8004968:	60fb      	str	r3, [r7, #12]
 800496a:	e049      	b.n	8004a00 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800496c:	4b2f      	ldr	r3, [pc, #188]	; (8004a2c <HAL_RCC_GetSysClockFreq+0x1a4>)
 800496e:	685b      	ldr	r3, [r3, #4]
 8004970:	099b      	lsrs	r3, r3, #6
 8004972:	f04f 0400 	mov.w	r4, #0
 8004976:	f240 11ff 	movw	r1, #511	; 0x1ff
 800497a:	f04f 0200 	mov.w	r2, #0
 800497e:	ea03 0501 	and.w	r5, r3, r1
 8004982:	ea04 0602 	and.w	r6, r4, r2
 8004986:	4629      	mov	r1, r5
 8004988:	4632      	mov	r2, r6
 800498a:	f04f 0300 	mov.w	r3, #0
 800498e:	f04f 0400 	mov.w	r4, #0
 8004992:	0154      	lsls	r4, r2, #5
 8004994:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8004998:	014b      	lsls	r3, r1, #5
 800499a:	4619      	mov	r1, r3
 800499c:	4622      	mov	r2, r4
 800499e:	1b49      	subs	r1, r1, r5
 80049a0:	eb62 0206 	sbc.w	r2, r2, r6
 80049a4:	f04f 0300 	mov.w	r3, #0
 80049a8:	f04f 0400 	mov.w	r4, #0
 80049ac:	0194      	lsls	r4, r2, #6
 80049ae:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80049b2:	018b      	lsls	r3, r1, #6
 80049b4:	1a5b      	subs	r3, r3, r1
 80049b6:	eb64 0402 	sbc.w	r4, r4, r2
 80049ba:	f04f 0100 	mov.w	r1, #0
 80049be:	f04f 0200 	mov.w	r2, #0
 80049c2:	00e2      	lsls	r2, r4, #3
 80049c4:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80049c8:	00d9      	lsls	r1, r3, #3
 80049ca:	460b      	mov	r3, r1
 80049cc:	4614      	mov	r4, r2
 80049ce:	195b      	adds	r3, r3, r5
 80049d0:	eb44 0406 	adc.w	r4, r4, r6
 80049d4:	f04f 0100 	mov.w	r1, #0
 80049d8:	f04f 0200 	mov.w	r2, #0
 80049dc:	02a2      	lsls	r2, r4, #10
 80049de:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 80049e2:	0299      	lsls	r1, r3, #10
 80049e4:	460b      	mov	r3, r1
 80049e6:	4614      	mov	r4, r2
 80049e8:	4618      	mov	r0, r3
 80049ea:	4621      	mov	r1, r4
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	f04f 0400 	mov.w	r4, #0
 80049f2:	461a      	mov	r2, r3
 80049f4:	4623      	mov	r3, r4
 80049f6:	f7fb fbe7 	bl	80001c8 <__aeabi_uldivmod>
 80049fa:	4603      	mov	r3, r0
 80049fc:	460c      	mov	r4, r1
 80049fe:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004a00:	4b0a      	ldr	r3, [pc, #40]	; (8004a2c <HAL_RCC_GetSysClockFreq+0x1a4>)
 8004a02:	685b      	ldr	r3, [r3, #4]
 8004a04:	0c1b      	lsrs	r3, r3, #16
 8004a06:	f003 0303 	and.w	r3, r3, #3
 8004a0a:	3301      	adds	r3, #1
 8004a0c:	005b      	lsls	r3, r3, #1
 8004a0e:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8004a10:	68fa      	ldr	r2, [r7, #12]
 8004a12:	683b      	ldr	r3, [r7, #0]
 8004a14:	fbb2 f3f3 	udiv	r3, r2, r3
 8004a18:	60bb      	str	r3, [r7, #8]
      break;
 8004a1a:	e002      	b.n	8004a22 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004a1c:	4b04      	ldr	r3, [pc, #16]	; (8004a30 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8004a1e:	60bb      	str	r3, [r7, #8]
      break;
 8004a20:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004a22:	68bb      	ldr	r3, [r7, #8]
}
 8004a24:	4618      	mov	r0, r3
 8004a26:	3714      	adds	r7, #20
 8004a28:	46bd      	mov	sp, r7
 8004a2a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004a2c:	40023800 	.word	0x40023800
 8004a30:	00f42400 	.word	0x00f42400
 8004a34:	007a1200 	.word	0x007a1200

08004a38 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004a38:	b480      	push	{r7}
 8004a3a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004a3c:	4b03      	ldr	r3, [pc, #12]	; (8004a4c <HAL_RCC_GetHCLKFreq+0x14>)
 8004a3e:	681b      	ldr	r3, [r3, #0]
}
 8004a40:	4618      	mov	r0, r3
 8004a42:	46bd      	mov	sp, r7
 8004a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a48:	4770      	bx	lr
 8004a4a:	bf00      	nop
 8004a4c:	20000000 	.word	0x20000000

08004a50 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004a50:	b580      	push	{r7, lr}
 8004a52:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004a54:	f7ff fff0 	bl	8004a38 <HAL_RCC_GetHCLKFreq>
 8004a58:	4601      	mov	r1, r0
 8004a5a:	4b05      	ldr	r3, [pc, #20]	; (8004a70 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004a5c:	689b      	ldr	r3, [r3, #8]
 8004a5e:	0a9b      	lsrs	r3, r3, #10
 8004a60:	f003 0307 	and.w	r3, r3, #7
 8004a64:	4a03      	ldr	r2, [pc, #12]	; (8004a74 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004a66:	5cd3      	ldrb	r3, [r2, r3]
 8004a68:	fa21 f303 	lsr.w	r3, r1, r3
}
 8004a6c:	4618      	mov	r0, r3
 8004a6e:	bd80      	pop	{r7, pc}
 8004a70:	40023800 	.word	0x40023800
 8004a74:	080077ac 	.word	0x080077ac

08004a78 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004a78:	b580      	push	{r7, lr}
 8004a7a:	b086      	sub	sp, #24
 8004a7c:	af00      	add	r7, sp, #0
 8004a7e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004a80:	2300      	movs	r3, #0
 8004a82:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8004a84:	2300      	movs	r3, #0
 8004a86:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	f003 0301 	and.w	r3, r3, #1
 8004a90:	2b00      	cmp	r3, #0
 8004a92:	d105      	bne.n	8004aa0 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8004a9c:	2b00      	cmp	r3, #0
 8004a9e:	d035      	beq.n	8004b0c <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8004aa0:	4b62      	ldr	r3, [pc, #392]	; (8004c2c <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8004aa2:	2200      	movs	r2, #0
 8004aa4:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004aa6:	f7fc fe83 	bl	80017b0 <HAL_GetTick>
 8004aaa:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004aac:	e008      	b.n	8004ac0 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8004aae:	f7fc fe7f 	bl	80017b0 <HAL_GetTick>
 8004ab2:	4602      	mov	r2, r0
 8004ab4:	697b      	ldr	r3, [r7, #20]
 8004ab6:	1ad3      	subs	r3, r2, r3
 8004ab8:	2b02      	cmp	r3, #2
 8004aba:	d901      	bls.n	8004ac0 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004abc:	2303      	movs	r3, #3
 8004abe:	e0b0      	b.n	8004c22 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004ac0:	4b5b      	ldr	r3, [pc, #364]	; (8004c30 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004ac8:	2b00      	cmp	r3, #0
 8004aca:	d1f0      	bne.n	8004aae <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	685b      	ldr	r3, [r3, #4]
 8004ad0:	019a      	lsls	r2, r3, #6
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	689b      	ldr	r3, [r3, #8]
 8004ad6:	071b      	lsls	r3, r3, #28
 8004ad8:	4955      	ldr	r1, [pc, #340]	; (8004c30 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004ada:	4313      	orrs	r3, r2
 8004adc:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8004ae0:	4b52      	ldr	r3, [pc, #328]	; (8004c2c <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8004ae2:	2201      	movs	r2, #1
 8004ae4:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004ae6:	f7fc fe63 	bl	80017b0 <HAL_GetTick>
 8004aea:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004aec:	e008      	b.n	8004b00 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8004aee:	f7fc fe5f 	bl	80017b0 <HAL_GetTick>
 8004af2:	4602      	mov	r2, r0
 8004af4:	697b      	ldr	r3, [r7, #20]
 8004af6:	1ad3      	subs	r3, r2, r3
 8004af8:	2b02      	cmp	r3, #2
 8004afa:	d901      	bls.n	8004b00 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004afc:	2303      	movs	r3, #3
 8004afe:	e090      	b.n	8004c22 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004b00:	4b4b      	ldr	r3, [pc, #300]	; (8004c30 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004b08:	2b00      	cmp	r3, #0
 8004b0a:	d0f0      	beq.n	8004aee <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	f003 0302 	and.w	r3, r3, #2
 8004b14:	2b00      	cmp	r3, #0
 8004b16:	f000 8083 	beq.w	8004c20 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8004b1a:	2300      	movs	r3, #0
 8004b1c:	60fb      	str	r3, [r7, #12]
 8004b1e:	4b44      	ldr	r3, [pc, #272]	; (8004c30 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004b20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b22:	4a43      	ldr	r2, [pc, #268]	; (8004c30 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004b24:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004b28:	6413      	str	r3, [r2, #64]	; 0x40
 8004b2a:	4b41      	ldr	r3, [pc, #260]	; (8004c30 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004b2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b2e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004b32:	60fb      	str	r3, [r7, #12]
 8004b34:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8004b36:	4b3f      	ldr	r3, [pc, #252]	; (8004c34 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	4a3e      	ldr	r2, [pc, #248]	; (8004c34 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004b3c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004b40:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8004b42:	f7fc fe35 	bl	80017b0 <HAL_GetTick>
 8004b46:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8004b48:	e008      	b.n	8004b5c <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8004b4a:	f7fc fe31 	bl	80017b0 <HAL_GetTick>
 8004b4e:	4602      	mov	r2, r0
 8004b50:	697b      	ldr	r3, [r7, #20]
 8004b52:	1ad3      	subs	r3, r2, r3
 8004b54:	2b02      	cmp	r3, #2
 8004b56:	d901      	bls.n	8004b5c <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 8004b58:	2303      	movs	r3, #3
 8004b5a:	e062      	b.n	8004c22 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8004b5c:	4b35      	ldr	r3, [pc, #212]	; (8004c34 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004b64:	2b00      	cmp	r3, #0
 8004b66:	d0f0      	beq.n	8004b4a <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004b68:	4b31      	ldr	r3, [pc, #196]	; (8004c30 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004b6a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004b6c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004b70:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004b72:	693b      	ldr	r3, [r7, #16]
 8004b74:	2b00      	cmp	r3, #0
 8004b76:	d02f      	beq.n	8004bd8 <HAL_RCCEx_PeriphCLKConfig+0x160>
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	68db      	ldr	r3, [r3, #12]
 8004b7c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004b80:	693a      	ldr	r2, [r7, #16]
 8004b82:	429a      	cmp	r2, r3
 8004b84:	d028      	beq.n	8004bd8 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004b86:	4b2a      	ldr	r3, [pc, #168]	; (8004c30 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004b88:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004b8a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004b8e:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004b90:	4b29      	ldr	r3, [pc, #164]	; (8004c38 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8004b92:	2201      	movs	r2, #1
 8004b94:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004b96:	4b28      	ldr	r3, [pc, #160]	; (8004c38 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8004b98:	2200      	movs	r2, #0
 8004b9a:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8004b9c:	4a24      	ldr	r2, [pc, #144]	; (8004c30 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004b9e:	693b      	ldr	r3, [r7, #16]
 8004ba0:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8004ba2:	4b23      	ldr	r3, [pc, #140]	; (8004c30 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004ba4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004ba6:	f003 0301 	and.w	r3, r3, #1
 8004baa:	2b01      	cmp	r3, #1
 8004bac:	d114      	bne.n	8004bd8 <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8004bae:	f7fc fdff 	bl	80017b0 <HAL_GetTick>
 8004bb2:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004bb4:	e00a      	b.n	8004bcc <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004bb6:	f7fc fdfb 	bl	80017b0 <HAL_GetTick>
 8004bba:	4602      	mov	r2, r0
 8004bbc:	697b      	ldr	r3, [r7, #20]
 8004bbe:	1ad3      	subs	r3, r2, r3
 8004bc0:	f241 3288 	movw	r2, #5000	; 0x1388
 8004bc4:	4293      	cmp	r3, r2
 8004bc6:	d901      	bls.n	8004bcc <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 8004bc8:	2303      	movs	r3, #3
 8004bca:	e02a      	b.n	8004c22 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004bcc:	4b18      	ldr	r3, [pc, #96]	; (8004c30 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004bce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004bd0:	f003 0302 	and.w	r3, r3, #2
 8004bd4:	2b00      	cmp	r3, #0
 8004bd6:	d0ee      	beq.n	8004bb6 <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	68db      	ldr	r3, [r3, #12]
 8004bdc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004be0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004be4:	d10d      	bne.n	8004c02 <HAL_RCCEx_PeriphCLKConfig+0x18a>
 8004be6:	4b12      	ldr	r3, [pc, #72]	; (8004c30 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004be8:	689b      	ldr	r3, [r3, #8]
 8004bea:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	68db      	ldr	r3, [r3, #12]
 8004bf2:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8004bf6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004bfa:	490d      	ldr	r1, [pc, #52]	; (8004c30 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004bfc:	4313      	orrs	r3, r2
 8004bfe:	608b      	str	r3, [r1, #8]
 8004c00:	e005      	b.n	8004c0e <HAL_RCCEx_PeriphCLKConfig+0x196>
 8004c02:	4b0b      	ldr	r3, [pc, #44]	; (8004c30 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004c04:	689b      	ldr	r3, [r3, #8]
 8004c06:	4a0a      	ldr	r2, [pc, #40]	; (8004c30 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004c08:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8004c0c:	6093      	str	r3, [r2, #8]
 8004c0e:	4b08      	ldr	r3, [pc, #32]	; (8004c30 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004c10:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	68db      	ldr	r3, [r3, #12]
 8004c16:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004c1a:	4905      	ldr	r1, [pc, #20]	; (8004c30 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004c1c:	4313      	orrs	r3, r2
 8004c1e:	670b      	str	r3, [r1, #112]	; 0x70
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8004c20:	2300      	movs	r3, #0
}
 8004c22:	4618      	mov	r0, r3
 8004c24:	3718      	adds	r7, #24
 8004c26:	46bd      	mov	sp, r7
 8004c28:	bd80      	pop	{r7, pc}
 8004c2a:	bf00      	nop
 8004c2c:	42470068 	.word	0x42470068
 8004c30:	40023800 	.word	0x40023800
 8004c34:	40007000 	.word	0x40007000
 8004c38:	42470e40 	.word	0x42470e40

08004c3c <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8004c3c:	b480      	push	{r7}
 8004c3e:	b087      	sub	sp, #28
 8004c40:	af00      	add	r7, sp, #0
 8004c42:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 8004c44:	2300      	movs	r3, #0
 8004c46:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 8004c48:	2300      	movs	r3, #0
 8004c4a:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 8004c4c:	2300      	movs	r3, #0
 8004c4e:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 8004c50:	2300      	movs	r3, #0
 8004c52:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	2b01      	cmp	r3, #1
 8004c58:	d13d      	bne.n	8004cd6 <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
  {
  case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 8004c5a:	4b22      	ldr	r3, [pc, #136]	; (8004ce4 <HAL_RCCEx_GetPeriphCLKFreq+0xa8>)
 8004c5c:	689b      	ldr	r3, [r3, #8]
 8004c5e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004c62:	60fb      	str	r3, [r7, #12]
      switch (srcclk)
 8004c64:	68fb      	ldr	r3, [r7, #12]
 8004c66:	2b00      	cmp	r3, #0
 8004c68:	d004      	beq.n	8004c74 <HAL_RCCEx_GetPeriphCLKFreq+0x38>
 8004c6a:	2b01      	cmp	r3, #1
 8004c6c:	d12f      	bne.n	8004cce <HAL_RCCEx_GetPeriphCLKFreq+0x92>
      {
      /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 8004c6e:	4b1e      	ldr	r3, [pc, #120]	; (8004ce8 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8004c70:	617b      	str	r3, [r7, #20]
          break;
 8004c72:	e02f      	b.n	8004cd4 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
          }
#else
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8004c74:	4b1b      	ldr	r3, [pc, #108]	; (8004ce4 <HAL_RCCEx_GetPeriphCLKFreq+0xa8>)
 8004c76:	685b      	ldr	r3, [r3, #4]
 8004c78:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004c7c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004c80:	d108      	bne.n	8004c94 <HAL_RCCEx_GetPeriphCLKFreq+0x58>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8004c82:	4b18      	ldr	r3, [pc, #96]	; (8004ce4 <HAL_RCCEx_GetPeriphCLKFreq+0xa8>)
 8004c84:	685b      	ldr	r3, [r3, #4]
 8004c86:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004c8a:	4a18      	ldr	r2, [pc, #96]	; (8004cec <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8004c8c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004c90:	613b      	str	r3, [r7, #16]
 8004c92:	e007      	b.n	8004ca4 <HAL_RCCEx_GetPeriphCLKFreq+0x68>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8004c94:	4b13      	ldr	r3, [pc, #76]	; (8004ce4 <HAL_RCCEx_GetPeriphCLKFreq+0xa8>)
 8004c96:	685b      	ldr	r3, [r3, #4]
 8004c98:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004c9c:	4a14      	ldr	r2, [pc, #80]	; (8004cf0 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 8004c9e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004ca2:	613b      	str	r3, [r7, #16]
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 8004ca4:	4b0f      	ldr	r3, [pc, #60]	; (8004ce4 <HAL_RCCEx_GetPeriphCLKFreq+0xa8>)
 8004ca6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004caa:	099b      	lsrs	r3, r3, #6
 8004cac:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004cb0:	693b      	ldr	r3, [r7, #16]
 8004cb2:	fb02 f303 	mul.w	r3, r2, r3
 8004cb6:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 8004cb8:	4b0a      	ldr	r3, [pc, #40]	; (8004ce4 <HAL_RCCEx_GetPeriphCLKFreq+0xa8>)
 8004cba:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004cbe:	0f1b      	lsrs	r3, r3, #28
 8004cc0:	f003 0307 	and.w	r3, r3, #7
 8004cc4:	68ba      	ldr	r2, [r7, #8]
 8004cc6:	fbb2 f3f3 	udiv	r3, r2, r3
 8004cca:	617b      	str	r3, [r7, #20]
          break;
 8004ccc:	e002      	b.n	8004cd4 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
        }
        /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 8004cce:	2300      	movs	r3, #0
 8004cd0:	617b      	str	r3, [r7, #20]
          break;
 8004cd2:	bf00      	nop
        }
      }
      break;
 8004cd4:	bf00      	nop
    }
  }
  return frequency;
 8004cd6:	697b      	ldr	r3, [r7, #20]
}
 8004cd8:	4618      	mov	r0, r3
 8004cda:	371c      	adds	r7, #28
 8004cdc:	46bd      	mov	sp, r7
 8004cde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ce2:	4770      	bx	lr
 8004ce4:	40023800 	.word	0x40023800
 8004ce8:	00bb8000 	.word	0x00bb8000
 8004cec:	007a1200 	.word	0x007a1200
 8004cf0:	00f42400 	.word	0x00f42400

08004cf4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004cf4:	b580      	push	{r7, lr}
 8004cf6:	b082      	sub	sp, #8
 8004cf8:	af00      	add	r7, sp, #0
 8004cfa:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	2b00      	cmp	r3, #0
 8004d00:	d101      	bne.n	8004d06 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004d02:	2301      	movs	r3, #1
 8004d04:	e056      	b.n	8004db4 <HAL_SPI_Init+0xc0>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	2200      	movs	r2, #0
 8004d0a:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004d12:	b2db      	uxtb	r3, r3
 8004d14:	2b00      	cmp	r3, #0
 8004d16:	d106      	bne.n	8004d26 <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	2200      	movs	r2, #0
 8004d1c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004d20:	6878      	ldr	r0, [r7, #4]
 8004d22:	f7fc f961 	bl	8000fe8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	2202      	movs	r2, #2
 8004d2a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	681a      	ldr	r2, [r3, #0]
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004d3c:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	685a      	ldr	r2, [r3, #4]
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	689b      	ldr	r3, [r3, #8]
 8004d46:	431a      	orrs	r2, r3
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	68db      	ldr	r3, [r3, #12]
 8004d4c:	431a      	orrs	r2, r3
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	691b      	ldr	r3, [r3, #16]
 8004d52:	431a      	orrs	r2, r3
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	695b      	ldr	r3, [r3, #20]
 8004d58:	431a      	orrs	r2, r3
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	699b      	ldr	r3, [r3, #24]
 8004d5e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004d62:	431a      	orrs	r2, r3
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	69db      	ldr	r3, [r3, #28]
 8004d68:	431a      	orrs	r2, r3
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	6a1b      	ldr	r3, [r3, #32]
 8004d6e:	ea42 0103 	orr.w	r1, r2, r3
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	430a      	orrs	r2, r1
 8004d7c:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	699b      	ldr	r3, [r3, #24]
 8004d82:	0c1b      	lsrs	r3, r3, #16
 8004d84:	f003 0104 	and.w	r1, r3, #4
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	430a      	orrs	r2, r1
 8004d92:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	69da      	ldr	r2, [r3, #28]
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004da2:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	2200      	movs	r2, #0
 8004da8:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	2201      	movs	r2, #1
 8004dae:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8004db2:	2300      	movs	r3, #0
}
 8004db4:	4618      	mov	r0, r3
 8004db6:	3708      	adds	r7, #8
 8004db8:	46bd      	mov	sp, r7
 8004dba:	bd80      	pop	{r7, pc}

08004dbc <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004dbc:	b580      	push	{r7, lr}
 8004dbe:	b088      	sub	sp, #32
 8004dc0:	af00      	add	r7, sp, #0
 8004dc2:	60f8      	str	r0, [r7, #12]
 8004dc4:	60b9      	str	r1, [r7, #8]
 8004dc6:	603b      	str	r3, [r7, #0]
 8004dc8:	4613      	mov	r3, r2
 8004dca:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8004dcc:	2300      	movs	r3, #0
 8004dce:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004dd0:	68fb      	ldr	r3, [r7, #12]
 8004dd2:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004dd6:	2b01      	cmp	r3, #1
 8004dd8:	d101      	bne.n	8004dde <HAL_SPI_Transmit+0x22>
 8004dda:	2302      	movs	r3, #2
 8004ddc:	e11e      	b.n	800501c <HAL_SPI_Transmit+0x260>
 8004dde:	68fb      	ldr	r3, [r7, #12]
 8004de0:	2201      	movs	r2, #1
 8004de2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004de6:	f7fc fce3 	bl	80017b0 <HAL_GetTick>
 8004dea:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8004dec:	88fb      	ldrh	r3, [r7, #6]
 8004dee:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8004df0:	68fb      	ldr	r3, [r7, #12]
 8004df2:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004df6:	b2db      	uxtb	r3, r3
 8004df8:	2b01      	cmp	r3, #1
 8004dfa:	d002      	beq.n	8004e02 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8004dfc:	2302      	movs	r3, #2
 8004dfe:	77fb      	strb	r3, [r7, #31]
    goto error;
 8004e00:	e103      	b.n	800500a <HAL_SPI_Transmit+0x24e>
  }

  if ((pData == NULL) || (Size == 0U))
 8004e02:	68bb      	ldr	r3, [r7, #8]
 8004e04:	2b00      	cmp	r3, #0
 8004e06:	d002      	beq.n	8004e0e <HAL_SPI_Transmit+0x52>
 8004e08:	88fb      	ldrh	r3, [r7, #6]
 8004e0a:	2b00      	cmp	r3, #0
 8004e0c:	d102      	bne.n	8004e14 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8004e0e:	2301      	movs	r3, #1
 8004e10:	77fb      	strb	r3, [r7, #31]
    goto error;
 8004e12:	e0fa      	b.n	800500a <HAL_SPI_Transmit+0x24e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8004e14:	68fb      	ldr	r3, [r7, #12]
 8004e16:	2203      	movs	r2, #3
 8004e18:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004e1c:	68fb      	ldr	r3, [r7, #12]
 8004e1e:	2200      	movs	r2, #0
 8004e20:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8004e22:	68fb      	ldr	r3, [r7, #12]
 8004e24:	68ba      	ldr	r2, [r7, #8]
 8004e26:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8004e28:	68fb      	ldr	r3, [r7, #12]
 8004e2a:	88fa      	ldrh	r2, [r7, #6]
 8004e2c:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8004e2e:	68fb      	ldr	r3, [r7, #12]
 8004e30:	88fa      	ldrh	r2, [r7, #6]
 8004e32:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8004e34:	68fb      	ldr	r3, [r7, #12]
 8004e36:	2200      	movs	r2, #0
 8004e38:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8004e3a:	68fb      	ldr	r3, [r7, #12]
 8004e3c:	2200      	movs	r2, #0
 8004e3e:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8004e40:	68fb      	ldr	r3, [r7, #12]
 8004e42:	2200      	movs	r2, #0
 8004e44:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8004e46:	68fb      	ldr	r3, [r7, #12]
 8004e48:	2200      	movs	r2, #0
 8004e4a:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8004e4c:	68fb      	ldr	r3, [r7, #12]
 8004e4e:	2200      	movs	r2, #0
 8004e50:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004e52:	68fb      	ldr	r3, [r7, #12]
 8004e54:	689b      	ldr	r3, [r3, #8]
 8004e56:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004e5a:	d107      	bne.n	8004e6c <HAL_SPI_Transmit+0xb0>
  {
    SPI_1LINE_TX(hspi);
 8004e5c:	68fb      	ldr	r3, [r7, #12]
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	681a      	ldr	r2, [r3, #0]
 8004e62:	68fb      	ldr	r3, [r7, #12]
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004e6a:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004e6c:	68fb      	ldr	r3, [r7, #12]
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004e76:	2b40      	cmp	r3, #64	; 0x40
 8004e78:	d007      	beq.n	8004e8a <HAL_SPI_Transmit+0xce>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004e7a:	68fb      	ldr	r3, [r7, #12]
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	681a      	ldr	r2, [r3, #0]
 8004e80:	68fb      	ldr	r3, [r7, #12]
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004e88:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8004e8a:	68fb      	ldr	r3, [r7, #12]
 8004e8c:	68db      	ldr	r3, [r3, #12]
 8004e8e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004e92:	d14b      	bne.n	8004f2c <HAL_SPI_Transmit+0x170>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004e94:	68fb      	ldr	r3, [r7, #12]
 8004e96:	685b      	ldr	r3, [r3, #4]
 8004e98:	2b00      	cmp	r3, #0
 8004e9a:	d002      	beq.n	8004ea2 <HAL_SPI_Transmit+0xe6>
 8004e9c:	8afb      	ldrh	r3, [r7, #22]
 8004e9e:	2b01      	cmp	r3, #1
 8004ea0:	d13e      	bne.n	8004f20 <HAL_SPI_Transmit+0x164>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004ea2:	68fb      	ldr	r3, [r7, #12]
 8004ea4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ea6:	881a      	ldrh	r2, [r3, #0]
 8004ea8:	68fb      	ldr	r3, [r7, #12]
 8004eaa:	681b      	ldr	r3, [r3, #0]
 8004eac:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004eae:	68fb      	ldr	r3, [r7, #12]
 8004eb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004eb2:	1c9a      	adds	r2, r3, #2
 8004eb4:	68fb      	ldr	r3, [r7, #12]
 8004eb6:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004eb8:	68fb      	ldr	r3, [r7, #12]
 8004eba:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004ebc:	b29b      	uxth	r3, r3
 8004ebe:	3b01      	subs	r3, #1
 8004ec0:	b29a      	uxth	r2, r3
 8004ec2:	68fb      	ldr	r3, [r7, #12]
 8004ec4:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8004ec6:	e02b      	b.n	8004f20 <HAL_SPI_Transmit+0x164>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004ec8:	68fb      	ldr	r3, [r7, #12]
 8004eca:	681b      	ldr	r3, [r3, #0]
 8004ecc:	689b      	ldr	r3, [r3, #8]
 8004ece:	f003 0302 	and.w	r3, r3, #2
 8004ed2:	2b02      	cmp	r3, #2
 8004ed4:	d112      	bne.n	8004efc <HAL_SPI_Transmit+0x140>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004ed6:	68fb      	ldr	r3, [r7, #12]
 8004ed8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004eda:	881a      	ldrh	r2, [r3, #0]
 8004edc:	68fb      	ldr	r3, [r7, #12]
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004ee2:	68fb      	ldr	r3, [r7, #12]
 8004ee4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ee6:	1c9a      	adds	r2, r3, #2
 8004ee8:	68fb      	ldr	r3, [r7, #12]
 8004eea:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004eec:	68fb      	ldr	r3, [r7, #12]
 8004eee:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004ef0:	b29b      	uxth	r3, r3
 8004ef2:	3b01      	subs	r3, #1
 8004ef4:	b29a      	uxth	r2, r3
 8004ef6:	68fb      	ldr	r3, [r7, #12]
 8004ef8:	86da      	strh	r2, [r3, #54]	; 0x36
 8004efa:	e011      	b.n	8004f20 <HAL_SPI_Transmit+0x164>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004efc:	f7fc fc58 	bl	80017b0 <HAL_GetTick>
 8004f00:	4602      	mov	r2, r0
 8004f02:	69bb      	ldr	r3, [r7, #24]
 8004f04:	1ad3      	subs	r3, r2, r3
 8004f06:	683a      	ldr	r2, [r7, #0]
 8004f08:	429a      	cmp	r2, r3
 8004f0a:	d803      	bhi.n	8004f14 <HAL_SPI_Transmit+0x158>
 8004f0c:	683b      	ldr	r3, [r7, #0]
 8004f0e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004f12:	d102      	bne.n	8004f1a <HAL_SPI_Transmit+0x15e>
 8004f14:	683b      	ldr	r3, [r7, #0]
 8004f16:	2b00      	cmp	r3, #0
 8004f18:	d102      	bne.n	8004f20 <HAL_SPI_Transmit+0x164>
        {
          errorcode = HAL_TIMEOUT;
 8004f1a:	2303      	movs	r3, #3
 8004f1c:	77fb      	strb	r3, [r7, #31]
          goto error;
 8004f1e:	e074      	b.n	800500a <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 8004f20:	68fb      	ldr	r3, [r7, #12]
 8004f22:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004f24:	b29b      	uxth	r3, r3
 8004f26:	2b00      	cmp	r3, #0
 8004f28:	d1ce      	bne.n	8004ec8 <HAL_SPI_Transmit+0x10c>
 8004f2a:	e04c      	b.n	8004fc6 <HAL_SPI_Transmit+0x20a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004f2c:	68fb      	ldr	r3, [r7, #12]
 8004f2e:	685b      	ldr	r3, [r3, #4]
 8004f30:	2b00      	cmp	r3, #0
 8004f32:	d002      	beq.n	8004f3a <HAL_SPI_Transmit+0x17e>
 8004f34:	8afb      	ldrh	r3, [r7, #22]
 8004f36:	2b01      	cmp	r3, #1
 8004f38:	d140      	bne.n	8004fbc <HAL_SPI_Transmit+0x200>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004f3a:	68fb      	ldr	r3, [r7, #12]
 8004f3c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004f3e:	68fb      	ldr	r3, [r7, #12]
 8004f40:	681b      	ldr	r3, [r3, #0]
 8004f42:	330c      	adds	r3, #12
 8004f44:	7812      	ldrb	r2, [r2, #0]
 8004f46:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8004f48:	68fb      	ldr	r3, [r7, #12]
 8004f4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f4c:	1c5a      	adds	r2, r3, #1
 8004f4e:	68fb      	ldr	r3, [r7, #12]
 8004f50:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004f52:	68fb      	ldr	r3, [r7, #12]
 8004f54:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004f56:	b29b      	uxth	r3, r3
 8004f58:	3b01      	subs	r3, #1
 8004f5a:	b29a      	uxth	r2, r3
 8004f5c:	68fb      	ldr	r3, [r7, #12]
 8004f5e:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8004f60:	e02c      	b.n	8004fbc <HAL_SPI_Transmit+0x200>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004f62:	68fb      	ldr	r3, [r7, #12]
 8004f64:	681b      	ldr	r3, [r3, #0]
 8004f66:	689b      	ldr	r3, [r3, #8]
 8004f68:	f003 0302 	and.w	r3, r3, #2
 8004f6c:	2b02      	cmp	r3, #2
 8004f6e:	d113      	bne.n	8004f98 <HAL_SPI_Transmit+0x1dc>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004f70:	68fb      	ldr	r3, [r7, #12]
 8004f72:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004f74:	68fb      	ldr	r3, [r7, #12]
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	330c      	adds	r3, #12
 8004f7a:	7812      	ldrb	r2, [r2, #0]
 8004f7c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8004f7e:	68fb      	ldr	r3, [r7, #12]
 8004f80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f82:	1c5a      	adds	r2, r3, #1
 8004f84:	68fb      	ldr	r3, [r7, #12]
 8004f86:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004f88:	68fb      	ldr	r3, [r7, #12]
 8004f8a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004f8c:	b29b      	uxth	r3, r3
 8004f8e:	3b01      	subs	r3, #1
 8004f90:	b29a      	uxth	r2, r3
 8004f92:	68fb      	ldr	r3, [r7, #12]
 8004f94:	86da      	strh	r2, [r3, #54]	; 0x36
 8004f96:	e011      	b.n	8004fbc <HAL_SPI_Transmit+0x200>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004f98:	f7fc fc0a 	bl	80017b0 <HAL_GetTick>
 8004f9c:	4602      	mov	r2, r0
 8004f9e:	69bb      	ldr	r3, [r7, #24]
 8004fa0:	1ad3      	subs	r3, r2, r3
 8004fa2:	683a      	ldr	r2, [r7, #0]
 8004fa4:	429a      	cmp	r2, r3
 8004fa6:	d803      	bhi.n	8004fb0 <HAL_SPI_Transmit+0x1f4>
 8004fa8:	683b      	ldr	r3, [r7, #0]
 8004faa:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004fae:	d102      	bne.n	8004fb6 <HAL_SPI_Transmit+0x1fa>
 8004fb0:	683b      	ldr	r3, [r7, #0]
 8004fb2:	2b00      	cmp	r3, #0
 8004fb4:	d102      	bne.n	8004fbc <HAL_SPI_Transmit+0x200>
        {
          errorcode = HAL_TIMEOUT;
 8004fb6:	2303      	movs	r3, #3
 8004fb8:	77fb      	strb	r3, [r7, #31]
          goto error;
 8004fba:	e026      	b.n	800500a <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 8004fbc:	68fb      	ldr	r3, [r7, #12]
 8004fbe:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004fc0:	b29b      	uxth	r3, r3
 8004fc2:	2b00      	cmp	r3, #0
 8004fc4:	d1cd      	bne.n	8004f62 <HAL_SPI_Transmit+0x1a6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004fc6:	69ba      	ldr	r2, [r7, #24]
 8004fc8:	6839      	ldr	r1, [r7, #0]
 8004fca:	68f8      	ldr	r0, [r7, #12]
 8004fcc:	f000 f894 	bl	80050f8 <SPI_EndRxTxTransaction>
 8004fd0:	4603      	mov	r3, r0
 8004fd2:	2b00      	cmp	r3, #0
 8004fd4:	d002      	beq.n	8004fdc <HAL_SPI_Transmit+0x220>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004fd6:	68fb      	ldr	r3, [r7, #12]
 8004fd8:	2220      	movs	r2, #32
 8004fda:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004fdc:	68fb      	ldr	r3, [r7, #12]
 8004fde:	689b      	ldr	r3, [r3, #8]
 8004fe0:	2b00      	cmp	r3, #0
 8004fe2:	d10a      	bne.n	8004ffa <HAL_SPI_Transmit+0x23e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004fe4:	2300      	movs	r3, #0
 8004fe6:	613b      	str	r3, [r7, #16]
 8004fe8:	68fb      	ldr	r3, [r7, #12]
 8004fea:	681b      	ldr	r3, [r3, #0]
 8004fec:	68db      	ldr	r3, [r3, #12]
 8004fee:	613b      	str	r3, [r7, #16]
 8004ff0:	68fb      	ldr	r3, [r7, #12]
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	689b      	ldr	r3, [r3, #8]
 8004ff6:	613b      	str	r3, [r7, #16]
 8004ff8:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004ffa:	68fb      	ldr	r3, [r7, #12]
 8004ffc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004ffe:	2b00      	cmp	r3, #0
 8005000:	d002      	beq.n	8005008 <HAL_SPI_Transmit+0x24c>
  {
    errorcode = HAL_ERROR;
 8005002:	2301      	movs	r3, #1
 8005004:	77fb      	strb	r3, [r7, #31]
 8005006:	e000      	b.n	800500a <HAL_SPI_Transmit+0x24e>
  }

error:
 8005008:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800500a:	68fb      	ldr	r3, [r7, #12]
 800500c:	2201      	movs	r2, #1
 800500e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8005012:	68fb      	ldr	r3, [r7, #12]
 8005014:	2200      	movs	r2, #0
 8005016:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800501a:	7ffb      	ldrb	r3, [r7, #31]
}
 800501c:	4618      	mov	r0, r3
 800501e:	3720      	adds	r7, #32
 8005020:	46bd      	mov	sp, r7
 8005022:	bd80      	pop	{r7, pc}

08005024 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005024:	b580      	push	{r7, lr}
 8005026:	b084      	sub	sp, #16
 8005028:	af00      	add	r7, sp, #0
 800502a:	60f8      	str	r0, [r7, #12]
 800502c:	60b9      	str	r1, [r7, #8]
 800502e:	603b      	str	r3, [r7, #0]
 8005030:	4613      	mov	r3, r2
 8005032:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005034:	e04c      	b.n	80050d0 <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 8005036:	683b      	ldr	r3, [r7, #0]
 8005038:	f1b3 3fff 	cmp.w	r3, #4294967295
 800503c:	d048      	beq.n	80050d0 <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 800503e:	f7fc fbb7 	bl	80017b0 <HAL_GetTick>
 8005042:	4602      	mov	r2, r0
 8005044:	69bb      	ldr	r3, [r7, #24]
 8005046:	1ad3      	subs	r3, r2, r3
 8005048:	683a      	ldr	r2, [r7, #0]
 800504a:	429a      	cmp	r2, r3
 800504c:	d902      	bls.n	8005054 <SPI_WaitFlagStateUntilTimeout+0x30>
 800504e:	683b      	ldr	r3, [r7, #0]
 8005050:	2b00      	cmp	r3, #0
 8005052:	d13d      	bne.n	80050d0 <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005054:	68fb      	ldr	r3, [r7, #12]
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	685a      	ldr	r2, [r3, #4]
 800505a:	68fb      	ldr	r3, [r7, #12]
 800505c:	681b      	ldr	r3, [r3, #0]
 800505e:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8005062:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005064:	68fb      	ldr	r3, [r7, #12]
 8005066:	685b      	ldr	r3, [r3, #4]
 8005068:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800506c:	d111      	bne.n	8005092 <SPI_WaitFlagStateUntilTimeout+0x6e>
 800506e:	68fb      	ldr	r3, [r7, #12]
 8005070:	689b      	ldr	r3, [r3, #8]
 8005072:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005076:	d004      	beq.n	8005082 <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005078:	68fb      	ldr	r3, [r7, #12]
 800507a:	689b      	ldr	r3, [r3, #8]
 800507c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005080:	d107      	bne.n	8005092 <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005082:	68fb      	ldr	r3, [r7, #12]
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	681a      	ldr	r2, [r3, #0]
 8005088:	68fb      	ldr	r3, [r7, #12]
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005090:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005092:	68fb      	ldr	r3, [r7, #12]
 8005094:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005096:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800509a:	d10f      	bne.n	80050bc <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 800509c:	68fb      	ldr	r3, [r7, #12]
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	681a      	ldr	r2, [r3, #0]
 80050a2:	68fb      	ldr	r3, [r7, #12]
 80050a4:	681b      	ldr	r3, [r3, #0]
 80050a6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80050aa:	601a      	str	r2, [r3, #0]
 80050ac:	68fb      	ldr	r3, [r7, #12]
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	681a      	ldr	r2, [r3, #0]
 80050b2:	68fb      	ldr	r3, [r7, #12]
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80050ba:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80050bc:	68fb      	ldr	r3, [r7, #12]
 80050be:	2201      	movs	r2, #1
 80050c0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80050c4:	68fb      	ldr	r3, [r7, #12]
 80050c6:	2200      	movs	r2, #0
 80050c8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 80050cc:	2303      	movs	r3, #3
 80050ce:	e00f      	b.n	80050f0 <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80050d0:	68fb      	ldr	r3, [r7, #12]
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	689a      	ldr	r2, [r3, #8]
 80050d6:	68bb      	ldr	r3, [r7, #8]
 80050d8:	4013      	ands	r3, r2
 80050da:	68ba      	ldr	r2, [r7, #8]
 80050dc:	429a      	cmp	r2, r3
 80050de:	bf0c      	ite	eq
 80050e0:	2301      	moveq	r3, #1
 80050e2:	2300      	movne	r3, #0
 80050e4:	b2db      	uxtb	r3, r3
 80050e6:	461a      	mov	r2, r3
 80050e8:	79fb      	ldrb	r3, [r7, #7]
 80050ea:	429a      	cmp	r2, r3
 80050ec:	d1a3      	bne.n	8005036 <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 80050ee:	2300      	movs	r3, #0
}
 80050f0:	4618      	mov	r0, r3
 80050f2:	3710      	adds	r7, #16
 80050f4:	46bd      	mov	sp, r7
 80050f6:	bd80      	pop	{r7, pc}

080050f8 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80050f8:	b580      	push	{r7, lr}
 80050fa:	b088      	sub	sp, #32
 80050fc:	af02      	add	r7, sp, #8
 80050fe:	60f8      	str	r0, [r7, #12]
 8005100:	60b9      	str	r1, [r7, #8]
 8005102:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8005104:	4b1b      	ldr	r3, [pc, #108]	; (8005174 <SPI_EndRxTxTransaction+0x7c>)
 8005106:	681b      	ldr	r3, [r3, #0]
 8005108:	4a1b      	ldr	r2, [pc, #108]	; (8005178 <SPI_EndRxTxTransaction+0x80>)
 800510a:	fba2 2303 	umull	r2, r3, r2, r3
 800510e:	0d5b      	lsrs	r3, r3, #21
 8005110:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8005114:	fb02 f303 	mul.w	r3, r2, r3
 8005118:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800511a:	68fb      	ldr	r3, [r7, #12]
 800511c:	685b      	ldr	r3, [r3, #4]
 800511e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005122:	d112      	bne.n	800514a <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	9300      	str	r3, [sp, #0]
 8005128:	68bb      	ldr	r3, [r7, #8]
 800512a:	2200      	movs	r2, #0
 800512c:	2180      	movs	r1, #128	; 0x80
 800512e:	68f8      	ldr	r0, [r7, #12]
 8005130:	f7ff ff78 	bl	8005024 <SPI_WaitFlagStateUntilTimeout>
 8005134:	4603      	mov	r3, r0
 8005136:	2b00      	cmp	r3, #0
 8005138:	d016      	beq.n	8005168 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800513a:	68fb      	ldr	r3, [r7, #12]
 800513c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800513e:	f043 0220 	orr.w	r2, r3, #32
 8005142:	68fb      	ldr	r3, [r7, #12]
 8005144:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8005146:	2303      	movs	r3, #3
 8005148:	e00f      	b.n	800516a <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800514a:	697b      	ldr	r3, [r7, #20]
 800514c:	2b00      	cmp	r3, #0
 800514e:	d00a      	beq.n	8005166 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8005150:	697b      	ldr	r3, [r7, #20]
 8005152:	3b01      	subs	r3, #1
 8005154:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8005156:	68fb      	ldr	r3, [r7, #12]
 8005158:	681b      	ldr	r3, [r3, #0]
 800515a:	689b      	ldr	r3, [r3, #8]
 800515c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005160:	2b80      	cmp	r3, #128	; 0x80
 8005162:	d0f2      	beq.n	800514a <SPI_EndRxTxTransaction+0x52>
 8005164:	e000      	b.n	8005168 <SPI_EndRxTxTransaction+0x70>
        break;
 8005166:	bf00      	nop
  }

  return HAL_OK;
 8005168:	2300      	movs	r3, #0
}
 800516a:	4618      	mov	r0, r3
 800516c:	3718      	adds	r7, #24
 800516e:	46bd      	mov	sp, r7
 8005170:	bd80      	pop	{r7, pc}
 8005172:	bf00      	nop
 8005174:	20000000 	.word	0x20000000
 8005178:	165e9f81 	.word	0x165e9f81

0800517c <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800517c:	b084      	sub	sp, #16
 800517e:	b580      	push	{r7, lr}
 8005180:	b084      	sub	sp, #16
 8005182:	af00      	add	r7, sp, #0
 8005184:	6078      	str	r0, [r7, #4]
 8005186:	f107 001c 	add.w	r0, r7, #28
 800518a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800518e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005190:	2b01      	cmp	r3, #1
 8005192:	d122      	bne.n	80051da <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005198:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	68db      	ldr	r3, [r3, #12]
 80051a4:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 80051a8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80051ac:	687a      	ldr	r2, [r7, #4]
 80051ae:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	68db      	ldr	r3, [r3, #12]
 80051b4:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80051bc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80051be:	2b01      	cmp	r3, #1
 80051c0:	d105      	bne.n	80051ce <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	68db      	ldr	r3, [r3, #12]
 80051c6:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 80051ce:	6878      	ldr	r0, [r7, #4]
 80051d0:	f000 f94a 	bl	8005468 <USB_CoreReset>
 80051d4:	4603      	mov	r3, r0
 80051d6:	73fb      	strb	r3, [r7, #15]
 80051d8:	e01a      	b.n	8005210 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	68db      	ldr	r3, [r3, #12]
 80051de:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select and set Host mode */
    ret = USB_CoreReset(USBx);
 80051e6:	6878      	ldr	r0, [r7, #4]
 80051e8:	f000 f93e 	bl	8005468 <USB_CoreReset>
 80051ec:	4603      	mov	r3, r0
 80051ee:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 80051f0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80051f2:	2b00      	cmp	r3, #0
 80051f4:	d106      	bne.n	8005204 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80051fa:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	639a      	str	r2, [r3, #56]	; 0x38
 8005202:	e005      	b.n	8005210 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005208:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8005210:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005212:	2b01      	cmp	r3, #1
 8005214:	d10b      	bne.n	800522e <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	689b      	ldr	r3, [r3, #8]
 800521a:	f043 0206 	orr.w	r2, r3, #6
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	689b      	ldr	r3, [r3, #8]
 8005226:	f043 0220 	orr.w	r2, r3, #32
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800522e:	7bfb      	ldrb	r3, [r7, #15]
}
 8005230:	4618      	mov	r0, r3
 8005232:	3710      	adds	r7, #16
 8005234:	46bd      	mov	sp, r7
 8005236:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800523a:	b004      	add	sp, #16
 800523c:	4770      	bx	lr

0800523e <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800523e:	b480      	push	{r7}
 8005240:	b083      	sub	sp, #12
 8005242:	af00      	add	r7, sp, #0
 8005244:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	689b      	ldr	r3, [r3, #8]
 800524a:	f043 0201 	orr.w	r2, r3, #1
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8005252:	2300      	movs	r3, #0
}
 8005254:	4618      	mov	r0, r3
 8005256:	370c      	adds	r7, #12
 8005258:	46bd      	mov	sp, r7
 800525a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800525e:	4770      	bx	lr

08005260 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8005260:	b480      	push	{r7}
 8005262:	b083      	sub	sp, #12
 8005264:	af00      	add	r7, sp, #0
 8005266:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	689b      	ldr	r3, [r3, #8]
 800526c:	f023 0201 	bic.w	r2, r3, #1
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8005274:	2300      	movs	r3, #0
}
 8005276:	4618      	mov	r0, r3
 8005278:	370c      	adds	r7, #12
 800527a:	46bd      	mov	sp, r7
 800527c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005280:	4770      	bx	lr

08005282 <USB_SetCurrentMode>:
  *            @arg USB_HOST_MODE: Host mode
  *            @arg USB_DRD_MODE: Dual Role Device mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8005282:	b580      	push	{r7, lr}
 8005284:	b082      	sub	sp, #8
 8005286:	af00      	add	r7, sp, #0
 8005288:	6078      	str	r0, [r7, #4]
 800528a:	460b      	mov	r3, r1
 800528c:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	68db      	ldr	r3, [r3, #12]
 8005292:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800529a:	78fb      	ldrb	r3, [r7, #3]
 800529c:	2b01      	cmp	r3, #1
 800529e:	d106      	bne.n	80052ae <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	68db      	ldr	r3, [r3, #12]
 80052a4:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	60da      	str	r2, [r3, #12]
 80052ac:	e00b      	b.n	80052c6 <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 80052ae:	78fb      	ldrb	r3, [r7, #3]
 80052b0:	2b00      	cmp	r3, #0
 80052b2:	d106      	bne.n	80052c2 <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	68db      	ldr	r3, [r3, #12]
 80052b8:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	60da      	str	r2, [r3, #12]
 80052c0:	e001      	b.n	80052c6 <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 80052c2:	2301      	movs	r3, #1
 80052c4:	e003      	b.n	80052ce <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 80052c6:	2032      	movs	r0, #50	; 0x32
 80052c8:	f7fc fa7e 	bl	80017c8 <HAL_Delay>

  return HAL_OK;
 80052cc:	2300      	movs	r3, #0
}
 80052ce:	4618      	mov	r0, r3
 80052d0:	3708      	adds	r7, #8
 80052d2:	46bd      	mov	sp, r7
 80052d4:	bd80      	pop	{r7, pc}
	...

080052d8 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80052d8:	b480      	push	{r7}
 80052da:	b085      	sub	sp, #20
 80052dc:	af00      	add	r7, sp, #0
 80052de:	6078      	str	r0, [r7, #4]
 80052e0:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 80052e2:	2300      	movs	r3, #0
 80052e4:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80052e6:	683b      	ldr	r3, [r7, #0]
 80052e8:	019b      	lsls	r3, r3, #6
 80052ea:	f043 0220 	orr.w	r2, r3, #32
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80052f2:	68fb      	ldr	r3, [r7, #12]
 80052f4:	3301      	adds	r3, #1
 80052f6:	60fb      	str	r3, [r7, #12]
 80052f8:	68fb      	ldr	r3, [r7, #12]
 80052fa:	4a09      	ldr	r2, [pc, #36]	; (8005320 <USB_FlushTxFifo+0x48>)
 80052fc:	4293      	cmp	r3, r2
 80052fe:	d901      	bls.n	8005304 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 8005300:	2303      	movs	r3, #3
 8005302:	e006      	b.n	8005312 <USB_FlushTxFifo+0x3a>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	691b      	ldr	r3, [r3, #16]
 8005308:	f003 0320 	and.w	r3, r3, #32
 800530c:	2b20      	cmp	r3, #32
 800530e:	d0f0      	beq.n	80052f2 <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 8005310:	2300      	movs	r3, #0
}
 8005312:	4618      	mov	r0, r3
 8005314:	3714      	adds	r7, #20
 8005316:	46bd      	mov	sp, r7
 8005318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800531c:	4770      	bx	lr
 800531e:	bf00      	nop
 8005320:	00030d40 	.word	0x00030d40

08005324 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8005324:	b480      	push	{r7}
 8005326:	b085      	sub	sp, #20
 8005328:	af00      	add	r7, sp, #0
 800532a:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 800532c:	2300      	movs	r3, #0
 800532e:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	2210      	movs	r2, #16
 8005334:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8005336:	68fb      	ldr	r3, [r7, #12]
 8005338:	3301      	adds	r3, #1
 800533a:	60fb      	str	r3, [r7, #12]
 800533c:	68fb      	ldr	r3, [r7, #12]
 800533e:	4a09      	ldr	r2, [pc, #36]	; (8005364 <USB_FlushRxFifo+0x40>)
 8005340:	4293      	cmp	r3, r2
 8005342:	d901      	bls.n	8005348 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 8005344:	2303      	movs	r3, #3
 8005346:	e006      	b.n	8005356 <USB_FlushRxFifo+0x32>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	691b      	ldr	r3, [r3, #16]
 800534c:	f003 0310 	and.w	r3, r3, #16
 8005350:	2b10      	cmp	r3, #16
 8005352:	d0f0      	beq.n	8005336 <USB_FlushRxFifo+0x12>

  return HAL_OK;
 8005354:	2300      	movs	r3, #0
}
 8005356:	4618      	mov	r0, r3
 8005358:	3714      	adds	r7, #20
 800535a:	46bd      	mov	sp, r7
 800535c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005360:	4770      	bx	lr
 8005362:	bf00      	nop
 8005364:	00030d40 	.word	0x00030d40

08005368 <USB_WritePacket>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src, uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8005368:	b480      	push	{r7}
 800536a:	b089      	sub	sp, #36	; 0x24
 800536c:	af00      	add	r7, sp, #0
 800536e:	60f8      	str	r0, [r7, #12]
 8005370:	60b9      	str	r1, [r7, #8]
 8005372:	4611      	mov	r1, r2
 8005374:	461a      	mov	r2, r3
 8005376:	460b      	mov	r3, r1
 8005378:	71fb      	strb	r3, [r7, #7]
 800537a:	4613      	mov	r3, r2
 800537c:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800537e:	68fb      	ldr	r3, [r7, #12]
 8005380:	617b      	str	r3, [r7, #20]
  uint32_t *pSrc = (uint32_t *)src;
 8005382:	68bb      	ldr	r3, [r7, #8]
 8005384:	61fb      	str	r3, [r7, #28]
  uint32_t count32b, i;

  if (dma == 0U)
 8005386:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800538a:	2b00      	cmp	r3, #0
 800538c:	d11a      	bne.n	80053c4 <USB_WritePacket+0x5c>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800538e:	88bb      	ldrh	r3, [r7, #4]
 8005390:	3303      	adds	r3, #3
 8005392:	089b      	lsrs	r3, r3, #2
 8005394:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8005396:	2300      	movs	r3, #0
 8005398:	61bb      	str	r3, [r7, #24]
 800539a:	e00f      	b.n	80053bc <USB_WritePacket+0x54>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800539c:	79fb      	ldrb	r3, [r7, #7]
 800539e:	031a      	lsls	r2, r3, #12
 80053a0:	697b      	ldr	r3, [r7, #20]
 80053a2:	4413      	add	r3, r2
 80053a4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80053a8:	461a      	mov	r2, r3
 80053aa:	69fb      	ldr	r3, [r7, #28]
 80053ac:	681b      	ldr	r3, [r3, #0]
 80053ae:	6013      	str	r3, [r2, #0]
      pSrc++;
 80053b0:	69fb      	ldr	r3, [r7, #28]
 80053b2:	3304      	adds	r3, #4
 80053b4:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 80053b6:	69bb      	ldr	r3, [r7, #24]
 80053b8:	3301      	adds	r3, #1
 80053ba:	61bb      	str	r3, [r7, #24]
 80053bc:	69ba      	ldr	r2, [r7, #24]
 80053be:	693b      	ldr	r3, [r7, #16]
 80053c0:	429a      	cmp	r2, r3
 80053c2:	d3eb      	bcc.n	800539c <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 80053c4:	2300      	movs	r3, #0
}
 80053c6:	4618      	mov	r0, r3
 80053c8:	3724      	adds	r7, #36	; 0x24
 80053ca:	46bd      	mov	sp, r7
 80053cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053d0:	4770      	bx	lr

080053d2 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 80053d2:	b480      	push	{r7}
 80053d4:	b089      	sub	sp, #36	; 0x24
 80053d6:	af00      	add	r7, sp, #0
 80053d8:	60f8      	str	r0, [r7, #12]
 80053da:	60b9      	str	r1, [r7, #8]
 80053dc:	4613      	mov	r3, r2
 80053de:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80053e0:	68fb      	ldr	r3, [r7, #12]
 80053e2:	617b      	str	r3, [r7, #20]
  uint32_t *pDest = (uint32_t *)dest;
 80053e4:	68bb      	ldr	r3, [r7, #8]
 80053e6:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 80053e8:	88fb      	ldrh	r3, [r7, #6]
 80053ea:	3303      	adds	r3, #3
 80053ec:	089b      	lsrs	r3, r3, #2
 80053ee:	613b      	str	r3, [r7, #16]

  for (i = 0U; i < count32b; i++)
 80053f0:	2300      	movs	r3, #0
 80053f2:	61bb      	str	r3, [r7, #24]
 80053f4:	e00b      	b.n	800540e <USB_ReadPacket+0x3c>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 80053f6:	697b      	ldr	r3, [r7, #20]
 80053f8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80053fc:	681a      	ldr	r2, [r3, #0]
 80053fe:	69fb      	ldr	r3, [r7, #28]
 8005400:	601a      	str	r2, [r3, #0]
    pDest++;
 8005402:	69fb      	ldr	r3, [r7, #28]
 8005404:	3304      	adds	r3, #4
 8005406:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 8005408:	69bb      	ldr	r3, [r7, #24]
 800540a:	3301      	adds	r3, #1
 800540c:	61bb      	str	r3, [r7, #24]
 800540e:	69ba      	ldr	r2, [r7, #24]
 8005410:	693b      	ldr	r3, [r7, #16]
 8005412:	429a      	cmp	r2, r3
 8005414:	d3ef      	bcc.n	80053f6 <USB_ReadPacket+0x24>
  }

  return ((void *)pDest);
 8005416:	69fb      	ldr	r3, [r7, #28]
}
 8005418:	4618      	mov	r0, r3
 800541a:	3724      	adds	r7, #36	; 0x24
 800541c:	46bd      	mov	sp, r7
 800541e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005422:	4770      	bx	lr

08005424 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8005424:	b480      	push	{r7}
 8005426:	b085      	sub	sp, #20
 8005428:	af00      	add	r7, sp, #0
 800542a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	695b      	ldr	r3, [r3, #20]
 8005430:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	699b      	ldr	r3, [r3, #24]
 8005436:	68fa      	ldr	r2, [r7, #12]
 8005438:	4013      	ands	r3, r2
 800543a:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800543c:	68fb      	ldr	r3, [r7, #12]
}
 800543e:	4618      	mov	r0, r3
 8005440:	3714      	adds	r7, #20
 8005442:	46bd      	mov	sp, r7
 8005444:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005448:	4770      	bx	lr

0800544a <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800544a:	b480      	push	{r7}
 800544c:	b083      	sub	sp, #12
 800544e:	af00      	add	r7, sp, #0
 8005450:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	695b      	ldr	r3, [r3, #20]
 8005456:	f003 0301 	and.w	r3, r3, #1
}
 800545a:	4618      	mov	r0, r3
 800545c:	370c      	adds	r7, #12
 800545e:	46bd      	mov	sp, r7
 8005460:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005464:	4770      	bx	lr
	...

08005468 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8005468:	b480      	push	{r7}
 800546a:	b085      	sub	sp, #20
 800546c:	af00      	add	r7, sp, #0
 800546e:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 8005470:	2300      	movs	r3, #0
 8005472:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8005474:	68fb      	ldr	r3, [r7, #12]
 8005476:	3301      	adds	r3, #1
 8005478:	60fb      	str	r3, [r7, #12]
 800547a:	68fb      	ldr	r3, [r7, #12]
 800547c:	4a13      	ldr	r2, [pc, #76]	; (80054cc <USB_CoreReset+0x64>)
 800547e:	4293      	cmp	r3, r2
 8005480:	d901      	bls.n	8005486 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8005482:	2303      	movs	r3, #3
 8005484:	e01b      	b.n	80054be <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	691b      	ldr	r3, [r3, #16]
 800548a:	2b00      	cmp	r3, #0
 800548c:	daf2      	bge.n	8005474 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800548e:	2300      	movs	r3, #0
 8005490:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	691b      	ldr	r3, [r3, #16]
 8005496:	f043 0201 	orr.w	r2, r3, #1
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800549e:	68fb      	ldr	r3, [r7, #12]
 80054a0:	3301      	adds	r3, #1
 80054a2:	60fb      	str	r3, [r7, #12]
 80054a4:	68fb      	ldr	r3, [r7, #12]
 80054a6:	4a09      	ldr	r2, [pc, #36]	; (80054cc <USB_CoreReset+0x64>)
 80054a8:	4293      	cmp	r3, r2
 80054aa:	d901      	bls.n	80054b0 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 80054ac:	2303      	movs	r3, #3
 80054ae:	e006      	b.n	80054be <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	691b      	ldr	r3, [r3, #16]
 80054b4:	f003 0301 	and.w	r3, r3, #1
 80054b8:	2b01      	cmp	r3, #1
 80054ba:	d0f0      	beq.n	800549e <USB_CoreReset+0x36>

  return HAL_OK;
 80054bc:	2300      	movs	r3, #0
}
 80054be:	4618      	mov	r0, r3
 80054c0:	3714      	adds	r7, #20
 80054c2:	46bd      	mov	sp, r7
 80054c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054c8:	4770      	bx	lr
 80054ca:	bf00      	nop
 80054cc:	00030d40 	.word	0x00030d40

080054d0 <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80054d0:	b084      	sub	sp, #16
 80054d2:	b580      	push	{r7, lr}
 80054d4:	b084      	sub	sp, #16
 80054d6:	af00      	add	r7, sp, #0
 80054d8:	6078      	str	r0, [r7, #4]
 80054da:	f107 001c 	add.w	r0, r7, #28
 80054de:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t USBx_BASE = (uint32_t)USBx;
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	60bb      	str	r3, [r7, #8]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80054e6:	68bb      	ldr	r3, [r7, #8]
 80054e8:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80054ec:	461a      	mov	r2, r3
 80054ee:	2300      	movs	r3, #0
 80054f0:	6013      	str	r3, [r2, #0]
#else
  /*
  * Disable HW VBUS sensing. VBUS is internally considered to be always
  * at VBUS-Valid level (5V).
  */
  USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80054f6:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005502:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800550e:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	639a      	str	r2, [r3, #56]	; 0x38
#if defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->CID & (0x1U << 8)) != 0U)
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800551a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800551e:	2b00      	cmp	r3, #0
 8005520:	d018      	beq.n	8005554 <USB_HostInit+0x84>
  {
    if (cfg.speed == USB_OTG_SPEED_FULL)
 8005522:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005524:	2b03      	cmp	r3, #3
 8005526:	d10a      	bne.n	800553e <USB_HostInit+0x6e>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 8005528:	68bb      	ldr	r3, [r7, #8]
 800552a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800552e:	681b      	ldr	r3, [r3, #0]
 8005530:	68ba      	ldr	r2, [r7, #8]
 8005532:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005536:	f043 0304 	orr.w	r3, r3, #4
 800553a:	6013      	str	r3, [r2, #0]
 800553c:	e014      	b.n	8005568 <USB_HostInit+0x98>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 800553e:	68bb      	ldr	r3, [r7, #8]
 8005540:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005544:	681b      	ldr	r3, [r3, #0]
 8005546:	68ba      	ldr	r2, [r7, #8]
 8005548:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800554c:	f023 0304 	bic.w	r3, r3, #4
 8005550:	6013      	str	r3, [r2, #0]
 8005552:	e009      	b.n	8005568 <USB_HostInit+0x98>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8005554:	68bb      	ldr	r3, [r7, #8]
 8005556:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800555a:	681b      	ldr	r3, [r3, #0]
 800555c:	68ba      	ldr	r2, [r7, #8]
 800555e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005562:	f023 0304 	bic.w	r3, r3, #4
 8005566:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  (void)USB_FlushTxFifo(USBx, 0x10U); /* all Tx FIFOs */
 8005568:	2110      	movs	r1, #16
 800556a:	6878      	ldr	r0, [r7, #4]
 800556c:	f7ff feb4 	bl	80052d8 <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 8005570:	6878      	ldr	r0, [r7, #4]
 8005572:	f7ff fed7 	bl	8005324 <USB_FlushRxFifo>

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 8005576:	2300      	movs	r3, #0
 8005578:	60fb      	str	r3, [r7, #12]
 800557a:	e015      	b.n	80055a8 <USB_HostInit+0xd8>
  {
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
 800557c:	68fb      	ldr	r3, [r7, #12]
 800557e:	015a      	lsls	r2, r3, #5
 8005580:	68bb      	ldr	r3, [r7, #8]
 8005582:	4413      	add	r3, r2
 8005584:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005588:	461a      	mov	r2, r3
 800558a:	f04f 33ff 	mov.w	r3, #4294967295
 800558e:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 8005590:	68fb      	ldr	r3, [r7, #12]
 8005592:	015a      	lsls	r2, r3, #5
 8005594:	68bb      	ldr	r3, [r7, #8]
 8005596:	4413      	add	r3, r2
 8005598:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800559c:	461a      	mov	r2, r3
 800559e:	2300      	movs	r3, #0
 80055a0:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 80055a2:	68fb      	ldr	r3, [r7, #12]
 80055a4:	3301      	adds	r3, #1
 80055a6:	60fb      	str	r3, [r7, #12]
 80055a8:	6a3b      	ldr	r3, [r7, #32]
 80055aa:	68fa      	ldr	r2, [r7, #12]
 80055ac:	429a      	cmp	r2, r3
 80055ae:	d3e5      	bcc.n	800557c <USB_HostInit+0xac>
  }

  /* Enable VBUS driving */
  (void)USB_DriveVbus(USBx, 1U);
 80055b0:	2101      	movs	r1, #1
 80055b2:	6878      	ldr	r0, [r7, #4]
 80055b4:	f000 f882 	bl	80056bc <USB_DriveVbus>

  HAL_Delay(200U);
 80055b8:	20c8      	movs	r0, #200	; 0xc8
 80055ba:	f7fc f905 	bl	80017c8 <HAL_Delay>

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	2200      	movs	r2, #0
 80055c2:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xFFFFFFFFU;
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	f04f 32ff 	mov.w	r2, #4294967295
 80055ca:	615a      	str	r2, [r3, #20]

  if ((USBx->CID & (0x1U << 8)) != 0U)
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80055d0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80055d4:	2b00      	cmp	r3, #0
 80055d6:	d00b      	beq.n	80055f0 <USB_HostInit+0x120>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	f44f 7200 	mov.w	r2, #512	; 0x200
 80055de:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	4a14      	ldr	r2, [pc, #80]	; (8005634 <USB_HostInit+0x164>)
 80055e4:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	4a13      	ldr	r2, [pc, #76]	; (8005638 <USB_HostInit+0x168>)
 80055ea:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 80055ee:	e009      	b.n	8005604 <USB_HostInit+0x134>
  }
  else
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	2280      	movs	r2, #128	; 0x80
 80055f4:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	4a10      	ldr	r2, [pc, #64]	; (800563c <USB_HostInit+0x16c>)
 80055fa:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	4a10      	ldr	r2, [pc, #64]	; (8005640 <USB_HostInit+0x170>)
 8005600:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8005604:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005606:	2b00      	cmp	r3, #0
 8005608:	d105      	bne.n	8005616 <USB_HostInit+0x146>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	699b      	ldr	r3, [r3, #24]
 800560e:	f043 0210 	orr.w	r2, r3, #16
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	699a      	ldr	r2, [r3, #24]
 800561a:	4b0a      	ldr	r3, [pc, #40]	; (8005644 <USB_HostInit+0x174>)
 800561c:	4313      	orrs	r3, r2
 800561e:	687a      	ldr	r2, [r7, #4]
 8005620:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return HAL_OK;
 8005622:	2300      	movs	r3, #0
}
 8005624:	4618      	mov	r0, r3
 8005626:	3710      	adds	r7, #16
 8005628:	46bd      	mov	sp, r7
 800562a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800562e:	b004      	add	sp, #16
 8005630:	4770      	bx	lr
 8005632:	bf00      	nop
 8005634:	01000200 	.word	0x01000200
 8005638:	00e00300 	.word	0x00e00300
 800563c:	00600080 	.word	0x00600080
 8005640:	004000e0 	.word	0x004000e0
 8005644:	a3200008 	.word	0xa3200008

08005648 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 8005648:	b480      	push	{r7}
 800564a:	b085      	sub	sp, #20
 800564c:	af00      	add	r7, sp, #0
 800564e:	6078      	str	r0, [r7, #4]
 8005650:	460b      	mov	r3, r1
 8005652:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 8005658:	68fb      	ldr	r3, [r7, #12]
 800565a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800565e:	681b      	ldr	r3, [r3, #0]
 8005660:	68fa      	ldr	r2, [r7, #12]
 8005662:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005666:	f023 0303 	bic.w	r3, r3, #3
 800566a:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 800566c:	68fb      	ldr	r3, [r7, #12]
 800566e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005672:	681a      	ldr	r2, [r3, #0]
 8005674:	78fb      	ldrb	r3, [r7, #3]
 8005676:	f003 0303 	and.w	r3, r3, #3
 800567a:	68f9      	ldr	r1, [r7, #12]
 800567c:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8005680:	4313      	orrs	r3, r2
 8005682:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 8005684:	78fb      	ldrb	r3, [r7, #3]
 8005686:	2b01      	cmp	r3, #1
 8005688:	d107      	bne.n	800569a <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = 48000U;
 800568a:	68fb      	ldr	r3, [r7, #12]
 800568c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005690:	461a      	mov	r2, r3
 8005692:	f64b 3380 	movw	r3, #48000	; 0xbb80
 8005696:	6053      	str	r3, [r2, #4]
 8005698:	e009      	b.n	80056ae <USB_InitFSLSPClkSel+0x66>
  }
  else if (freq == HCFG_6_MHZ)
 800569a:	78fb      	ldrb	r3, [r7, #3]
 800569c:	2b02      	cmp	r3, #2
 800569e:	d106      	bne.n	80056ae <USB_InitFSLSPClkSel+0x66>
  {
    USBx_HOST->HFIR = 6000U;
 80056a0:	68fb      	ldr	r3, [r7, #12]
 80056a2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80056a6:	461a      	mov	r2, r3
 80056a8:	f241 7370 	movw	r3, #6000	; 0x1770
 80056ac:	6053      	str	r3, [r2, #4]
  else
  {
    /* ... */
  }

  return HAL_OK;
 80056ae:	2300      	movs	r3, #0
}
 80056b0:	4618      	mov	r0, r3
 80056b2:	3714      	adds	r7, #20
 80056b4:	46bd      	mov	sp, r7
 80056b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056ba:	4770      	bx	lr

080056bc <USB_DriveVbus>:
  *           0 : VBUS Active
  *           1 : VBUS Inactive
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DriveVbus(USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 80056bc:	b480      	push	{r7}
 80056be:	b085      	sub	sp, #20
 80056c0:	af00      	add	r7, sp, #0
 80056c2:	6078      	str	r0, [r7, #4]
 80056c4:	460b      	mov	r3, r1
 80056c6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 80056cc:	2300      	movs	r3, #0
 80056ce:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 80056d0:	68fb      	ldr	r3, [r7, #12]
 80056d2:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80056d6:	681b      	ldr	r3, [r3, #0]
 80056d8:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 80056da:	68bb      	ldr	r3, [r7, #8]
 80056dc:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 80056e0:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 80056e2:	68bb      	ldr	r3, [r7, #8]
 80056e4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80056e8:	2b00      	cmp	r3, #0
 80056ea:	d109      	bne.n	8005700 <USB_DriveVbus+0x44>
 80056ec:	78fb      	ldrb	r3, [r7, #3]
 80056ee:	2b01      	cmp	r3, #1
 80056f0:	d106      	bne.n	8005700 <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 80056f2:	68bb      	ldr	r3, [r7, #8]
 80056f4:	68fa      	ldr	r2, [r7, #12]
 80056f6:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 80056fa:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80056fe:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 8005700:	68bb      	ldr	r3, [r7, #8]
 8005702:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005706:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800570a:	d109      	bne.n	8005720 <USB_DriveVbus+0x64>
 800570c:	78fb      	ldrb	r3, [r7, #3]
 800570e:	2b00      	cmp	r3, #0
 8005710:	d106      	bne.n	8005720 <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 8005712:	68bb      	ldr	r3, [r7, #8]
 8005714:	68fa      	ldr	r2, [r7, #12]
 8005716:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 800571a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800571e:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 8005720:	2300      	movs	r3, #0
}
 8005722:	4618      	mov	r0, r3
 8005724:	3714      	adds	r7, #20
 8005726:	46bd      	mov	sp, r7
 8005728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800572c:	4770      	bx	lr

0800572e <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
*/
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef *USBx)
{
 800572e:	b480      	push	{r7}
 8005730:	b085      	sub	sp, #20
 8005732:	af00      	add	r7, sp, #0
 8005734:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 800573a:	68fb      	ldr	r3, [r7, #12]
 800573c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005740:	689b      	ldr	r3, [r3, #8]
 8005742:	b29b      	uxth	r3, r3
}
 8005744:	4618      	mov	r0, r3
 8005746:	3714      	adds	r7, #20
 8005748:	46bd      	mov	sp, r7
 800574a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800574e:	4770      	bx	lr

08005750 <USB_HC_Init>:
                              uint8_t epnum,
                              uint8_t dev_address,
                              uint8_t speed,
                              uint8_t ep_type,
                              uint16_t mps)
{
 8005750:	b480      	push	{r7}
 8005752:	b087      	sub	sp, #28
 8005754:	af00      	add	r7, sp, #0
 8005756:	6078      	str	r0, [r7, #4]
 8005758:	4608      	mov	r0, r1
 800575a:	4611      	mov	r1, r2
 800575c:	461a      	mov	r2, r3
 800575e:	4603      	mov	r3, r0
 8005760:	70fb      	strb	r3, [r7, #3]
 8005762:	460b      	mov	r3, r1
 8005764:	70bb      	strb	r3, [r7, #2]
 8005766:	4613      	mov	r3, r2
 8005768:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 800576a:	2300      	movs	r3, #0
 800576c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	60bb      	str	r3, [r7, #8]
  uint32_t HCcharEpDir, HCcharLowSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = 0xFFFFFFFFU;
 8005772:	78fb      	ldrb	r3, [r7, #3]
 8005774:	015a      	lsls	r2, r3, #5
 8005776:	68bb      	ldr	r3, [r7, #8]
 8005778:	4413      	add	r3, r2
 800577a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800577e:	461a      	mov	r2, r3
 8005780:	f04f 33ff 	mov.w	r3, #4294967295
 8005784:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 8005786:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800578a:	2b03      	cmp	r3, #3
 800578c:	d87e      	bhi.n	800588c <USB_HC_Init+0x13c>
 800578e:	a201      	add	r2, pc, #4	; (adr r2, 8005794 <USB_HC_Init+0x44>)
 8005790:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005794:	080057a5 	.word	0x080057a5
 8005798:	0800584f 	.word	0x0800584f
 800579c:	080057a5 	.word	0x080057a5
 80057a0:	08005811 	.word	0x08005811
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 80057a4:	78fb      	ldrb	r3, [r7, #3]
 80057a6:	015a      	lsls	r2, r3, #5
 80057a8:	68bb      	ldr	r3, [r7, #8]
 80057aa:	4413      	add	r3, r2
 80057ac:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80057b0:	461a      	mov	r2, r3
 80057b2:	f240 439d 	movw	r3, #1181	; 0x49d
 80057b6:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 80057b8:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80057bc:	2b00      	cmp	r3, #0
 80057be:	da10      	bge.n	80057e2 <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 80057c0:	78fb      	ldrb	r3, [r7, #3]
 80057c2:	015a      	lsls	r2, r3, #5
 80057c4:	68bb      	ldr	r3, [r7, #8]
 80057c6:	4413      	add	r3, r2
 80057c8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80057cc:	68db      	ldr	r3, [r3, #12]
 80057ce:	78fa      	ldrb	r2, [r7, #3]
 80057d0:	0151      	lsls	r1, r2, #5
 80057d2:	68ba      	ldr	r2, [r7, #8]
 80057d4:	440a      	add	r2, r1
 80057d6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80057da:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80057de:	60d3      	str	r3, [r2, #12]
        if ((USBx->CID & (0x1U << 8)) != 0U)
        {
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_NYET | USB_OTG_HCINTMSK_ACKM);
        }
      }
      break;
 80057e0:	e057      	b.n	8005892 <USB_HC_Init+0x142>
        if ((USBx->CID & (0x1U << 8)) != 0U)
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80057e6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80057ea:	2b00      	cmp	r3, #0
 80057ec:	d051      	beq.n	8005892 <USB_HC_Init+0x142>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_NYET | USB_OTG_HCINTMSK_ACKM);
 80057ee:	78fb      	ldrb	r3, [r7, #3]
 80057f0:	015a      	lsls	r2, r3, #5
 80057f2:	68bb      	ldr	r3, [r7, #8]
 80057f4:	4413      	add	r3, r2
 80057f6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80057fa:	68db      	ldr	r3, [r3, #12]
 80057fc:	78fa      	ldrb	r2, [r7, #3]
 80057fe:	0151      	lsls	r1, r2, #5
 8005800:	68ba      	ldr	r2, [r7, #8]
 8005802:	440a      	add	r2, r1
 8005804:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005808:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800580c:	60d3      	str	r3, [r2, #12]
      break;
 800580e:	e040      	b.n	8005892 <USB_HC_Init+0x142>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8005810:	78fb      	ldrb	r3, [r7, #3]
 8005812:	015a      	lsls	r2, r3, #5
 8005814:	68bb      	ldr	r3, [r7, #8]
 8005816:	4413      	add	r3, r2
 8005818:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800581c:	461a      	mov	r2, r3
 800581e:	f240 639d 	movw	r3, #1693	; 0x69d
 8005822:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8005824:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8005828:	2b00      	cmp	r3, #0
 800582a:	da34      	bge.n	8005896 <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 800582c:	78fb      	ldrb	r3, [r7, #3]
 800582e:	015a      	lsls	r2, r3, #5
 8005830:	68bb      	ldr	r3, [r7, #8]
 8005832:	4413      	add	r3, r2
 8005834:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005838:	68db      	ldr	r3, [r3, #12]
 800583a:	78fa      	ldrb	r2, [r7, #3]
 800583c:	0151      	lsls	r1, r2, #5
 800583e:	68ba      	ldr	r2, [r7, #8]
 8005840:	440a      	add	r2, r1
 8005842:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005846:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800584a:	60d3      	str	r3, [r2, #12]
      }

      break;
 800584c:	e023      	b.n	8005896 <USB_HC_Init+0x146>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 800584e:	78fb      	ldrb	r3, [r7, #3]
 8005850:	015a      	lsls	r2, r3, #5
 8005852:	68bb      	ldr	r3, [r7, #8]
 8005854:	4413      	add	r3, r2
 8005856:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800585a:	461a      	mov	r2, r3
 800585c:	f240 2325 	movw	r3, #549	; 0x225
 8005860:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8005862:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8005866:	2b00      	cmp	r3, #0
 8005868:	da17      	bge.n	800589a <USB_HC_Init+0x14a>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 800586a:	78fb      	ldrb	r3, [r7, #3]
 800586c:	015a      	lsls	r2, r3, #5
 800586e:	68bb      	ldr	r3, [r7, #8]
 8005870:	4413      	add	r3, r2
 8005872:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005876:	68db      	ldr	r3, [r3, #12]
 8005878:	78fa      	ldrb	r2, [r7, #3]
 800587a:	0151      	lsls	r1, r2, #5
 800587c:	68ba      	ldr	r2, [r7, #8]
 800587e:	440a      	add	r2, r1
 8005880:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005884:	f443 73c0 	orr.w	r3, r3, #384	; 0x180
 8005888:	60d3      	str	r3, [r2, #12]
      }
      break;
 800588a:	e006      	b.n	800589a <USB_HC_Init+0x14a>

    default:
      ret = HAL_ERROR;
 800588c:	2301      	movs	r3, #1
 800588e:	75fb      	strb	r3, [r7, #23]
      break;
 8005890:	e004      	b.n	800589c <USB_HC_Init+0x14c>
      break;
 8005892:	bf00      	nop
 8005894:	e002      	b.n	800589c <USB_HC_Init+0x14c>
      break;
 8005896:	bf00      	nop
 8005898:	e000      	b.n	800589c <USB_HC_Init+0x14c>
      break;
 800589a:	bf00      	nop
  }

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 800589c:	68bb      	ldr	r3, [r7, #8]
 800589e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80058a2:	699a      	ldr	r2, [r3, #24]
 80058a4:	78fb      	ldrb	r3, [r7, #3]
 80058a6:	f003 030f 	and.w	r3, r3, #15
 80058aa:	2101      	movs	r1, #1
 80058ac:	fa01 f303 	lsl.w	r3, r1, r3
 80058b0:	68b9      	ldr	r1, [r7, #8]
 80058b2:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 80058b6:	4313      	orrs	r3, r2
 80058b8:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	699b      	ldr	r3, [r3, #24]
 80058be:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 80058c6:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80058ca:	2b00      	cmp	r3, #0
 80058cc:	da03      	bge.n	80058d6 <USB_HC_Init+0x186>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 80058ce:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80058d2:	613b      	str	r3, [r7, #16]
 80058d4:	e001      	b.n	80058da <USB_HC_Init+0x18a>
  }
  else
  {
    HCcharEpDir = 0U;
 80058d6:	2300      	movs	r3, #0
 80058d8:	613b      	str	r3, [r7, #16]
  }

  if (speed == HPRT0_PRTSPD_LOW_SPEED)
 80058da:	f897 3020 	ldrb.w	r3, [r7, #32]
 80058de:	2b02      	cmp	r3, #2
 80058e0:	d103      	bne.n	80058ea <USB_HC_Init+0x19a>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 80058e2:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80058e6:	60fb      	str	r3, [r7, #12]
 80058e8:	e001      	b.n	80058ee <USB_HC_Init+0x19e>
  }
  else
  {
    HCcharLowSpeed = 0U;
 80058ea:	2300      	movs	r3, #0
 80058ec:	60fb      	str	r3, [r7, #12]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 80058ee:	787b      	ldrb	r3, [r7, #1]
 80058f0:	059b      	lsls	r3, r3, #22
 80058f2:	f003 52fe 	and.w	r2, r3, #532676608	; 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 80058f6:	78bb      	ldrb	r3, [r7, #2]
 80058f8:	02db      	lsls	r3, r3, #11
 80058fa:	f403 43f0 	and.w	r3, r3, #30720	; 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 80058fe:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8005900:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8005904:	049b      	lsls	r3, r3, #18
 8005906:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 800590a:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 800590c:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800590e:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8005912:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8005914:	693b      	ldr	r3, [r7, #16]
 8005916:	431a      	orrs	r2, r3
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8005918:	78fb      	ldrb	r3, [r7, #3]
 800591a:	0159      	lsls	r1, r3, #5
 800591c:	68bb      	ldr	r3, [r7, #8]
 800591e:	440b      	add	r3, r1
 8005920:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005924:	4619      	mov	r1, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8005926:	68fb      	ldr	r3, [r7, #12]
 8005928:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800592a:	600b      	str	r3, [r1, #0]

  if (ep_type == EP_TYPE_INTR)
 800592c:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8005930:	2b03      	cmp	r3, #3
 8005932:	d10f      	bne.n	8005954 <USB_HC_Init+0x204>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM ;
 8005934:	78fb      	ldrb	r3, [r7, #3]
 8005936:	015a      	lsls	r2, r3, #5
 8005938:	68bb      	ldr	r3, [r7, #8]
 800593a:	4413      	add	r3, r2
 800593c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005940:	681b      	ldr	r3, [r3, #0]
 8005942:	78fa      	ldrb	r2, [r7, #3]
 8005944:	0151      	lsls	r1, r2, #5
 8005946:	68ba      	ldr	r2, [r7, #8]
 8005948:	440a      	add	r2, r1
 800594a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800594e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005952:	6013      	str	r3, [r2, #0]
  }

  return ret;
 8005954:	7dfb      	ldrb	r3, [r7, #23]
}
 8005956:	4618      	mov	r0, r3
 8005958:	371c      	adds	r7, #28
 800595a:	46bd      	mov	sp, r7
 800595c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005960:	4770      	bx	lr
 8005962:	bf00      	nop

08005964 <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 8005964:	b580      	push	{r7, lr}
 8005966:	b08c      	sub	sp, #48	; 0x30
 8005968:	af02      	add	r7, sp, #8
 800596a:	60f8      	str	r0, [r7, #12]
 800596c:	60b9      	str	r1, [r7, #8]
 800596e:	4613      	mov	r3, r2
 8005970:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005972:	68fb      	ldr	r3, [r7, #12]
 8005974:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 8005976:	68bb      	ldr	r3, [r7, #8]
 8005978:	785b      	ldrb	r3, [r3, #1]
 800597a:	61fb      	str	r3, [r7, #28]
  static __IO uint32_t tmpreg = 0U;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = 256U;
 800597c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005980:	837b      	strh	r3, [r7, #26]

  if (((USBx->CID & (0x1U << 8)) != 0U) && (hc->speed == USBH_HS_SPEED))
 8005982:	68fb      	ldr	r3, [r7, #12]
 8005984:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005986:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800598a:	2b00      	cmp	r3, #0
 800598c:	d028      	beq.n	80059e0 <USB_HC_StartXfer+0x7c>
 800598e:	68bb      	ldr	r3, [r7, #8]
 8005990:	791b      	ldrb	r3, [r3, #4]
 8005992:	2b00      	cmp	r3, #0
 8005994:	d124      	bne.n	80059e0 <USB_HC_StartXfer+0x7c>
  {
    if ((dma == 0U) && (hc->do_ping == 1U))
 8005996:	79fb      	ldrb	r3, [r7, #7]
 8005998:	2b00      	cmp	r3, #0
 800599a:	d10b      	bne.n	80059b4 <USB_HC_StartXfer+0x50>
 800599c:	68bb      	ldr	r3, [r7, #8]
 800599e:	795b      	ldrb	r3, [r3, #5]
 80059a0:	2b01      	cmp	r3, #1
 80059a2:	d107      	bne.n	80059b4 <USB_HC_StartXfer+0x50>
    {
      (void)USB_DoPing(USBx, hc->ch_num);
 80059a4:	68bb      	ldr	r3, [r7, #8]
 80059a6:	785b      	ldrb	r3, [r3, #1]
 80059a8:	4619      	mov	r1, r3
 80059aa:	68f8      	ldr	r0, [r7, #12]
 80059ac:	f000 fa2e 	bl	8005e0c <USB_DoPing>
      return HAL_OK;
 80059b0:	2300      	movs	r3, #0
 80059b2:	e112      	b.n	8005bda <USB_HC_StartXfer+0x276>
    }
    else if (dma == 1U)
 80059b4:	79fb      	ldrb	r3, [r7, #7]
 80059b6:	2b01      	cmp	r3, #1
 80059b8:	d112      	bne.n	80059e0 <USB_HC_StartXfer+0x7c>
    {
      USBx_HC(ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET | USB_OTG_HCINTMSK_ACKM);
 80059ba:	69fb      	ldr	r3, [r7, #28]
 80059bc:	015a      	lsls	r2, r3, #5
 80059be:	6a3b      	ldr	r3, [r7, #32]
 80059c0:	4413      	add	r3, r2
 80059c2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80059c6:	68db      	ldr	r3, [r3, #12]
 80059c8:	69fa      	ldr	r2, [r7, #28]
 80059ca:	0151      	lsls	r1, r2, #5
 80059cc:	6a3a      	ldr	r2, [r7, #32]
 80059ce:	440a      	add	r2, r1
 80059d0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80059d4:	f023 0360 	bic.w	r3, r3, #96	; 0x60
 80059d8:	60d3      	str	r3, [r2, #12]
      hc->do_ping = 0U;
 80059da:	68bb      	ldr	r3, [r7, #8]
 80059dc:	2200      	movs	r2, #0
 80059de:	715a      	strb	r2, [r3, #5]
      /* ... */
    }
  }

  /* Compute the expected number of packets associated to the transfer */
  if (hc->xfer_len > 0U)
 80059e0:	68bb      	ldr	r3, [r7, #8]
 80059e2:	691b      	ldr	r3, [r3, #16]
 80059e4:	2b00      	cmp	r3, #0
 80059e6:	d018      	beq.n	8005a1a <USB_HC_StartXfer+0xb6>
  {
    num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 80059e8:	68bb      	ldr	r3, [r7, #8]
 80059ea:	691b      	ldr	r3, [r3, #16]
 80059ec:	68ba      	ldr	r2, [r7, #8]
 80059ee:	8912      	ldrh	r2, [r2, #8]
 80059f0:	4413      	add	r3, r2
 80059f2:	3b01      	subs	r3, #1
 80059f4:	68ba      	ldr	r2, [r7, #8]
 80059f6:	8912      	ldrh	r2, [r2, #8]
 80059f8:	fbb3 f3f2 	udiv	r3, r3, r2
 80059fc:	84fb      	strh	r3, [r7, #38]	; 0x26

    if (num_packets > max_hc_pkt_count)
 80059fe:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8005a00:	8b7b      	ldrh	r3, [r7, #26]
 8005a02:	429a      	cmp	r2, r3
 8005a04:	d90b      	bls.n	8005a1e <USB_HC_StartXfer+0xba>
    {
      num_packets = max_hc_pkt_count;
 8005a06:	8b7b      	ldrh	r3, [r7, #26]
 8005a08:	84fb      	strh	r3, [r7, #38]	; 0x26
      hc->xfer_len = (uint32_t)num_packets * hc->max_packet;
 8005a0a:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8005a0c:	68ba      	ldr	r2, [r7, #8]
 8005a0e:	8912      	ldrh	r2, [r2, #8]
 8005a10:	fb02 f203 	mul.w	r2, r2, r3
 8005a14:	68bb      	ldr	r3, [r7, #8]
 8005a16:	611a      	str	r2, [r3, #16]
 8005a18:	e001      	b.n	8005a1e <USB_HC_StartXfer+0xba>
    }
  }
  else
  {
    num_packets = 1U;
 8005a1a:	2301      	movs	r3, #1
 8005a1c:	84fb      	strh	r3, [r7, #38]	; 0x26
  }
  if (hc->ep_is_in != 0U)
 8005a1e:	68bb      	ldr	r3, [r7, #8]
 8005a20:	78db      	ldrb	r3, [r3, #3]
 8005a22:	2b00      	cmp	r3, #0
 8005a24:	d006      	beq.n	8005a34 <USB_HC_StartXfer+0xd0>
  {
    hc->xfer_len = (uint32_t)num_packets * hc->max_packet;
 8005a26:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8005a28:	68ba      	ldr	r2, [r7, #8]
 8005a2a:	8912      	ldrh	r2, [r2, #8]
 8005a2c:	fb02 f203 	mul.w	r2, r2, r3
 8005a30:	68bb      	ldr	r3, [r7, #8]
 8005a32:	611a      	str	r2, [r3, #16]
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 8005a34:	68bb      	ldr	r3, [r7, #8]
 8005a36:	691b      	ldr	r3, [r3, #16]
 8005a38:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8005a3c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8005a3e:	04d9      	lsls	r1, r3, #19
 8005a40:	4b68      	ldr	r3, [pc, #416]	; (8005be4 <USB_HC_StartXfer+0x280>)
 8005a42:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 8005a44:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 8005a46:	68bb      	ldr	r3, [r7, #8]
 8005a48:	7a9b      	ldrb	r3, [r3, #10]
 8005a4a:	075b      	lsls	r3, r3, #29
 8005a4c:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 8005a50:	69f9      	ldr	r1, [r7, #28]
 8005a52:	0148      	lsls	r0, r1, #5
 8005a54:	6a39      	ldr	r1, [r7, #32]
 8005a56:	4401      	add	r1, r0
 8005a58:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8005a5c:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 8005a5e:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 8005a60:	79fb      	ldrb	r3, [r7, #7]
 8005a62:	2b00      	cmp	r3, #0
 8005a64:	d009      	beq.n	8005a7a <USB_HC_StartXfer+0x116>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 8005a66:	68bb      	ldr	r3, [r7, #8]
 8005a68:	68d9      	ldr	r1, [r3, #12]
 8005a6a:	69fb      	ldr	r3, [r7, #28]
 8005a6c:	015a      	lsls	r2, r3, #5
 8005a6e:	6a3b      	ldr	r3, [r7, #32]
 8005a70:	4413      	add	r3, r2
 8005a72:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005a76:	460a      	mov	r2, r1
 8005a78:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 8005a7a:	6a3b      	ldr	r3, [r7, #32]
 8005a7c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005a80:	689b      	ldr	r3, [r3, #8]
 8005a82:	f003 0301 	and.w	r3, r3, #1
 8005a86:	2b00      	cmp	r3, #0
 8005a88:	bf0c      	ite	eq
 8005a8a:	2301      	moveq	r3, #1
 8005a8c:	2300      	movne	r3, #0
 8005a8e:	b2db      	uxtb	r3, r3
 8005a90:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 8005a92:	69fb      	ldr	r3, [r7, #28]
 8005a94:	015a      	lsls	r2, r3, #5
 8005a96:	6a3b      	ldr	r3, [r7, #32]
 8005a98:	4413      	add	r3, r2
 8005a9a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005a9e:	681b      	ldr	r3, [r3, #0]
 8005aa0:	69fa      	ldr	r2, [r7, #28]
 8005aa2:	0151      	lsls	r1, r2, #5
 8005aa4:	6a3a      	ldr	r2, [r7, #32]
 8005aa6:	440a      	add	r2, r1
 8005aa8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005aac:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8005ab0:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 8005ab2:	69fb      	ldr	r3, [r7, #28]
 8005ab4:	015a      	lsls	r2, r3, #5
 8005ab6:	6a3b      	ldr	r3, [r7, #32]
 8005ab8:	4413      	add	r3, r2
 8005aba:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005abe:	681a      	ldr	r2, [r3, #0]
 8005ac0:	7e7b      	ldrb	r3, [r7, #25]
 8005ac2:	075b      	lsls	r3, r3, #29
 8005ac4:	69f9      	ldr	r1, [r7, #28]
 8005ac6:	0148      	lsls	r0, r1, #5
 8005ac8:	6a39      	ldr	r1, [r7, #32]
 8005aca:	4401      	add	r1, r0
 8005acc:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
 8005ad0:	4313      	orrs	r3, r2
 8005ad2:	600b      	str	r3, [r1, #0]

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 8005ad4:	69fb      	ldr	r3, [r7, #28]
 8005ad6:	015a      	lsls	r2, r3, #5
 8005ad8:	6a3b      	ldr	r3, [r7, #32]
 8005ada:	4413      	add	r3, r2
 8005adc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005ae0:	681b      	ldr	r3, [r3, #0]
 8005ae2:	4a41      	ldr	r2, [pc, #260]	; (8005be8 <USB_HC_StartXfer+0x284>)
 8005ae4:	6013      	str	r3, [r2, #0]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8005ae6:	4b40      	ldr	r3, [pc, #256]	; (8005be8 <USB_HC_StartXfer+0x284>)
 8005ae8:	681b      	ldr	r3, [r3, #0]
 8005aea:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8005aee:	4a3e      	ldr	r2, [pc, #248]	; (8005be8 <USB_HC_StartXfer+0x284>)
 8005af0:	6013      	str	r3, [r2, #0]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 8005af2:	68bb      	ldr	r3, [r7, #8]
 8005af4:	78db      	ldrb	r3, [r3, #3]
 8005af6:	2b00      	cmp	r3, #0
 8005af8:	d006      	beq.n	8005b08 <USB_HC_StartXfer+0x1a4>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 8005afa:	4b3b      	ldr	r3, [pc, #236]	; (8005be8 <USB_HC_StartXfer+0x284>)
 8005afc:	681b      	ldr	r3, [r3, #0]
 8005afe:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005b02:	4a39      	ldr	r2, [pc, #228]	; (8005be8 <USB_HC_StartXfer+0x284>)
 8005b04:	6013      	str	r3, [r2, #0]
 8005b06:	e005      	b.n	8005b14 <USB_HC_StartXfer+0x1b0>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 8005b08:	4b37      	ldr	r3, [pc, #220]	; (8005be8 <USB_HC_StartXfer+0x284>)
 8005b0a:	681b      	ldr	r3, [r3, #0]
 8005b0c:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8005b10:	4a35      	ldr	r2, [pc, #212]	; (8005be8 <USB_HC_StartXfer+0x284>)
 8005b12:	6013      	str	r3, [r2, #0]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8005b14:	4b34      	ldr	r3, [pc, #208]	; (8005be8 <USB_HC_StartXfer+0x284>)
 8005b16:	681b      	ldr	r3, [r3, #0]
 8005b18:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005b1c:	4a32      	ldr	r2, [pc, #200]	; (8005be8 <USB_HC_StartXfer+0x284>)
 8005b1e:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 8005b20:	69fb      	ldr	r3, [r7, #28]
 8005b22:	015a      	lsls	r2, r3, #5
 8005b24:	6a3b      	ldr	r3, [r7, #32]
 8005b26:	4413      	add	r3, r2
 8005b28:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005b2c:	461a      	mov	r2, r3
 8005b2e:	4b2e      	ldr	r3, [pc, #184]	; (8005be8 <USB_HC_StartXfer+0x284>)
 8005b30:	681b      	ldr	r3, [r3, #0]
 8005b32:	6013      	str	r3, [r2, #0]

  if (dma == 0U) /* Slave mode */
 8005b34:	79fb      	ldrb	r3, [r7, #7]
 8005b36:	2b00      	cmp	r3, #0
 8005b38:	d14e      	bne.n	8005bd8 <USB_HC_StartXfer+0x274>
  {
    if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U))
 8005b3a:	68bb      	ldr	r3, [r7, #8]
 8005b3c:	78db      	ldrb	r3, [r3, #3]
 8005b3e:	2b00      	cmp	r3, #0
 8005b40:	d14a      	bne.n	8005bd8 <USB_HC_StartXfer+0x274>
 8005b42:	68bb      	ldr	r3, [r7, #8]
 8005b44:	691b      	ldr	r3, [r3, #16]
 8005b46:	2b00      	cmp	r3, #0
 8005b48:	d046      	beq.n	8005bd8 <USB_HC_StartXfer+0x274>
    {
      switch (hc->ep_type)
 8005b4a:	68bb      	ldr	r3, [r7, #8]
 8005b4c:	79db      	ldrb	r3, [r3, #7]
 8005b4e:	2b03      	cmp	r3, #3
 8005b50:	d830      	bhi.n	8005bb4 <USB_HC_StartXfer+0x250>
 8005b52:	a201      	add	r2, pc, #4	; (adr r2, 8005b58 <USB_HC_StartXfer+0x1f4>)
 8005b54:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005b58:	08005b69 	.word	0x08005b69
 8005b5c:	08005b8d 	.word	0x08005b8d
 8005b60:	08005b69 	.word	0x08005b69
 8005b64:	08005b8d 	.word	0x08005b8d
      {
        /* Non periodic transfer */
        case EP_TYPE_CTRL:
        case EP_TYPE_BULK:

          len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8005b68:	68bb      	ldr	r3, [r7, #8]
 8005b6a:	691b      	ldr	r3, [r3, #16]
 8005b6c:	3303      	adds	r3, #3
 8005b6e:	089b      	lsrs	r3, r3, #2
 8005b70:	82fb      	strh	r3, [r7, #22]

          /* check if there is enough space in FIFO space */
          if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 8005b72:	8afa      	ldrh	r2, [r7, #22]
 8005b74:	68fb      	ldr	r3, [r7, #12]
 8005b76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b78:	b29b      	uxth	r3, r3
 8005b7a:	429a      	cmp	r2, r3
 8005b7c:	d91c      	bls.n	8005bb8 <USB_HC_StartXfer+0x254>
          {
            /* need to process data in nptxfempty interrupt */
            USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 8005b7e:	68fb      	ldr	r3, [r7, #12]
 8005b80:	699b      	ldr	r3, [r3, #24]
 8005b82:	f043 0220 	orr.w	r2, r3, #32
 8005b86:	68fb      	ldr	r3, [r7, #12]
 8005b88:	619a      	str	r2, [r3, #24]
          }
          break;
 8005b8a:	e015      	b.n	8005bb8 <USB_HC_StartXfer+0x254>

        /* Periodic transfer */
        case EP_TYPE_INTR:
        case EP_TYPE_ISOC:
          len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8005b8c:	68bb      	ldr	r3, [r7, #8]
 8005b8e:	691b      	ldr	r3, [r3, #16]
 8005b90:	3303      	adds	r3, #3
 8005b92:	089b      	lsrs	r3, r3, #2
 8005b94:	82fb      	strh	r3, [r7, #22]
          /* check if there is enough space in FIFO space */
          if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 8005b96:	8afa      	ldrh	r2, [r7, #22]
 8005b98:	6a3b      	ldr	r3, [r7, #32]
 8005b9a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005b9e:	691b      	ldr	r3, [r3, #16]
 8005ba0:	b29b      	uxth	r3, r3
 8005ba2:	429a      	cmp	r2, r3
 8005ba4:	d90a      	bls.n	8005bbc <USB_HC_StartXfer+0x258>
          {
            /* need to process data in ptxfempty interrupt */
            USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 8005ba6:	68fb      	ldr	r3, [r7, #12]
 8005ba8:	699b      	ldr	r3, [r3, #24]
 8005baa:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 8005bae:	68fb      	ldr	r3, [r7, #12]
 8005bb0:	619a      	str	r2, [r3, #24]
          }
          break;
 8005bb2:	e003      	b.n	8005bbc <USB_HC_StartXfer+0x258>

        default:
          break;
 8005bb4:	bf00      	nop
 8005bb6:	e002      	b.n	8005bbe <USB_HC_StartXfer+0x25a>
          break;
 8005bb8:	bf00      	nop
 8005bba:	e000      	b.n	8005bbe <USB_HC_StartXfer+0x25a>
          break;
 8005bbc:	bf00      	nop
      }

      /* Write packet into the Tx FIFO. */
      (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 8005bbe:	68bb      	ldr	r3, [r7, #8]
 8005bc0:	68d9      	ldr	r1, [r3, #12]
 8005bc2:	68bb      	ldr	r3, [r7, #8]
 8005bc4:	785a      	ldrb	r2, [r3, #1]
 8005bc6:	68bb      	ldr	r3, [r7, #8]
 8005bc8:	691b      	ldr	r3, [r3, #16]
 8005bca:	b298      	uxth	r0, r3
 8005bcc:	2300      	movs	r3, #0
 8005bce:	9300      	str	r3, [sp, #0]
 8005bd0:	4603      	mov	r3, r0
 8005bd2:	68f8      	ldr	r0, [r7, #12]
 8005bd4:	f7ff fbc8 	bl	8005368 <USB_WritePacket>
    }
  }

  return HAL_OK;
 8005bd8:	2300      	movs	r3, #0
}
 8005bda:	4618      	mov	r0, r3
 8005bdc:	3728      	adds	r7, #40	; 0x28
 8005bde:	46bd      	mov	sp, r7
 8005be0:	bd80      	pop	{r7, pc}
 8005be2:	bf00      	nop
 8005be4:	1ff80000 	.word	0x1ff80000
 8005be8:	200000b8 	.word	0x200000b8

08005bec <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8005bec:	b480      	push	{r7}
 8005bee:	b085      	sub	sp, #20
 8005bf0:	af00      	add	r7, sp, #0
 8005bf2:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 8005bf8:	68fb      	ldr	r3, [r7, #12]
 8005bfa:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005bfe:	695b      	ldr	r3, [r3, #20]
 8005c00:	b29b      	uxth	r3, r3
}
 8005c02:	4618      	mov	r0, r3
 8005c04:	3714      	adds	r7, #20
 8005c06:	46bd      	mov	sp, r7
 8005c08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c0c:	4770      	bx	lr

08005c0e <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 8005c0e:	b480      	push	{r7}
 8005c10:	b087      	sub	sp, #28
 8005c12:	af00      	add	r7, sp, #0
 8005c14:	6078      	str	r0, [r7, #4]
 8005c16:	460b      	mov	r3, r1
 8005c18:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	613b      	str	r3, [r7, #16]
  uint32_t hcnum = (uint32_t)hc_num;
 8005c1e:	78fb      	ldrb	r3, [r7, #3]
 8005c20:	60fb      	str	r3, [r7, #12]
  uint32_t count = 0U;
 8005c22:	2300      	movs	r3, #0
 8005c24:	617b      	str	r3, [r7, #20]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 8005c26:	68fb      	ldr	r3, [r7, #12]
 8005c28:	015a      	lsls	r2, r3, #5
 8005c2a:	693b      	ldr	r3, [r7, #16]
 8005c2c:	4413      	add	r3, r2
 8005c2e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005c32:	681b      	ldr	r3, [r3, #0]
 8005c34:	0c9b      	lsrs	r3, r3, #18
 8005c36:	f003 0303 	and.w	r3, r3, #3
 8005c3a:	60bb      	str	r3, [r7, #8]

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 8005c3c:	68bb      	ldr	r3, [r7, #8]
 8005c3e:	2b00      	cmp	r3, #0
 8005c40:	d002      	beq.n	8005c48 <USB_HC_Halt+0x3a>
 8005c42:	68bb      	ldr	r3, [r7, #8]
 8005c44:	2b02      	cmp	r3, #2
 8005c46:	d16c      	bne.n	8005d22 <USB_HC_Halt+0x114>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8005c48:	68fb      	ldr	r3, [r7, #12]
 8005c4a:	015a      	lsls	r2, r3, #5
 8005c4c:	693b      	ldr	r3, [r7, #16]
 8005c4e:	4413      	add	r3, r2
 8005c50:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005c54:	681b      	ldr	r3, [r3, #0]
 8005c56:	68fa      	ldr	r2, [r7, #12]
 8005c58:	0151      	lsls	r1, r2, #5
 8005c5a:	693a      	ldr	r2, [r7, #16]
 8005c5c:	440a      	add	r2, r1
 8005c5e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005c62:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005c66:	6013      	str	r3, [r2, #0]

    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c6c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8005c70:	2b00      	cmp	r3, #0
 8005c72:	d143      	bne.n	8005cfc <USB_HC_Halt+0xee>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8005c74:	68fb      	ldr	r3, [r7, #12]
 8005c76:	015a      	lsls	r2, r3, #5
 8005c78:	693b      	ldr	r3, [r7, #16]
 8005c7a:	4413      	add	r3, r2
 8005c7c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005c80:	681b      	ldr	r3, [r3, #0]
 8005c82:	68fa      	ldr	r2, [r7, #12]
 8005c84:	0151      	lsls	r1, r2, #5
 8005c86:	693a      	ldr	r2, [r7, #16]
 8005c88:	440a      	add	r2, r1
 8005c8a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005c8e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005c92:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8005c94:	68fb      	ldr	r3, [r7, #12]
 8005c96:	015a      	lsls	r2, r3, #5
 8005c98:	693b      	ldr	r3, [r7, #16]
 8005c9a:	4413      	add	r3, r2
 8005c9c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005ca0:	681b      	ldr	r3, [r3, #0]
 8005ca2:	68fa      	ldr	r2, [r7, #12]
 8005ca4:	0151      	lsls	r1, r2, #5
 8005ca6:	693a      	ldr	r2, [r7, #16]
 8005ca8:	440a      	add	r2, r1
 8005caa:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005cae:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005cb2:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 8005cb4:	68fb      	ldr	r3, [r7, #12]
 8005cb6:	015a      	lsls	r2, r3, #5
 8005cb8:	693b      	ldr	r3, [r7, #16]
 8005cba:	4413      	add	r3, r2
 8005cbc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005cc0:	681b      	ldr	r3, [r3, #0]
 8005cc2:	68fa      	ldr	r2, [r7, #12]
 8005cc4:	0151      	lsls	r1, r2, #5
 8005cc6:	693a      	ldr	r2, [r7, #16]
 8005cc8:	440a      	add	r2, r1
 8005cca:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005cce:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8005cd2:	6013      	str	r3, [r2, #0]
      do
      {
        if (++count > 1000U)
 8005cd4:	697b      	ldr	r3, [r7, #20]
 8005cd6:	3301      	adds	r3, #1
 8005cd8:	617b      	str	r3, [r7, #20]
 8005cda:	697b      	ldr	r3, [r7, #20]
 8005cdc:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005ce0:	d81d      	bhi.n	8005d1e <USB_HC_Halt+0x110>
        {
          break;
        }
      }
      while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8005ce2:	68fb      	ldr	r3, [r7, #12]
 8005ce4:	015a      	lsls	r2, r3, #5
 8005ce6:	693b      	ldr	r3, [r7, #16]
 8005ce8:	4413      	add	r3, r2
 8005cea:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005cee:	681b      	ldr	r3, [r3, #0]
 8005cf0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005cf4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005cf8:	d0ec      	beq.n	8005cd4 <USB_HC_Halt+0xc6>
    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8005cfa:	e080      	b.n	8005dfe <USB_HC_Halt+0x1f0>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8005cfc:	68fb      	ldr	r3, [r7, #12]
 8005cfe:	015a      	lsls	r2, r3, #5
 8005d00:	693b      	ldr	r3, [r7, #16]
 8005d02:	4413      	add	r3, r2
 8005d04:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005d08:	681b      	ldr	r3, [r3, #0]
 8005d0a:	68fa      	ldr	r2, [r7, #12]
 8005d0c:	0151      	lsls	r1, r2, #5
 8005d0e:	693a      	ldr	r2, [r7, #16]
 8005d10:	440a      	add	r2, r1
 8005d12:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005d16:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005d1a:	6013      	str	r3, [r2, #0]
    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8005d1c:	e06f      	b.n	8005dfe <USB_HC_Halt+0x1f0>
          break;
 8005d1e:	bf00      	nop
    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8005d20:	e06d      	b.n	8005dfe <USB_HC_Halt+0x1f0>
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8005d22:	68fb      	ldr	r3, [r7, #12]
 8005d24:	015a      	lsls	r2, r3, #5
 8005d26:	693b      	ldr	r3, [r7, #16]
 8005d28:	4413      	add	r3, r2
 8005d2a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005d2e:	681b      	ldr	r3, [r3, #0]
 8005d30:	68fa      	ldr	r2, [r7, #12]
 8005d32:	0151      	lsls	r1, r2, #5
 8005d34:	693a      	ldr	r2, [r7, #16]
 8005d36:	440a      	add	r2, r1
 8005d38:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005d3c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005d40:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 8005d42:	693b      	ldr	r3, [r7, #16]
 8005d44:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005d48:	691b      	ldr	r3, [r3, #16]
 8005d4a:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8005d4e:	2b00      	cmp	r3, #0
 8005d50:	d143      	bne.n	8005dda <USB_HC_Halt+0x1cc>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8005d52:	68fb      	ldr	r3, [r7, #12]
 8005d54:	015a      	lsls	r2, r3, #5
 8005d56:	693b      	ldr	r3, [r7, #16]
 8005d58:	4413      	add	r3, r2
 8005d5a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005d5e:	681b      	ldr	r3, [r3, #0]
 8005d60:	68fa      	ldr	r2, [r7, #12]
 8005d62:	0151      	lsls	r1, r2, #5
 8005d64:	693a      	ldr	r2, [r7, #16]
 8005d66:	440a      	add	r2, r1
 8005d68:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005d6c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005d70:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8005d72:	68fb      	ldr	r3, [r7, #12]
 8005d74:	015a      	lsls	r2, r3, #5
 8005d76:	693b      	ldr	r3, [r7, #16]
 8005d78:	4413      	add	r3, r2
 8005d7a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005d7e:	681b      	ldr	r3, [r3, #0]
 8005d80:	68fa      	ldr	r2, [r7, #12]
 8005d82:	0151      	lsls	r1, r2, #5
 8005d84:	693a      	ldr	r2, [r7, #16]
 8005d86:	440a      	add	r2, r1
 8005d88:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005d8c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005d90:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 8005d92:	68fb      	ldr	r3, [r7, #12]
 8005d94:	015a      	lsls	r2, r3, #5
 8005d96:	693b      	ldr	r3, [r7, #16]
 8005d98:	4413      	add	r3, r2
 8005d9a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005d9e:	681b      	ldr	r3, [r3, #0]
 8005da0:	68fa      	ldr	r2, [r7, #12]
 8005da2:	0151      	lsls	r1, r2, #5
 8005da4:	693a      	ldr	r2, [r7, #16]
 8005da6:	440a      	add	r2, r1
 8005da8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005dac:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8005db0:	6013      	str	r3, [r2, #0]
      do
      {
        if (++count > 1000U)
 8005db2:	697b      	ldr	r3, [r7, #20]
 8005db4:	3301      	adds	r3, #1
 8005db6:	617b      	str	r3, [r7, #20]
 8005db8:	697b      	ldr	r3, [r7, #20]
 8005dba:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005dbe:	d81d      	bhi.n	8005dfc <USB_HC_Halt+0x1ee>
        {
          break;
        }
      }
      while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8005dc0:	68fb      	ldr	r3, [r7, #12]
 8005dc2:	015a      	lsls	r2, r3, #5
 8005dc4:	693b      	ldr	r3, [r7, #16]
 8005dc6:	4413      	add	r3, r2
 8005dc8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005dcc:	681b      	ldr	r3, [r3, #0]
 8005dce:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005dd2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005dd6:	d0ec      	beq.n	8005db2 <USB_HC_Halt+0x1a4>
 8005dd8:	e011      	b.n	8005dfe <USB_HC_Halt+0x1f0>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8005dda:	68fb      	ldr	r3, [r7, #12]
 8005ddc:	015a      	lsls	r2, r3, #5
 8005dde:	693b      	ldr	r3, [r7, #16]
 8005de0:	4413      	add	r3, r2
 8005de2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005de6:	681b      	ldr	r3, [r3, #0]
 8005de8:	68fa      	ldr	r2, [r7, #12]
 8005dea:	0151      	lsls	r1, r2, #5
 8005dec:	693a      	ldr	r2, [r7, #16]
 8005dee:	440a      	add	r2, r1
 8005df0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005df4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005df8:	6013      	str	r3, [r2, #0]
 8005dfa:	e000      	b.n	8005dfe <USB_HC_Halt+0x1f0>
          break;
 8005dfc:	bf00      	nop
    }
  }

  return HAL_OK;
 8005dfe:	2300      	movs	r3, #0
}
 8005e00:	4618      	mov	r0, r3
 8005e02:	371c      	adds	r7, #28
 8005e04:	46bd      	mov	sp, r7
 8005e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e0a:	4770      	bx	lr

08005e0c <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 8005e0c:	b480      	push	{r7}
 8005e0e:	b087      	sub	sp, #28
 8005e10:	af00      	add	r7, sp, #0
 8005e12:	6078      	str	r0, [r7, #4]
 8005e14:	460b      	mov	r3, r1
 8005e16:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 8005e1c:	78fb      	ldrb	r3, [r7, #3]
 8005e1e:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 8005e20:	2301      	movs	r3, #1
 8005e22:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8005e24:	68fb      	ldr	r3, [r7, #12]
 8005e26:	04da      	lsls	r2, r3, #19
 8005e28:	4b15      	ldr	r3, [pc, #84]	; (8005e80 <USB_DoPing+0x74>)
 8005e2a:	4013      	ands	r3, r2
 8005e2c:	693a      	ldr	r2, [r7, #16]
 8005e2e:	0151      	lsls	r1, r2, #5
 8005e30:	697a      	ldr	r2, [r7, #20]
 8005e32:	440a      	add	r2, r1
 8005e34:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005e38:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005e3c:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 8005e3e:	693b      	ldr	r3, [r7, #16]
 8005e40:	015a      	lsls	r2, r3, #5
 8005e42:	697b      	ldr	r3, [r7, #20]
 8005e44:	4413      	add	r3, r2
 8005e46:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005e4a:	681b      	ldr	r3, [r3, #0]
 8005e4c:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8005e4e:	68bb      	ldr	r3, [r7, #8]
 8005e50:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8005e54:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8005e56:	68bb      	ldr	r3, [r7, #8]
 8005e58:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005e5c:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 8005e5e:	693b      	ldr	r3, [r7, #16]
 8005e60:	015a      	lsls	r2, r3, #5
 8005e62:	697b      	ldr	r3, [r7, #20]
 8005e64:	4413      	add	r3, r2
 8005e66:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005e6a:	461a      	mov	r2, r3
 8005e6c:	68bb      	ldr	r3, [r7, #8]
 8005e6e:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 8005e70:	2300      	movs	r3, #0
}
 8005e72:	4618      	mov	r0, r3
 8005e74:	371c      	adds	r7, #28
 8005e76:	46bd      	mov	sp, r7
 8005e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e7c:	4770      	bx	lr
 8005e7e:	bf00      	nop
 8005e80:	1ff80000 	.word	0x1ff80000

08005e84 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 8005e84:	b580      	push	{r7, lr}
 8005e86:	b086      	sub	sp, #24
 8005e88:	af00      	add	r7, sp, #0
 8005e8a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	60fb      	str	r3, [r7, #12]
  uint32_t count = 0U;
 8005e90:	2300      	movs	r3, #0
 8005e92:	617b      	str	r3, [r7, #20]
  uint32_t value;
  uint32_t i;


  (void)USB_DisableGlobalInt(USBx);
 8005e94:	6878      	ldr	r0, [r7, #4]
 8005e96:	f7ff f9e3 	bl	8005260 <USB_DisableGlobalInt>

  /* Flush FIFO */
  (void)USB_FlushTxFifo(USBx, 0x10U);
 8005e9a:	2110      	movs	r1, #16
 8005e9c:	6878      	ldr	r0, [r7, #4]
 8005e9e:	f7ff fa1b 	bl	80052d8 <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 8005ea2:	6878      	ldr	r0, [r7, #4]
 8005ea4:	f7ff fa3e 	bl	8005324 <USB_FlushRxFifo>

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 8005ea8:	2300      	movs	r3, #0
 8005eaa:	613b      	str	r3, [r7, #16]
 8005eac:	e01f      	b.n	8005eee <USB_StopHost+0x6a>
  {
    value = USBx_HC(i)->HCCHAR;
 8005eae:	693b      	ldr	r3, [r7, #16]
 8005eb0:	015a      	lsls	r2, r3, #5
 8005eb2:	68fb      	ldr	r3, [r7, #12]
 8005eb4:	4413      	add	r3, r2
 8005eb6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005eba:	681b      	ldr	r3, [r3, #0]
 8005ebc:	60bb      	str	r3, [r7, #8]
    value |=  USB_OTG_HCCHAR_CHDIS;
 8005ebe:	68bb      	ldr	r3, [r7, #8]
 8005ec0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005ec4:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_CHENA;
 8005ec6:	68bb      	ldr	r3, [r7, #8]
 8005ec8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005ecc:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8005ece:	68bb      	ldr	r3, [r7, #8]
 8005ed0:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8005ed4:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 8005ed6:	693b      	ldr	r3, [r7, #16]
 8005ed8:	015a      	lsls	r2, r3, #5
 8005eda:	68fb      	ldr	r3, [r7, #12]
 8005edc:	4413      	add	r3, r2
 8005ede:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005ee2:	461a      	mov	r2, r3
 8005ee4:	68bb      	ldr	r3, [r7, #8]
 8005ee6:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 8005ee8:	693b      	ldr	r3, [r7, #16]
 8005eea:	3301      	adds	r3, #1
 8005eec:	613b      	str	r3, [r7, #16]
 8005eee:	693b      	ldr	r3, [r7, #16]
 8005ef0:	2b0f      	cmp	r3, #15
 8005ef2:	d9dc      	bls.n	8005eae <USB_StopHost+0x2a>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 8005ef4:	2300      	movs	r3, #0
 8005ef6:	613b      	str	r3, [r7, #16]
 8005ef8:	e034      	b.n	8005f64 <USB_StopHost+0xe0>
  {
    value = USBx_HC(i)->HCCHAR;
 8005efa:	693b      	ldr	r3, [r7, #16]
 8005efc:	015a      	lsls	r2, r3, #5
 8005efe:	68fb      	ldr	r3, [r7, #12]
 8005f00:	4413      	add	r3, r2
 8005f02:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005f06:	681b      	ldr	r3, [r3, #0]
 8005f08:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHDIS;
 8005f0a:	68bb      	ldr	r3, [r7, #8]
 8005f0c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005f10:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHENA;
 8005f12:	68bb      	ldr	r3, [r7, #8]
 8005f14:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005f18:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8005f1a:	68bb      	ldr	r3, [r7, #8]
 8005f1c:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8005f20:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 8005f22:	693b      	ldr	r3, [r7, #16]
 8005f24:	015a      	lsls	r2, r3, #5
 8005f26:	68fb      	ldr	r3, [r7, #12]
 8005f28:	4413      	add	r3, r2
 8005f2a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005f2e:	461a      	mov	r2, r3
 8005f30:	68bb      	ldr	r3, [r7, #8]
 8005f32:	6013      	str	r3, [r2, #0]

    do
    {
      if (++count > 1000U)
 8005f34:	697b      	ldr	r3, [r7, #20]
 8005f36:	3301      	adds	r3, #1
 8005f38:	617b      	str	r3, [r7, #20]
 8005f3a:	697b      	ldr	r3, [r7, #20]
 8005f3c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005f40:	d80c      	bhi.n	8005f5c <USB_StopHost+0xd8>
      {
        break;
      }
    }
    while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8005f42:	693b      	ldr	r3, [r7, #16]
 8005f44:	015a      	lsls	r2, r3, #5
 8005f46:	68fb      	ldr	r3, [r7, #12]
 8005f48:	4413      	add	r3, r2
 8005f4a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005f4e:	681b      	ldr	r3, [r3, #0]
 8005f50:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005f54:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005f58:	d0ec      	beq.n	8005f34 <USB_StopHost+0xb0>
 8005f5a:	e000      	b.n	8005f5e <USB_StopHost+0xda>
        break;
 8005f5c:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 8005f5e:	693b      	ldr	r3, [r7, #16]
 8005f60:	3301      	adds	r3, #1
 8005f62:	613b      	str	r3, [r7, #16]
 8005f64:	693b      	ldr	r3, [r7, #16]
 8005f66:	2b0f      	cmp	r3, #15
 8005f68:	d9c7      	bls.n	8005efa <USB_StopHost+0x76>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = 0xFFFFFFFFU;
 8005f6a:	68fb      	ldr	r3, [r7, #12]
 8005f6c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005f70:	461a      	mov	r2, r3
 8005f72:	f04f 33ff 	mov.w	r3, #4294967295
 8005f76:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = 0xFFFFFFFFU;
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	f04f 32ff 	mov.w	r2, #4294967295
 8005f7e:	615a      	str	r2, [r3, #20]
  (void)USB_EnableGlobalInt(USBx);
 8005f80:	6878      	ldr	r0, [r7, #4]
 8005f82:	f7ff f95c 	bl	800523e <USB_EnableGlobalInt>

  return HAL_OK;
 8005f86:	2300      	movs	r3, #0
}
 8005f88:	4618      	mov	r0, r3
 8005f8a:	3718      	adds	r7, #24
 8005f8c:	46bd      	mov	sp, r7
 8005f8e:	bd80      	pop	{r7, pc}

08005f90 <USBH_CDC_InterfaceInit>:
  *         The function init the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceInit (USBH_HandleTypeDef *phost)
{
 8005f90:	b590      	push	{r4, r7, lr}
 8005f92:	b089      	sub	sp, #36	; 0x24
 8005f94:	af04      	add	r7, sp, #16
 8005f96:	6078      	str	r0, [r7, #4]

  USBH_StatusTypeDef status = USBH_FAIL ;
 8005f98:	2302      	movs	r3, #2
 8005f9a:	73fb      	strb	r3, [r7, #15]
  uint8_t interface;
  CDC_HandleTypeDef *CDC_Handle;

  interface = USBH_FindInterface(phost,
 8005f9c:	2301      	movs	r3, #1
 8005f9e:	2202      	movs	r2, #2
 8005fa0:	2102      	movs	r1, #2
 8005fa2:	6878      	ldr	r0, [r7, #4]
 8005fa4:	f000 fc3a 	bl	800681c <USBH_FindInterface>
 8005fa8:	4603      	mov	r3, r0
 8005faa:	73bb      	strb	r3, [r7, #14]
                                 COMMUNICATION_INTERFACE_CLASS_CODE,
                                 ABSTRACT_CONTROL_MODEL,
                                 COMMON_AT_COMMAND);

  if(interface == 0xFFU) /* No Valid Interface */
 8005fac:	7bbb      	ldrb	r3, [r7, #14]
 8005fae:	2bff      	cmp	r3, #255	; 0xff
 8005fb0:	f000 812a 	beq.w	8006208 <USBH_CDC_InterfaceInit+0x278>
  {
    USBH_DbgLog ("Cannot Find the interface for Communication Interface Class.", phost->pActiveClass->Name);
  }
  else
  {
    USBH_SelectInterface (phost, interface);
 8005fb4:	7bbb      	ldrb	r3, [r7, #14]
 8005fb6:	4619      	mov	r1, r3
 8005fb8:	6878      	ldr	r0, [r7, #4]
 8005fba:	f000 fc13 	bl	80067e4 <USBH_SelectInterface>
    phost->pActiveClass->pData = (CDC_HandleTypeDef *)USBH_malloc (sizeof(CDC_HandleTypeDef));
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	f8d3 4378 	ldr.w	r4, [r3, #888]	; 0x378
 8005fc4:	2050      	movs	r0, #80	; 0x50
 8005fc6:	f001 fb09 	bl	80075dc <malloc>
 8005fca:	4603      	mov	r3, r0
 8005fcc:	61e3      	str	r3, [r4, #28]
    CDC_Handle =  (CDC_HandleTypeDef*) phost->pActiveClass->pData;
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 8005fd4:	69db      	ldr	r3, [r3, #28]
 8005fd6:	60bb      	str	r3, [r7, #8]

    /*Collect the notification endpoint address and length*/
    if(phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U)
 8005fd8:	7bbb      	ldrb	r3, [r7, #14]
 8005fda:	687a      	ldr	r2, [r7, #4]
 8005fdc:	211a      	movs	r1, #26
 8005fde:	fb01 f303 	mul.w	r3, r1, r3
 8005fe2:	4413      	add	r3, r2
 8005fe4:	f203 334a 	addw	r3, r3, #842	; 0x34a
 8005fe8:	781b      	ldrb	r3, [r3, #0]
 8005fea:	b25b      	sxtb	r3, r3
 8005fec:	2b00      	cmp	r3, #0
 8005fee:	da15      	bge.n	800601c <USBH_CDC_InterfaceInit+0x8c>
    {
      CDC_Handle->CommItf.NotifEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8005ff0:	7bbb      	ldrb	r3, [r7, #14]
 8005ff2:	687a      	ldr	r2, [r7, #4]
 8005ff4:	211a      	movs	r1, #26
 8005ff6:	fb01 f303 	mul.w	r3, r1, r3
 8005ffa:	4413      	add	r3, r2
 8005ffc:	f203 334a 	addw	r3, r3, #842	; 0x34a
 8006000:	781a      	ldrb	r2, [r3, #0]
 8006002:	68bb      	ldr	r3, [r7, #8]
 8006004:	705a      	strb	r2, [r3, #1]
      CDC_Handle->CommItf.NotifEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8006006:	7bbb      	ldrb	r3, [r7, #14]
 8006008:	687a      	ldr	r2, [r7, #4]
 800600a:	211a      	movs	r1, #26
 800600c:	fb01 f303 	mul.w	r3, r1, r3
 8006010:	4413      	add	r3, r2
 8006012:	f503 7353 	add.w	r3, r3, #844	; 0x34c
 8006016:	881a      	ldrh	r2, [r3, #0]
 8006018:	68bb      	ldr	r3, [r7, #8]
 800601a:	815a      	strh	r2, [r3, #10]
    }

    /*Allocate the length for host channel number in*/
    CDC_Handle->CommItf.NotifPipe = USBH_AllocPipe(phost, CDC_Handle->CommItf.NotifEp);
 800601c:	68bb      	ldr	r3, [r7, #8]
 800601e:	785b      	ldrb	r3, [r3, #1]
 8006020:	4619      	mov	r1, r3
 8006022:	6878      	ldr	r0, [r7, #4]
 8006024:	f000 ff9f 	bl	8006f66 <USBH_AllocPipe>
 8006028:	4603      	mov	r3, r0
 800602a:	461a      	mov	r2, r3
 800602c:	68bb      	ldr	r3, [r7, #8]
 800602e:	701a      	strb	r2, [r3, #0]

    /* Open pipe for Notification endpoint */
    USBH_OpenPipe  (phost,
 8006030:	68bb      	ldr	r3, [r7, #8]
 8006032:	7819      	ldrb	r1, [r3, #0]
 8006034:	68bb      	ldr	r3, [r7, #8]
 8006036:	7858      	ldrb	r0, [r3, #1]
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8006044:	68ba      	ldr	r2, [r7, #8]
 8006046:	8952      	ldrh	r2, [r2, #10]
 8006048:	9202      	str	r2, [sp, #8]
 800604a:	2203      	movs	r2, #3
 800604c:	9201      	str	r2, [sp, #4]
 800604e:	9300      	str	r3, [sp, #0]
 8006050:	4623      	mov	r3, r4
 8006052:	4602      	mov	r2, r0
 8006054:	6878      	ldr	r0, [r7, #4]
 8006056:	f000 ff57 	bl	8006f08 <USBH_OpenPipe>
                    phost->device.address,
                    phost->device.speed,
                    USB_EP_TYPE_INTR,
                    CDC_Handle->CommItf.NotifEpSize);

    USBH_LL_SetToggle (phost, CDC_Handle->CommItf.NotifPipe, 0U);
 800605a:	68bb      	ldr	r3, [r7, #8]
 800605c:	781b      	ldrb	r3, [r3, #0]
 800605e:	2200      	movs	r2, #0
 8006060:	4619      	mov	r1, r3
 8006062:	6878      	ldr	r0, [r7, #4]
 8006064:	f001 fa14 	bl	8007490 <USBH_LL_SetToggle>

    interface = USBH_FindInterface(phost,
 8006068:	2300      	movs	r3, #0
 800606a:	2200      	movs	r2, #0
 800606c:	210a      	movs	r1, #10
 800606e:	6878      	ldr	r0, [r7, #4]
 8006070:	f000 fbd4 	bl	800681c <USBH_FindInterface>
 8006074:	4603      	mov	r3, r0
 8006076:	73bb      	strb	r3, [r7, #14]
                                   DATA_INTERFACE_CLASS_CODE,
                                   RESERVED,
                                   NO_CLASS_SPECIFIC_PROTOCOL_CODE);

    if(interface == 0xFFU) /* No Valid Interface */
 8006078:	7bbb      	ldrb	r3, [r7, #14]
 800607a:	2bff      	cmp	r3, #255	; 0xff
 800607c:	f000 80c4 	beq.w	8006208 <USBH_CDC_InterfaceInit+0x278>
      USBH_DbgLog ("Cannot Find the interface for Data Interface Class.", phost->pActiveClass->Name);
    }
    else
    {
      /*Collect the class specific endpoint address and length*/
      if(phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U)
 8006080:	7bbb      	ldrb	r3, [r7, #14]
 8006082:	687a      	ldr	r2, [r7, #4]
 8006084:	211a      	movs	r1, #26
 8006086:	fb01 f303 	mul.w	r3, r1, r3
 800608a:	4413      	add	r3, r2
 800608c:	f203 334a 	addw	r3, r3, #842	; 0x34a
 8006090:	781b      	ldrb	r3, [r3, #0]
 8006092:	b25b      	sxtb	r3, r3
 8006094:	2b00      	cmp	r3, #0
 8006096:	da16      	bge.n	80060c6 <USBH_CDC_InterfaceInit+0x136>
      {
        CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8006098:	7bbb      	ldrb	r3, [r7, #14]
 800609a:	687a      	ldr	r2, [r7, #4]
 800609c:	211a      	movs	r1, #26
 800609e:	fb01 f303 	mul.w	r3, r1, r3
 80060a2:	4413      	add	r3, r2
 80060a4:	f203 334a 	addw	r3, r3, #842	; 0x34a
 80060a8:	781a      	ldrb	r2, [r3, #0]
 80060aa:	68bb      	ldr	r3, [r7, #8]
 80060ac:	73da      	strb	r2, [r3, #15]
        CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 80060ae:	7bbb      	ldrb	r3, [r7, #14]
 80060b0:	687a      	ldr	r2, [r7, #4]
 80060b2:	211a      	movs	r1, #26
 80060b4:	fb01 f303 	mul.w	r3, r1, r3
 80060b8:	4413      	add	r3, r2
 80060ba:	f503 7353 	add.w	r3, r3, #844	; 0x34c
 80060be:	881a      	ldrh	r2, [r3, #0]
 80060c0:	68bb      	ldr	r3, [r7, #8]
 80060c2:	835a      	strh	r2, [r3, #26]
 80060c4:	e015      	b.n	80060f2 <USBH_CDC_InterfaceInit+0x162>
      }
      else
      {
        CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 80060c6:	7bbb      	ldrb	r3, [r7, #14]
 80060c8:	687a      	ldr	r2, [r7, #4]
 80060ca:	211a      	movs	r1, #26
 80060cc:	fb01 f303 	mul.w	r3, r1, r3
 80060d0:	4413      	add	r3, r2
 80060d2:	f203 334a 	addw	r3, r3, #842	; 0x34a
 80060d6:	781a      	ldrb	r2, [r3, #0]
 80060d8:	68bb      	ldr	r3, [r7, #8]
 80060da:	739a      	strb	r2, [r3, #14]
        CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 80060dc:	7bbb      	ldrb	r3, [r7, #14]
 80060de:	687a      	ldr	r2, [r7, #4]
 80060e0:	211a      	movs	r1, #26
 80060e2:	fb01 f303 	mul.w	r3, r1, r3
 80060e6:	4413      	add	r3, r2
 80060e8:	f503 7353 	add.w	r3, r3, #844	; 0x34c
 80060ec:	881a      	ldrh	r2, [r3, #0]
 80060ee:	68bb      	ldr	r3, [r7, #8]
 80060f0:	831a      	strh	r2, [r3, #24]
      }

      if(phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U)
 80060f2:	7bbb      	ldrb	r3, [r7, #14]
 80060f4:	687a      	ldr	r2, [r7, #4]
 80060f6:	211a      	movs	r1, #26
 80060f8:	fb01 f303 	mul.w	r3, r1, r3
 80060fc:	4413      	add	r3, r2
 80060fe:	f203 3352 	addw	r3, r3, #850	; 0x352
 8006102:	781b      	ldrb	r3, [r3, #0]
 8006104:	b25b      	sxtb	r3, r3
 8006106:	2b00      	cmp	r3, #0
 8006108:	da16      	bge.n	8006138 <USBH_CDC_InterfaceInit+0x1a8>
      {
        CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 800610a:	7bbb      	ldrb	r3, [r7, #14]
 800610c:	687a      	ldr	r2, [r7, #4]
 800610e:	211a      	movs	r1, #26
 8006110:	fb01 f303 	mul.w	r3, r1, r3
 8006114:	4413      	add	r3, r2
 8006116:	f203 3352 	addw	r3, r3, #850	; 0x352
 800611a:	781a      	ldrb	r2, [r3, #0]
 800611c:	68bb      	ldr	r3, [r7, #8]
 800611e:	73da      	strb	r2, [r3, #15]
        CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8006120:	7bbb      	ldrb	r3, [r7, #14]
 8006122:	687a      	ldr	r2, [r7, #4]
 8006124:	211a      	movs	r1, #26
 8006126:	fb01 f303 	mul.w	r3, r1, r3
 800612a:	4413      	add	r3, r2
 800612c:	f503 7355 	add.w	r3, r3, #852	; 0x354
 8006130:	881a      	ldrh	r2, [r3, #0]
 8006132:	68bb      	ldr	r3, [r7, #8]
 8006134:	835a      	strh	r2, [r3, #26]
 8006136:	e015      	b.n	8006164 <USBH_CDC_InterfaceInit+0x1d4>
      }
      else
      {
        CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 8006138:	7bbb      	ldrb	r3, [r7, #14]
 800613a:	687a      	ldr	r2, [r7, #4]
 800613c:	211a      	movs	r1, #26
 800613e:	fb01 f303 	mul.w	r3, r1, r3
 8006142:	4413      	add	r3, r2
 8006144:	f203 3352 	addw	r3, r3, #850	; 0x352
 8006148:	781a      	ldrb	r2, [r3, #0]
 800614a:	68bb      	ldr	r3, [r7, #8]
 800614c:	739a      	strb	r2, [r3, #14]
        CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 800614e:	7bbb      	ldrb	r3, [r7, #14]
 8006150:	687a      	ldr	r2, [r7, #4]
 8006152:	211a      	movs	r1, #26
 8006154:	fb01 f303 	mul.w	r3, r1, r3
 8006158:	4413      	add	r3, r2
 800615a:	f503 7355 	add.w	r3, r3, #852	; 0x354
 800615e:	881a      	ldrh	r2, [r3, #0]
 8006160:	68bb      	ldr	r3, [r7, #8]
 8006162:	831a      	strh	r2, [r3, #24]
      }

      /*Allocate the length for host channel number out*/
      CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 8006164:	68bb      	ldr	r3, [r7, #8]
 8006166:	7b9b      	ldrb	r3, [r3, #14]
 8006168:	4619      	mov	r1, r3
 800616a:	6878      	ldr	r0, [r7, #4]
 800616c:	f000 fefb 	bl	8006f66 <USBH_AllocPipe>
 8006170:	4603      	mov	r3, r0
 8006172:	461a      	mov	r2, r3
 8006174:	68bb      	ldr	r3, [r7, #8]
 8006176:	735a      	strb	r2, [r3, #13]

      /*Allocate the length for host channel number in*/
      CDC_Handle->DataItf.InPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.InEp);
 8006178:	68bb      	ldr	r3, [r7, #8]
 800617a:	7bdb      	ldrb	r3, [r3, #15]
 800617c:	4619      	mov	r1, r3
 800617e:	6878      	ldr	r0, [r7, #4]
 8006180:	f000 fef1 	bl	8006f66 <USBH_AllocPipe>
 8006184:	4603      	mov	r3, r0
 8006186:	461a      	mov	r2, r3
 8006188:	68bb      	ldr	r3, [r7, #8]
 800618a:	731a      	strb	r2, [r3, #12]

      /* Open channel for OUT endpoint */
      USBH_OpenPipe  (phost,
 800618c:	68bb      	ldr	r3, [r7, #8]
 800618e:	7b59      	ldrb	r1, [r3, #13]
 8006190:	68bb      	ldr	r3, [r7, #8]
 8006192:	7b98      	ldrb	r0, [r3, #14]
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 80061a0:	68ba      	ldr	r2, [r7, #8]
 80061a2:	8b12      	ldrh	r2, [r2, #24]
 80061a4:	9202      	str	r2, [sp, #8]
 80061a6:	2202      	movs	r2, #2
 80061a8:	9201      	str	r2, [sp, #4]
 80061aa:	9300      	str	r3, [sp, #0]
 80061ac:	4623      	mov	r3, r4
 80061ae:	4602      	mov	r2, r0
 80061b0:	6878      	ldr	r0, [r7, #4]
 80061b2:	f000 fea9 	bl	8006f08 <USBH_OpenPipe>
                      phost->device.address,
                      phost->device.speed,
                      USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.OutEpSize);
      /* Open channel for IN endpoint */
      USBH_OpenPipe  (phost,
 80061b6:	68bb      	ldr	r3, [r7, #8]
 80061b8:	7b19      	ldrb	r1, [r3, #12]
 80061ba:	68bb      	ldr	r3, [r7, #8]
 80061bc:	7bd8      	ldrb	r0, [r3, #15]
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 80061ca:	68ba      	ldr	r2, [r7, #8]
 80061cc:	8b52      	ldrh	r2, [r2, #26]
 80061ce:	9202      	str	r2, [sp, #8]
 80061d0:	2202      	movs	r2, #2
 80061d2:	9201      	str	r2, [sp, #4]
 80061d4:	9300      	str	r3, [sp, #0]
 80061d6:	4623      	mov	r3, r4
 80061d8:	4602      	mov	r2, r0
 80061da:	6878      	ldr	r0, [r7, #4]
 80061dc:	f000 fe94 	bl	8006f08 <USBH_OpenPipe>
                      phost->device.address,
                      phost->device.speed,
                      USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.InEpSize);

      CDC_Handle->state = CDC_IDLE_STATE;
 80061e0:	68bb      	ldr	r3, [r7, #8]
 80061e2:	2200      	movs	r2, #0
 80061e4:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

      USBH_LL_SetToggle (phost, CDC_Handle->DataItf.OutPipe, 0U);
 80061e8:	68bb      	ldr	r3, [r7, #8]
 80061ea:	7b5b      	ldrb	r3, [r3, #13]
 80061ec:	2200      	movs	r2, #0
 80061ee:	4619      	mov	r1, r3
 80061f0:	6878      	ldr	r0, [r7, #4]
 80061f2:	f001 f94d 	bl	8007490 <USBH_LL_SetToggle>
      USBH_LL_SetToggle (phost, CDC_Handle->DataItf.InPipe, 0U);
 80061f6:	68bb      	ldr	r3, [r7, #8]
 80061f8:	7b1b      	ldrb	r3, [r3, #12]
 80061fa:	2200      	movs	r2, #0
 80061fc:	4619      	mov	r1, r3
 80061fe:	6878      	ldr	r0, [r7, #4]
 8006200:	f001 f946 	bl	8007490 <USBH_LL_SetToggle>
      status = USBH_OK;
 8006204:	2300      	movs	r3, #0
 8006206:	73fb      	strb	r3, [r7, #15]
    }
  }
  return status;
 8006208:	7bfb      	ldrb	r3, [r7, #15]
}
 800620a:	4618      	mov	r0, r3
 800620c:	3714      	adds	r7, #20
 800620e:	46bd      	mov	sp, r7
 8006210:	bd90      	pop	{r4, r7, pc}

08006212 <USBH_CDC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceDeInit (USBH_HandleTypeDef *phost)
{
 8006212:	b580      	push	{r7, lr}
 8006214:	b084      	sub	sp, #16
 8006216:	af00      	add	r7, sp, #0
 8006218:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle =  (CDC_HandleTypeDef*) phost->pActiveClass->pData;
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 8006220:	69db      	ldr	r3, [r3, #28]
 8006222:	60fb      	str	r3, [r7, #12]

  if ( CDC_Handle->CommItf.NotifPipe)
 8006224:	68fb      	ldr	r3, [r7, #12]
 8006226:	781b      	ldrb	r3, [r3, #0]
 8006228:	2b00      	cmp	r3, #0
 800622a:	d00e      	beq.n	800624a <USBH_CDC_InterfaceDeInit+0x38>
  {
    USBH_ClosePipe(phost, CDC_Handle->CommItf.NotifPipe);
 800622c:	68fb      	ldr	r3, [r7, #12]
 800622e:	781b      	ldrb	r3, [r3, #0]
 8006230:	4619      	mov	r1, r3
 8006232:	6878      	ldr	r0, [r7, #4]
 8006234:	f000 fe87 	bl	8006f46 <USBH_ClosePipe>
    USBH_FreePipe  (phost, CDC_Handle->CommItf.NotifPipe);
 8006238:	68fb      	ldr	r3, [r7, #12]
 800623a:	781b      	ldrb	r3, [r3, #0]
 800623c:	4619      	mov	r1, r3
 800623e:	6878      	ldr	r0, [r7, #4]
 8006240:	f000 feaf 	bl	8006fa2 <USBH_FreePipe>
    CDC_Handle->CommItf.NotifPipe = 0U;     /* Reset the Channel as Free */
 8006244:	68fb      	ldr	r3, [r7, #12]
 8006246:	2200      	movs	r2, #0
 8006248:	701a      	strb	r2, [r3, #0]
  }

  if ( CDC_Handle->DataItf.InPipe)
 800624a:	68fb      	ldr	r3, [r7, #12]
 800624c:	7b1b      	ldrb	r3, [r3, #12]
 800624e:	2b00      	cmp	r3, #0
 8006250:	d00e      	beq.n	8006270 <USBH_CDC_InterfaceDeInit+0x5e>
  {
    USBH_ClosePipe(phost, CDC_Handle->DataItf.InPipe);
 8006252:	68fb      	ldr	r3, [r7, #12]
 8006254:	7b1b      	ldrb	r3, [r3, #12]
 8006256:	4619      	mov	r1, r3
 8006258:	6878      	ldr	r0, [r7, #4]
 800625a:	f000 fe74 	bl	8006f46 <USBH_ClosePipe>
    USBH_FreePipe  (phost, CDC_Handle->DataItf.InPipe);
 800625e:	68fb      	ldr	r3, [r7, #12]
 8006260:	7b1b      	ldrb	r3, [r3, #12]
 8006262:	4619      	mov	r1, r3
 8006264:	6878      	ldr	r0, [r7, #4]
 8006266:	f000 fe9c 	bl	8006fa2 <USBH_FreePipe>
    CDC_Handle->DataItf.InPipe = 0U;     /* Reset the Channel as Free */
 800626a:	68fb      	ldr	r3, [r7, #12]
 800626c:	2200      	movs	r2, #0
 800626e:	731a      	strb	r2, [r3, #12]
  }

  if ( CDC_Handle->DataItf.OutPipe)
 8006270:	68fb      	ldr	r3, [r7, #12]
 8006272:	7b5b      	ldrb	r3, [r3, #13]
 8006274:	2b00      	cmp	r3, #0
 8006276:	d00e      	beq.n	8006296 <USBH_CDC_InterfaceDeInit+0x84>
  {
    USBH_ClosePipe(phost, CDC_Handle->DataItf.OutPipe);
 8006278:	68fb      	ldr	r3, [r7, #12]
 800627a:	7b5b      	ldrb	r3, [r3, #13]
 800627c:	4619      	mov	r1, r3
 800627e:	6878      	ldr	r0, [r7, #4]
 8006280:	f000 fe61 	bl	8006f46 <USBH_ClosePipe>
    USBH_FreePipe  (phost, CDC_Handle->DataItf.OutPipe);
 8006284:	68fb      	ldr	r3, [r7, #12]
 8006286:	7b5b      	ldrb	r3, [r3, #13]
 8006288:	4619      	mov	r1, r3
 800628a:	6878      	ldr	r0, [r7, #4]
 800628c:	f000 fe89 	bl	8006fa2 <USBH_FreePipe>
    CDC_Handle->DataItf.OutPipe = 0U;    /* Reset the Channel as Free */
 8006290:	68fb      	ldr	r3, [r7, #12]
 8006292:	2200      	movs	r2, #0
 8006294:	735a      	strb	r2, [r3, #13]
  }

  if(phost->pActiveClass->pData)
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 800629c:	69db      	ldr	r3, [r3, #28]
 800629e:	2b00      	cmp	r3, #0
 80062a0:	d00b      	beq.n	80062ba <USBH_CDC_InterfaceDeInit+0xa8>
  {
    USBH_free (phost->pActiveClass->pData);
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 80062a8:	69db      	ldr	r3, [r3, #28]
 80062aa:	4618      	mov	r0, r3
 80062ac:	f001 f99e 	bl	80075ec <free>
    phost->pActiveClass->pData = 0U;
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 80062b6:	2200      	movs	r2, #0
 80062b8:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 80062ba:	2300      	movs	r3, #0
}
 80062bc:	4618      	mov	r0, r3
 80062be:	3710      	adds	r7, #16
 80062c0:	46bd      	mov	sp, r7
 80062c2:	bd80      	pop	{r7, pc}

080062c4 <USBH_CDC_ClassRequest>:
  *         for CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_ClassRequest (USBH_HandleTypeDef *phost)
{
 80062c4:	b580      	push	{r7, lr}
 80062c6:	b084      	sub	sp, #16
 80062c8:	af00      	add	r7, sp, #0
 80062ca:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_FAIL ;
 80062cc:	2302      	movs	r3, #2
 80062ce:	73fb      	strb	r3, [r7, #15]
  CDC_HandleTypeDef *CDC_Handle =  (CDC_HandleTypeDef*) phost->pActiveClass->pData;
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 80062d6:	69db      	ldr	r3, [r3, #28]
 80062d8:	60bb      	str	r3, [r7, #8]

  /*Issue the get line coding request*/
  status =   GetLineCoding(phost, &CDC_Handle->LineCoding);
 80062da:	68bb      	ldr	r3, [r7, #8]
 80062dc:	3340      	adds	r3, #64	; 0x40
 80062de:	4619      	mov	r1, r3
 80062e0:	6878      	ldr	r0, [r7, #4]
 80062e2:	f000 f8b2 	bl	800644a <GetLineCoding>
 80062e6:	4603      	mov	r3, r0
 80062e8:	73fb      	strb	r3, [r7, #15]
  if(status == USBH_OK)
 80062ea:	7bfb      	ldrb	r3, [r7, #15]
 80062ec:	2b00      	cmp	r3, #0
 80062ee:	d105      	bne.n	80062fc <USBH_CDC_ClassRequest+0x38>
  {
    phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 80062f6:	2102      	movs	r1, #2
 80062f8:	6878      	ldr	r0, [r7, #4]
 80062fa:	4798      	blx	r3
  }
  return status;
 80062fc:	7bfb      	ldrb	r3, [r7, #15]
}
 80062fe:	4618      	mov	r0, r3
 8006300:	3710      	adds	r7, #16
 8006302:	46bd      	mov	sp, r7
 8006304:	bd80      	pop	{r7, pc}
	...

08006308 <USBH_CDC_Process>:
  *         The function is for managing state machine for CDC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_Process (USBH_HandleTypeDef *phost)
{
 8006308:	b580      	push	{r7, lr}
 800630a:	b084      	sub	sp, #16
 800630c:	af00      	add	r7, sp, #0
 800630e:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_BUSY;
 8006310:	2301      	movs	r3, #1
 8006312:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef req_status = USBH_OK;
 8006314:	2300      	movs	r3, #0
 8006316:	73bb      	strb	r3, [r7, #14]
  CDC_HandleTypeDef *CDC_Handle =  (CDC_HandleTypeDef*) phost->pActiveClass->pData;
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 800631e:	69db      	ldr	r3, [r3, #28]
 8006320:	60bb      	str	r3, [r7, #8]

  switch(CDC_Handle->state)
 8006322:	68bb      	ldr	r3, [r7, #8]
 8006324:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 8006328:	2b04      	cmp	r3, #4
 800632a:	d877      	bhi.n	800641c <USBH_CDC_Process+0x114>
 800632c:	a201      	add	r2, pc, #4	; (adr r2, 8006334 <USBH_CDC_Process+0x2c>)
 800632e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006332:	bf00      	nop
 8006334:	08006349 	.word	0x08006349
 8006338:	0800634f 	.word	0x0800634f
 800633c:	0800637f 	.word	0x0800637f
 8006340:	080063f3 	.word	0x080063f3
 8006344:	08006401 	.word	0x08006401
  {

  case CDC_IDLE_STATE:
    status = USBH_OK;
 8006348:	2300      	movs	r3, #0
 800634a:	73fb      	strb	r3, [r7, #15]
    break;
 800634c:	e06d      	b.n	800642a <USBH_CDC_Process+0x122>

  case CDC_SET_LINE_CODING_STATE:
    req_status = SetLineCoding(phost, CDC_Handle->pUserLineCoding);
 800634e:	68bb      	ldr	r3, [r7, #8]
 8006350:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006352:	4619      	mov	r1, r3
 8006354:	6878      	ldr	r0, [r7, #4]
 8006356:	f000 f897 	bl	8006488 <SetLineCoding>
 800635a:	4603      	mov	r3, r0
 800635c:	73bb      	strb	r3, [r7, #14]

    if(req_status == USBH_OK)
 800635e:	7bbb      	ldrb	r3, [r7, #14]
 8006360:	2b00      	cmp	r3, #0
 8006362:	d104      	bne.n	800636e <USBH_CDC_Process+0x66>
    {
      CDC_Handle->state = CDC_GET_LAST_LINE_CODING_STATE;
 8006364:	68bb      	ldr	r3, [r7, #8]
 8006366:	2202      	movs	r2, #2
 8006368:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      if(req_status != USBH_BUSY)
      {
        CDC_Handle->state = CDC_ERROR_STATE;
      }
    }
    break;
 800636c:	e058      	b.n	8006420 <USBH_CDC_Process+0x118>
      if(req_status != USBH_BUSY)
 800636e:	7bbb      	ldrb	r3, [r7, #14]
 8006370:	2b01      	cmp	r3, #1
 8006372:	d055      	beq.n	8006420 <USBH_CDC_Process+0x118>
        CDC_Handle->state = CDC_ERROR_STATE;
 8006374:	68bb      	ldr	r3, [r7, #8]
 8006376:	2204      	movs	r2, #4
 8006378:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
    break;
 800637c:	e050      	b.n	8006420 <USBH_CDC_Process+0x118>


  case CDC_GET_LAST_LINE_CODING_STATE:
    req_status = GetLineCoding(phost, &(CDC_Handle->LineCoding));
 800637e:	68bb      	ldr	r3, [r7, #8]
 8006380:	3340      	adds	r3, #64	; 0x40
 8006382:	4619      	mov	r1, r3
 8006384:	6878      	ldr	r0, [r7, #4]
 8006386:	f000 f860 	bl	800644a <GetLineCoding>
 800638a:	4603      	mov	r3, r0
 800638c:	73bb      	strb	r3, [r7, #14]

    if(req_status == USBH_OK)
 800638e:	7bbb      	ldrb	r3, [r7, #14]
 8006390:	2b00      	cmp	r3, #0
 8006392:	d126      	bne.n	80063e2 <USBH_CDC_Process+0xda>
    {
      CDC_Handle->state = CDC_IDLE_STATE;
 8006394:	68bb      	ldr	r3, [r7, #8]
 8006396:	2200      	movs	r2, #0
 8006398:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

      if((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 800639c:	68bb      	ldr	r3, [r7, #8]
 800639e:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 80063a2:	68bb      	ldr	r3, [r7, #8]
 80063a4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80063a6:	791b      	ldrb	r3, [r3, #4]
 80063a8:	429a      	cmp	r2, r3
 80063aa:	d13b      	bne.n	8006424 <USBH_CDC_Process+0x11c>
         (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 80063ac:	68bb      	ldr	r3, [r7, #8]
 80063ae:	f893 2046 	ldrb.w	r2, [r3, #70]	; 0x46
 80063b2:	68bb      	ldr	r3, [r7, #8]
 80063b4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80063b6:	799b      	ldrb	r3, [r3, #6]
      if((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 80063b8:	429a      	cmp	r2, r3
 80063ba:	d133      	bne.n	8006424 <USBH_CDC_Process+0x11c>
         (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 80063bc:	68bb      	ldr	r3, [r7, #8]
 80063be:	f893 2045 	ldrb.w	r2, [r3, #69]	; 0x45
 80063c2:	68bb      	ldr	r3, [r7, #8]
 80063c4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80063c6:	795b      	ldrb	r3, [r3, #5]
         (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 80063c8:	429a      	cmp	r2, r3
 80063ca:	d12b      	bne.n	8006424 <USBH_CDC_Process+0x11c>
         (CDC_Handle->LineCoding.b.dwDTERate == CDC_Handle->pUserLineCoding->b.dwDTERate))
 80063cc:	68bb      	ldr	r3, [r7, #8]
 80063ce:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80063d0:	68bb      	ldr	r3, [r7, #8]
 80063d2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80063d4:	681b      	ldr	r3, [r3, #0]
         (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 80063d6:	429a      	cmp	r2, r3
 80063d8:	d124      	bne.n	8006424 <USBH_CDC_Process+0x11c>
      {
        USBH_CDC_LineCodingChanged(phost);
 80063da:	6878      	ldr	r0, [r7, #4]
 80063dc:	f000 f95a 	bl	8006694 <USBH_CDC_LineCodingChanged>
      if(req_status != USBH_BUSY)
      {
        CDC_Handle->state = CDC_ERROR_STATE;
      }
    }
    break;
 80063e0:	e020      	b.n	8006424 <USBH_CDC_Process+0x11c>
      if(req_status != USBH_BUSY)
 80063e2:	7bbb      	ldrb	r3, [r7, #14]
 80063e4:	2b01      	cmp	r3, #1
 80063e6:	d01d      	beq.n	8006424 <USBH_CDC_Process+0x11c>
        CDC_Handle->state = CDC_ERROR_STATE;
 80063e8:	68bb      	ldr	r3, [r7, #8]
 80063ea:	2204      	movs	r2, #4
 80063ec:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
    break;
 80063f0:	e018      	b.n	8006424 <USBH_CDC_Process+0x11c>

  case CDC_TRANSFER_DATA:
    CDC_ProcessTransmission(phost);
 80063f2:	6878      	ldr	r0, [r7, #4]
 80063f4:	f000 f867 	bl	80064c6 <CDC_ProcessTransmission>
    CDC_ProcessReception(phost);
 80063f8:	6878      	ldr	r0, [r7, #4]
 80063fa:	f000 f8dc 	bl	80065b6 <CDC_ProcessReception>
    break;
 80063fe:	e014      	b.n	800642a <USBH_CDC_Process+0x122>

  case CDC_ERROR_STATE:
    req_status = USBH_ClrFeature(phost, 0x00U);
 8006400:	2100      	movs	r1, #0
 8006402:	6878      	ldr	r0, [r7, #4]
 8006404:	f000 fb08 	bl	8006a18 <USBH_ClrFeature>
 8006408:	4603      	mov	r3, r0
 800640a:	73bb      	strb	r3, [r7, #14]

    if(req_status == USBH_OK )
 800640c:	7bbb      	ldrb	r3, [r7, #14]
 800640e:	2b00      	cmp	r3, #0
 8006410:	d10a      	bne.n	8006428 <USBH_CDC_Process+0x120>
    {
      /*Change the state to waiting*/
      CDC_Handle->state = CDC_IDLE_STATE ;
 8006412:	68bb      	ldr	r3, [r7, #8]
 8006414:	2200      	movs	r2, #0
 8006416:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
    }
    break;
 800641a:	e005      	b.n	8006428 <USBH_CDC_Process+0x120>

  default:
    break;
 800641c:	bf00      	nop
 800641e:	e004      	b.n	800642a <USBH_CDC_Process+0x122>
    break;
 8006420:	bf00      	nop
 8006422:	e002      	b.n	800642a <USBH_CDC_Process+0x122>
    break;
 8006424:	bf00      	nop
 8006426:	e000      	b.n	800642a <USBH_CDC_Process+0x122>
    break;
 8006428:	bf00      	nop

  }

  return status;
 800642a:	7bfb      	ldrb	r3, [r7, #15]
}
 800642c:	4618      	mov	r0, r3
 800642e:	3710      	adds	r7, #16
 8006430:	46bd      	mov	sp, r7
 8006432:	bd80      	pop	{r7, pc}

08006434 <USBH_CDC_SOFProcess>:
  *         The function is for managing SOF callback
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_SOFProcess (USBH_HandleTypeDef *phost)
{
 8006434:	b480      	push	{r7}
 8006436:	b083      	sub	sp, #12
 8006438:	af00      	add	r7, sp, #0
 800643a:	6078      	str	r0, [r7, #4]
  return USBH_OK;
 800643c:	2300      	movs	r3, #0
}
 800643e:	4618      	mov	r0, r3
 8006440:	370c      	adds	r7, #12
 8006442:	46bd      	mov	sp, r7
 8006444:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006448:	4770      	bx	lr

0800644a <GetLineCoding>:
  *         configured line coding.
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef GetLineCoding(USBH_HandleTypeDef *phost, CDC_LineCodingTypeDef *linecoding)
{
 800644a:	b580      	push	{r7, lr}
 800644c:	b082      	sub	sp, #8
 800644e:	af00      	add	r7, sp, #0
 8006450:	6078      	str	r0, [r7, #4]
 8006452:	6039      	str	r1, [r7, #0]

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS | \
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	22a1      	movs	r2, #161	; 0xa1
 8006458:	741a      	strb	r2, [r3, #16]
                              USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_GET_LINE_CODING;
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	2221      	movs	r2, #33	; 0x21
 800645e:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	2200      	movs	r2, #0
 8006464:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	2200      	movs	r2, #0
 800646a:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	2207      	movs	r2, #7
 8006470:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 8006472:	683b      	ldr	r3, [r7, #0]
 8006474:	2207      	movs	r2, #7
 8006476:	4619      	mov	r1, r3
 8006478:	6878      	ldr	r0, [r7, #4]
 800647a:	f000 faf1 	bl	8006a60 <USBH_CtlReq>
 800647e:	4603      	mov	r3, r0
}
 8006480:	4618      	mov	r0, r3
 8006482:	3708      	adds	r7, #8
 8006484:	46bd      	mov	sp, r7
 8006486:	bd80      	pop	{r7, pc}

08006488 <SetLineCoding>:
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef SetLineCoding(USBH_HandleTypeDef *phost,
                                        CDC_LineCodingTypeDef *linecoding)
{
 8006488:	b580      	push	{r7, lr}
 800648a:	b082      	sub	sp, #8
 800648c:	af00      	add	r7, sp, #0
 800648e:	6078      	str	r0, [r7, #4]
 8006490:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS |
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	2221      	movs	r2, #33	; 0x21
 8006496:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_SET_LINE_CODING;
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	2220      	movs	r2, #32
 800649c:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	2200      	movs	r2, #0
 80064a2:	825a      	strh	r2, [r3, #18]

  phost->Control.setup.b.wIndex.w = 0U;
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	2200      	movs	r2, #0
 80064a8:	829a      	strh	r2, [r3, #20]

  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	2207      	movs	r2, #7
 80064ae:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 80064b0:	683b      	ldr	r3, [r7, #0]
 80064b2:	2207      	movs	r2, #7
 80064b4:	4619      	mov	r1, r3
 80064b6:	6878      	ldr	r0, [r7, #4]
 80064b8:	f000 fad2 	bl	8006a60 <USBH_CtlReq>
 80064bc:	4603      	mov	r3, r0
}
 80064be:	4618      	mov	r0, r3
 80064c0:	3708      	adds	r7, #8
 80064c2:	46bd      	mov	sp, r7
 80064c4:	bd80      	pop	{r7, pc}

080064c6 <CDC_ProcessTransmission>:
* @brief  The function is responsible for sending data to the device
*  @param  pdev: Selected device
* @retval None
*/
static void CDC_ProcessTransmission(USBH_HandleTypeDef *phost)
{
 80064c6:	b580      	push	{r7, lr}
 80064c8:	b086      	sub	sp, #24
 80064ca:	af02      	add	r7, sp, #8
 80064cc:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef*) phost->pActiveClass->pData;
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 80064d4:	69db      	ldr	r3, [r3, #28]
 80064d6:	60fb      	str	r3, [r7, #12]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 80064d8:	2300      	movs	r3, #0
 80064da:	72fb      	strb	r3, [r7, #11]

  switch (CDC_Handle->data_tx_state)
 80064dc:	68fb      	ldr	r3, [r7, #12]
 80064de:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 80064e2:	2b01      	cmp	r3, #1
 80064e4:	d002      	beq.n	80064ec <CDC_ProcessTransmission+0x26>
 80064e6:	2b02      	cmp	r3, #2
 80064e8:	d025      	beq.n	8006536 <CDC_ProcessTransmission+0x70>
      }
    }
    break;

  default:
    break;
 80064ea:	e060      	b.n	80065ae <CDC_ProcessTransmission+0xe8>
    if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 80064ec:	68fb      	ldr	r3, [r7, #12]
 80064ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80064f0:	68fa      	ldr	r2, [r7, #12]
 80064f2:	8b12      	ldrh	r2, [r2, #24]
 80064f4:	4293      	cmp	r3, r2
 80064f6:	d90c      	bls.n	8006512 <CDC_ProcessTransmission+0x4c>
      USBH_BulkSendData (phost,
 80064f8:	68fb      	ldr	r3, [r7, #12]
 80064fa:	69d9      	ldr	r1, [r3, #28]
 80064fc:	68fb      	ldr	r3, [r7, #12]
 80064fe:	8b1a      	ldrh	r2, [r3, #24]
 8006500:	68fb      	ldr	r3, [r7, #12]
 8006502:	7b58      	ldrb	r0, [r3, #13]
 8006504:	2301      	movs	r3, #1
 8006506:	9300      	str	r3, [sp, #0]
 8006508:	4603      	mov	r3, r0
 800650a:	6878      	ldr	r0, [r7, #4]
 800650c:	f000 fcb9 	bl	8006e82 <USBH_BulkSendData>
 8006510:	e00c      	b.n	800652c <CDC_ProcessTransmission+0x66>
      USBH_BulkSendData (phost,
 8006512:	68fb      	ldr	r3, [r7, #12]
 8006514:	69d9      	ldr	r1, [r3, #28]
                         (uint16_t)CDC_Handle->TxDataLength,
 8006516:	68fb      	ldr	r3, [r7, #12]
 8006518:	6a5b      	ldr	r3, [r3, #36]	; 0x24
      USBH_BulkSendData (phost,
 800651a:	b29a      	uxth	r2, r3
 800651c:	68fb      	ldr	r3, [r7, #12]
 800651e:	7b58      	ldrb	r0, [r3, #13]
 8006520:	2301      	movs	r3, #1
 8006522:	9300      	str	r3, [sp, #0]
 8006524:	4603      	mov	r3, r0
 8006526:	6878      	ldr	r0, [r7, #4]
 8006528:	f000 fcab 	bl	8006e82 <USBH_BulkSendData>
    CDC_Handle->data_tx_state = CDC_SEND_DATA_WAIT;
 800652c:	68fb      	ldr	r3, [r7, #12]
 800652e:	2202      	movs	r2, #2
 8006530:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
    break;
 8006534:	e03b      	b.n	80065ae <CDC_ProcessTransmission+0xe8>
    URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.OutPipe);
 8006536:	68fb      	ldr	r3, [r7, #12]
 8006538:	7b5b      	ldrb	r3, [r3, #13]
 800653a:	4619      	mov	r1, r3
 800653c:	6878      	ldr	r0, [r7, #4]
 800653e:	f000 ff7d 	bl	800743c <USBH_LL_GetURBState>
 8006542:	4603      	mov	r3, r0
 8006544:	72fb      	strb	r3, [r7, #11]
    if (URB_Status == USBH_URB_DONE)
 8006546:	7afb      	ldrb	r3, [r7, #11]
 8006548:	2b01      	cmp	r3, #1
 800654a:	d128      	bne.n	800659e <CDC_ProcessTransmission+0xd8>
      if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 800654c:	68fb      	ldr	r3, [r7, #12]
 800654e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006550:	68fa      	ldr	r2, [r7, #12]
 8006552:	8b12      	ldrh	r2, [r2, #24]
 8006554:	4293      	cmp	r3, r2
 8006556:	d90e      	bls.n	8006576 <CDC_ProcessTransmission+0xb0>
        CDC_Handle->TxDataLength -= CDC_Handle->DataItf.OutEpSize;
 8006558:	68fb      	ldr	r3, [r7, #12]
 800655a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800655c:	68fa      	ldr	r2, [r7, #12]
 800655e:	8b12      	ldrh	r2, [r2, #24]
 8006560:	1a9a      	subs	r2, r3, r2
 8006562:	68fb      	ldr	r3, [r7, #12]
 8006564:	625a      	str	r2, [r3, #36]	; 0x24
        CDC_Handle->pTxData += CDC_Handle->DataItf.OutEpSize;
 8006566:	68fb      	ldr	r3, [r7, #12]
 8006568:	69db      	ldr	r3, [r3, #28]
 800656a:	68fa      	ldr	r2, [r7, #12]
 800656c:	8b12      	ldrh	r2, [r2, #24]
 800656e:	441a      	add	r2, r3
 8006570:	68fb      	ldr	r3, [r7, #12]
 8006572:	61da      	str	r2, [r3, #28]
 8006574:	e002      	b.n	800657c <CDC_ProcessTransmission+0xb6>
        CDC_Handle->TxDataLength = 0U;
 8006576:	68fb      	ldr	r3, [r7, #12]
 8006578:	2200      	movs	r2, #0
 800657a:	625a      	str	r2, [r3, #36]	; 0x24
      if (CDC_Handle->TxDataLength > 0U)
 800657c:	68fb      	ldr	r3, [r7, #12]
 800657e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006580:	2b00      	cmp	r3, #0
 8006582:	d004      	beq.n	800658e <CDC_ProcessTransmission+0xc8>
        CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8006584:	68fb      	ldr	r3, [r7, #12]
 8006586:	2201      	movs	r2, #1
 8006588:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
    break;
 800658c:	e00e      	b.n	80065ac <CDC_ProcessTransmission+0xe6>
        CDC_Handle->data_tx_state = CDC_IDLE;
 800658e:	68fb      	ldr	r3, [r7, #12]
 8006590:	2200      	movs	r2, #0
 8006592:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
        USBH_CDC_TransmitCallback(phost);
 8006596:	6878      	ldr	r0, [r7, #4]
 8006598:	f000 f868 	bl	800666c <USBH_CDC_TransmitCallback>
    break;
 800659c:	e006      	b.n	80065ac <CDC_ProcessTransmission+0xe6>
      if (URB_Status == USBH_URB_NOTREADY)
 800659e:	7afb      	ldrb	r3, [r7, #11]
 80065a0:	2b02      	cmp	r3, #2
 80065a2:	d103      	bne.n	80065ac <CDC_ProcessTransmission+0xe6>
        CDC_Handle->data_tx_state = CDC_SEND_DATA;
 80065a4:	68fb      	ldr	r3, [r7, #12]
 80065a6:	2201      	movs	r2, #1
 80065a8:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
    break;
 80065ac:	bf00      	nop
  }
}
 80065ae:	bf00      	nop
 80065b0:	3710      	adds	r7, #16
 80065b2:	46bd      	mov	sp, r7
 80065b4:	bd80      	pop	{r7, pc}

080065b6 <CDC_ProcessReception>:
*  @param  pdev: Selected device
* @retval None
*/

static void CDC_ProcessReception(USBH_HandleTypeDef *phost)
{
 80065b6:	b580      	push	{r7, lr}
 80065b8:	b086      	sub	sp, #24
 80065ba:	af00      	add	r7, sp, #0
 80065bc:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle =  (CDC_HandleTypeDef*) phost->pActiveClass->pData;
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 80065c4:	69db      	ldr	r3, [r3, #28]
 80065c6:	617b      	str	r3, [r7, #20]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 80065c8:	2300      	movs	r3, #0
 80065ca:	74fb      	strb	r3, [r7, #19]
  uint32_t length;

  switch(CDC_Handle->data_rx_state)
 80065cc:	697b      	ldr	r3, [r7, #20]
 80065ce:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 80065d2:	2b03      	cmp	r3, #3
 80065d4:	d002      	beq.n	80065dc <CDC_ProcessReception+0x26>
 80065d6:	2b04      	cmp	r3, #4
 80065d8:	d00e      	beq.n	80065f8 <CDC_ProcessReception+0x42>
#endif
    }
    break;

  default:
    break;
 80065da:	e043      	b.n	8006664 <CDC_ProcessReception+0xae>
    USBH_BulkReceiveData (phost,
 80065dc:	697b      	ldr	r3, [r7, #20]
 80065de:	6a19      	ldr	r1, [r3, #32]
 80065e0:	697b      	ldr	r3, [r7, #20]
 80065e2:	8b5a      	ldrh	r2, [r3, #26]
 80065e4:	697b      	ldr	r3, [r7, #20]
 80065e6:	7b1b      	ldrb	r3, [r3, #12]
 80065e8:	6878      	ldr	r0, [r7, #4]
 80065ea:	f000 fc6f 	bl	8006ecc <USBH_BulkReceiveData>
    CDC_Handle->data_rx_state = CDC_RECEIVE_DATA_WAIT;
 80065ee:	697b      	ldr	r3, [r7, #20]
 80065f0:	2204      	movs	r2, #4
 80065f2:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
    break;
 80065f6:	e035      	b.n	8006664 <CDC_ProcessReception+0xae>
    URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.InPipe);
 80065f8:	697b      	ldr	r3, [r7, #20]
 80065fa:	7b1b      	ldrb	r3, [r3, #12]
 80065fc:	4619      	mov	r1, r3
 80065fe:	6878      	ldr	r0, [r7, #4]
 8006600:	f000 ff1c 	bl	800743c <USBH_LL_GetURBState>
 8006604:	4603      	mov	r3, r0
 8006606:	74fb      	strb	r3, [r7, #19]
    if(URB_Status == USBH_URB_DONE)
 8006608:	7cfb      	ldrb	r3, [r7, #19]
 800660a:	2b01      	cmp	r3, #1
 800660c:	d129      	bne.n	8006662 <CDC_ProcessReception+0xac>
      length = USBH_LL_GetLastXferSize(phost, CDC_Handle->DataItf.InPipe);
 800660e:	697b      	ldr	r3, [r7, #20]
 8006610:	7b1b      	ldrb	r3, [r3, #12]
 8006612:	4619      	mov	r1, r3
 8006614:	6878      	ldr	r0, [r7, #4]
 8006616:	f000 fe7f 	bl	8007318 <USBH_LL_GetLastXferSize>
 800661a:	60f8      	str	r0, [r7, #12]
      if(((CDC_Handle->RxDataLength - length) > 0U) && (length > CDC_Handle->DataItf.InEpSize))
 800661c:	697b      	ldr	r3, [r7, #20]
 800661e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006620:	68fa      	ldr	r2, [r7, #12]
 8006622:	429a      	cmp	r2, r3
 8006624:	d016      	beq.n	8006654 <CDC_ProcessReception+0x9e>
 8006626:	697b      	ldr	r3, [r7, #20]
 8006628:	8b5b      	ldrh	r3, [r3, #26]
 800662a:	461a      	mov	r2, r3
 800662c:	68fb      	ldr	r3, [r7, #12]
 800662e:	4293      	cmp	r3, r2
 8006630:	d910      	bls.n	8006654 <CDC_ProcessReception+0x9e>
        CDC_Handle->RxDataLength -= length ;
 8006632:	697b      	ldr	r3, [r7, #20]
 8006634:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006636:	68fb      	ldr	r3, [r7, #12]
 8006638:	1ad2      	subs	r2, r2, r3
 800663a:	697b      	ldr	r3, [r7, #20]
 800663c:	629a      	str	r2, [r3, #40]	; 0x28
        CDC_Handle->pRxData += length;
 800663e:	697b      	ldr	r3, [r7, #20]
 8006640:	6a1a      	ldr	r2, [r3, #32]
 8006642:	68fb      	ldr	r3, [r7, #12]
 8006644:	441a      	add	r2, r3
 8006646:	697b      	ldr	r3, [r7, #20]
 8006648:	621a      	str	r2, [r3, #32]
        CDC_Handle->data_rx_state = CDC_RECEIVE_DATA;
 800664a:	697b      	ldr	r3, [r7, #20]
 800664c:	2203      	movs	r2, #3
 800664e:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
    break;
 8006652:	e006      	b.n	8006662 <CDC_ProcessReception+0xac>
        CDC_Handle->data_rx_state = CDC_IDLE;
 8006654:	697b      	ldr	r3, [r7, #20]
 8006656:	2200      	movs	r2, #0
 8006658:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
        USBH_CDC_ReceiveCallback(phost);
 800665c:	6878      	ldr	r0, [r7, #4]
 800665e:	f000 f80f 	bl	8006680 <USBH_CDC_ReceiveCallback>
    break;
 8006662:	bf00      	nop
  }
}
 8006664:	bf00      	nop
 8006666:	3718      	adds	r7, #24
 8006668:	46bd      	mov	sp, r7
 800666a:	bd80      	pop	{r7, pc}

0800666c <USBH_CDC_TransmitCallback>:
* @brief  The function informs user that data have been received
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_TransmitCallback(USBH_HandleTypeDef *phost)
{
 800666c:	b480      	push	{r7}
 800666e:	b083      	sub	sp, #12
 8006670:	af00      	add	r7, sp, #0
 8006672:	6078      	str	r0, [r7, #4]

}
 8006674:	bf00      	nop
 8006676:	370c      	adds	r7, #12
 8006678:	46bd      	mov	sp, r7
 800667a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800667e:	4770      	bx	lr

08006680 <USBH_CDC_ReceiveCallback>:
* @brief  The function informs user that data have been sent
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_ReceiveCallback(USBH_HandleTypeDef *phost)
{
 8006680:	b480      	push	{r7}
 8006682:	b083      	sub	sp, #12
 8006684:	af00      	add	r7, sp, #0
 8006686:	6078      	str	r0, [r7, #4]

}
 8006688:	bf00      	nop
 800668a:	370c      	adds	r7, #12
 800668c:	46bd      	mov	sp, r7
 800668e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006692:	4770      	bx	lr

08006694 <USBH_CDC_LineCodingChanged>:
* @brief  The function informs user that Settings have been changed
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_LineCodingChanged(USBH_HandleTypeDef *phost)
{
 8006694:	b480      	push	{r7}
 8006696:	b083      	sub	sp, #12
 8006698:	af00      	add	r7, sp, #0
 800669a:	6078      	str	r0, [r7, #4]

}
 800669c:	bf00      	nop
 800669e:	370c      	adds	r7, #12
 80066a0:	46bd      	mov	sp, r7
 80066a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066a6:	4770      	bx	lr

080066a8 <USBH_Init>:
  * @param  phost: Host Handle
  * @param  pUsrFunc: User Callback
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Init(USBH_HandleTypeDef *phost, void (*pUsrFunc)(USBH_HandleTypeDef *phost, uint8_t id), uint8_t id)
{
 80066a8:	b580      	push	{r7, lr}
 80066aa:	b084      	sub	sp, #16
 80066ac:	af00      	add	r7, sp, #0
 80066ae:	60f8      	str	r0, [r7, #12]
 80066b0:	60b9      	str	r1, [r7, #8]
 80066b2:	4613      	mov	r3, r2
 80066b4:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if(phost == NULL)
 80066b6:	68fb      	ldr	r3, [r7, #12]
 80066b8:	2b00      	cmp	r3, #0
 80066ba:	d101      	bne.n	80066c0 <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 80066bc:	2302      	movs	r3, #2
 80066be:	e019      	b.n	80066f4 <USBH_Init+0x4c>
  }

  /* Set DRiver ID */
  phost->id = id;
 80066c0:	68fb      	ldr	r3, [r7, #12]
 80066c2:	79fa      	ldrb	r2, [r7, #7]
 80066c4:	f883 23c0 	strb.w	r2, [r3, #960]	; 0x3c0

  /* Unlink class*/
  phost->pActiveClass = NULL;
 80066c8:	68fb      	ldr	r3, [r7, #12]
 80066ca:	2200      	movs	r2, #0
 80066cc:	f8c3 2378 	str.w	r2, [r3, #888]	; 0x378
  phost->ClassNumber = 0U;
 80066d0:	68fb      	ldr	r3, [r7, #12]
 80066d2:	2200      	movs	r2, #0
 80066d4:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c

  /* Restore default states and prepare EP0 */
  DeInitStateMachine(phost);
 80066d8:	68f8      	ldr	r0, [r7, #12]
 80066da:	f000 f80f 	bl	80066fc <DeInitStateMachine>

  /* Assign User process */
  if(pUsrFunc != NULL)
 80066de:	68bb      	ldr	r3, [r7, #8]
 80066e0:	2b00      	cmp	r3, #0
 80066e2:	d003      	beq.n	80066ec <USBH_Init+0x44>
  {
    phost->pUser = pUsrFunc;
 80066e4:	68fb      	ldr	r3, [r7, #12]
 80066e6:	68ba      	ldr	r2, [r7, #8]
 80066e8:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  USBH_LL_Init(phost);
 80066ec:	68f8      	ldr	r0, [r7, #12]
 80066ee:	f000 fda1 	bl	8007234 <USBH_LL_Init>

  return USBH_OK;
 80066f2:	2300      	movs	r3, #0
}
 80066f4:	4618      	mov	r0, r3
 80066f6:	3710      	adds	r7, #16
 80066f8:	46bd      	mov	sp, r7
 80066fa:	bd80      	pop	{r7, pc}

080066fc <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef  DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 80066fc:	b480      	push	{r7}
 80066fe:	b085      	sub	sp, #20
 8006700:	af00      	add	r7, sp, #0
 8006702:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 8006704:	2300      	movs	r3, #0
 8006706:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for ( ; i < USBH_MAX_PIPES_NBR; i++)
 8006708:	e008      	b.n	800671c <DeInitStateMachine+0x20>
  {
    phost->Pipes[i] = 0U;
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	68fa      	ldr	r2, [r7, #12]
 800670e:	32e0      	adds	r2, #224	; 0xe0
 8006710:	2100      	movs	r1, #0
 8006712:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for ( ; i < USBH_MAX_PIPES_NBR; i++)
 8006716:	68fb      	ldr	r3, [r7, #12]
 8006718:	3301      	adds	r3, #1
 800671a:	60fb      	str	r3, [r7, #12]
 800671c:	68fb      	ldr	r3, [r7, #12]
 800671e:	2b0e      	cmp	r3, #14
 8006720:	d9f3      	bls.n	800670a <DeInitStateMachine+0xe>
  }

  for(i = 0U; i< USBH_MAX_DATA_BUFFER; i++)
 8006722:	2300      	movs	r3, #0
 8006724:	60fb      	str	r3, [r7, #12]
 8006726:	e009      	b.n	800673c <DeInitStateMachine+0x40>
  {
    phost->device.Data[i] = 0U;
 8006728:	687a      	ldr	r2, [r7, #4]
 800672a:	68fb      	ldr	r3, [r7, #12]
 800672c:	4413      	add	r3, r2
 800672e:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8006732:	2200      	movs	r2, #0
 8006734:	701a      	strb	r2, [r3, #0]
  for(i = 0U; i< USBH_MAX_DATA_BUFFER; i++)
 8006736:	68fb      	ldr	r3, [r7, #12]
 8006738:	3301      	adds	r3, #1
 800673a:	60fb      	str	r3, [r7, #12]
 800673c:	68fb      	ldr	r3, [r7, #12]
 800673e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006742:	d3f1      	bcc.n	8006728 <DeInitStateMachine+0x2c>
  }

  phost->gState = HOST_IDLE;
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	2200      	movs	r2, #0
 8006748:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	2200      	movs	r2, #0
 800674e:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	2201      	movs	r2, #1
 8006754:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	2200      	movs	r2, #0
 800675a:	f8c3 23bc 	str.w	r2, [r3, #956]	; 0x3bc

  phost->Control.state = CTRL_SETUP;
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	2201      	movs	r2, #1
 8006762:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	2240      	movs	r2, #64	; 0x40
 8006768:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	2200      	movs	r2, #0
 800676e:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	2200      	movs	r2, #0
 8006774:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
  phost->device.speed   = USBH_SPEED_FULL;
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	2201      	movs	r2, #1
 800677c:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d

  return USBH_OK;
 8006780:	2300      	movs	r3, #0
}
 8006782:	4618      	mov	r0, r3
 8006784:	3714      	adds	r7, #20
 8006786:	46bd      	mov	sp, r7
 8006788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800678c:	4770      	bx	lr

0800678e <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 800678e:	b480      	push	{r7}
 8006790:	b085      	sub	sp, #20
 8006792:	af00      	add	r7, sp, #0
 8006794:	6078      	str	r0, [r7, #4]
 8006796:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef   status = USBH_OK;
 8006798:	2300      	movs	r3, #0
 800679a:	73fb      	strb	r3, [r7, #15]

  if(pclass != 0)
 800679c:	683b      	ldr	r3, [r7, #0]
 800679e:	2b00      	cmp	r3, #0
 80067a0:	d017      	beq.n	80067d2 <USBH_RegisterClass+0x44>
  {
    if(phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80067a8:	2b00      	cmp	r3, #0
 80067aa:	d10f      	bne.n	80067cc <USBH_RegisterClass+0x3e>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80067b2:	1c59      	adds	r1, r3, #1
 80067b4:	687a      	ldr	r2, [r7, #4]
 80067b6:	f8c2 137c 	str.w	r1, [r2, #892]	; 0x37c
 80067ba:	687a      	ldr	r2, [r7, #4]
 80067bc:	33dc      	adds	r3, #220	; 0xdc
 80067be:	009b      	lsls	r3, r3, #2
 80067c0:	4413      	add	r3, r2
 80067c2:	683a      	ldr	r2, [r7, #0]
 80067c4:	605a      	str	r2, [r3, #4]
      status = USBH_OK;
 80067c6:	2300      	movs	r3, #0
 80067c8:	73fb      	strb	r3, [r7, #15]
 80067ca:	e004      	b.n	80067d6 <USBH_RegisterClass+0x48>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 80067cc:	2302      	movs	r3, #2
 80067ce:	73fb      	strb	r3, [r7, #15]
 80067d0:	e001      	b.n	80067d6 <USBH_RegisterClass+0x48>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 80067d2:	2302      	movs	r3, #2
 80067d4:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 80067d6:	7bfb      	ldrb	r3, [r7, #15]
}
 80067d8:	4618      	mov	r0, r3
 80067da:	3714      	adds	r7, #20
 80067dc:	46bd      	mov	sp, r7
 80067de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067e2:	4770      	bx	lr

080067e4 <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 80067e4:	b480      	push	{r7}
 80067e6:	b085      	sub	sp, #20
 80067e8:	af00      	add	r7, sp, #0
 80067ea:	6078      	str	r0, [r7, #4]
 80067ec:	460b      	mov	r3, r1
 80067ee:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef   status = USBH_OK;
 80067f0:	2300      	movs	r3, #0
 80067f2:	73fb      	strb	r3, [r7, #15]

  if(interface < phost->device.CfgDesc.bNumInterfaces)
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	f893 3338 	ldrb.w	r3, [r3, #824]	; 0x338
 80067fa:	78fa      	ldrb	r2, [r7, #3]
 80067fc:	429a      	cmp	r2, r3
 80067fe:	d204      	bcs.n	800680a <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	78fa      	ldrb	r2, [r7, #3]
 8006804:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
 8006808:	e001      	b.n	800680e <USBH_SelectInterface+0x2a>
    USBH_UsrLog ("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol );
  }
  else
  {
    USBH_ErrLog ("Cannot Select This Interface.");
    status = USBH_FAIL;
 800680a:	2302      	movs	r3, #2
 800680c:	73fb      	strb	r3, [r7, #15]
  }
  return status;
 800680e:	7bfb      	ldrb	r3, [r7, #15]
}
 8006810:	4618      	mov	r0, r3
 8006812:	3714      	adds	r7, #20
 8006814:	46bd      	mov	sp, r7
 8006816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800681a:	4770      	bx	lr

0800681c <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t  USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 800681c:	b480      	push	{r7}
 800681e:	b087      	sub	sp, #28
 8006820:	af00      	add	r7, sp, #0
 8006822:	6078      	str	r0, [r7, #4]
 8006824:	4608      	mov	r0, r1
 8006826:	4611      	mov	r1, r2
 8006828:	461a      	mov	r2, r3
 800682a:	4603      	mov	r3, r0
 800682c:	70fb      	strb	r3, [r7, #3]
 800682e:	460b      	mov	r3, r1
 8006830:	70bb      	strb	r3, [r7, #2]
 8006832:	4613      	mov	r3, r2
 8006834:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef    *pif ;
  USBH_CfgDescTypeDef          *pcfg ;
  uint8_t                        if_ix = 0U;
 8006836:	2300      	movs	r3, #0
 8006838:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)0;
 800683a:	2300      	movs	r3, #0
 800683c:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	f503 734d 	add.w	r3, r3, #820	; 0x334
 8006844:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8006846:	e025      	b.n	8006894 <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 8006848:	7dfb      	ldrb	r3, [r7, #23]
 800684a:	221a      	movs	r2, #26
 800684c:	fb02 f303 	mul.w	r3, r2, r3
 8006850:	3308      	adds	r3, #8
 8006852:	68fa      	ldr	r2, [r7, #12]
 8006854:	4413      	add	r3, r2
 8006856:	3302      	adds	r3, #2
 8006858:	613b      	str	r3, [r7, #16]
    if(((pif->bInterfaceClass == Class) || (Class == 0xFFU))&&
 800685a:	693b      	ldr	r3, [r7, #16]
 800685c:	795b      	ldrb	r3, [r3, #5]
 800685e:	78fa      	ldrb	r2, [r7, #3]
 8006860:	429a      	cmp	r2, r3
 8006862:	d002      	beq.n	800686a <USBH_FindInterface+0x4e>
 8006864:	78fb      	ldrb	r3, [r7, #3]
 8006866:	2bff      	cmp	r3, #255	; 0xff
 8006868:	d111      	bne.n	800688e <USBH_FindInterface+0x72>
       ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU))&&
 800686a:	693b      	ldr	r3, [r7, #16]
 800686c:	799b      	ldrb	r3, [r3, #6]
    if(((pif->bInterfaceClass == Class) || (Class == 0xFFU))&&
 800686e:	78ba      	ldrb	r2, [r7, #2]
 8006870:	429a      	cmp	r2, r3
 8006872:	d002      	beq.n	800687a <USBH_FindInterface+0x5e>
       ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU))&&
 8006874:	78bb      	ldrb	r3, [r7, #2]
 8006876:	2bff      	cmp	r3, #255	; 0xff
 8006878:	d109      	bne.n	800688e <USBH_FindInterface+0x72>
         ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 800687a:	693b      	ldr	r3, [r7, #16]
 800687c:	79db      	ldrb	r3, [r3, #7]
       ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU))&&
 800687e:	787a      	ldrb	r2, [r7, #1]
 8006880:	429a      	cmp	r2, r3
 8006882:	d002      	beq.n	800688a <USBH_FindInterface+0x6e>
         ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8006884:	787b      	ldrb	r3, [r7, #1]
 8006886:	2bff      	cmp	r3, #255	; 0xff
 8006888:	d101      	bne.n	800688e <USBH_FindInterface+0x72>
    {
      return  if_ix;
 800688a:	7dfb      	ldrb	r3, [r7, #23]
 800688c:	e006      	b.n	800689c <USBH_FindInterface+0x80>
    }
    if_ix++;
 800688e:	7dfb      	ldrb	r3, [r7, #23]
 8006890:	3301      	adds	r3, #1
 8006892:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8006894:	7dfb      	ldrb	r3, [r7, #23]
 8006896:	2b01      	cmp	r3, #1
 8006898:	d9d6      	bls.n	8006848 <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 800689a:	23ff      	movs	r3, #255	; 0xff
}
 800689c:	4618      	mov	r0, r3
 800689e:	371c      	adds	r7, #28
 80068a0:	46bd      	mov	sp, r7
 80068a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068a6:	4770      	bx	lr

080068a8 <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Start  (USBH_HandleTypeDef *phost)
{
 80068a8:	b580      	push	{r7, lr}
 80068aa:	b082      	sub	sp, #8
 80068ac:	af00      	add	r7, sp, #0
 80068ae:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBH_LL_Start(phost);
 80068b0:	6878      	ldr	r0, [r7, #4]
 80068b2:	f000 fcfb 	bl	80072ac <USBH_LL_Start>

  /* Activate VBUS on the port */
  USBH_LL_DriverVBUS (phost, TRUE);
 80068b6:	2101      	movs	r1, #1
 80068b8:	6878      	ldr	r0, [r7, #4]
 80068ba:	f000 fdd2 	bl	8007462 <USBH_LL_DriverVBUS>

  return USBH_OK;
 80068be:	2300      	movs	r3, #0
}
 80068c0:	4618      	mov	r0, r3
 80068c2:	3708      	adds	r7, #8
 80068c4:	46bd      	mov	sp, r7
 80068c6:	bd80      	pop	{r7, pc}

080068c8 <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_SetTimer  (USBH_HandleTypeDef *phost, uint32_t time)
{
 80068c8:	b480      	push	{r7}
 80068ca:	b083      	sub	sp, #12
 80068cc:	af00      	add	r7, sp, #0
 80068ce:	6078      	str	r0, [r7, #4]
 80068d0:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	683a      	ldr	r2, [r7, #0]
 80068d6:	f8c3 23bc 	str.w	r2, [r3, #956]	; 0x3bc
}
 80068da:	bf00      	nop
 80068dc:	370c      	adds	r7, #12
 80068de:	46bd      	mov	sp, r7
 80068e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068e4:	4770      	bx	lr

080068e6 <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_IncTimer  (USBH_HandleTypeDef *phost)
{
 80068e6:	b580      	push	{r7, lr}
 80068e8:	b082      	sub	sp, #8
 80068ea:	af00      	add	r7, sp, #0
 80068ec:	6078      	str	r0, [r7, #4]
  phost->Timer ++;
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	f8d3 33bc 	ldr.w	r3, [r3, #956]	; 0x3bc
 80068f4:	1c5a      	adds	r2, r3, #1
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	f8c3 23bc 	str.w	r2, [r3, #956]	; 0x3bc
  USBH_HandleSof(phost);
 80068fc:	6878      	ldr	r0, [r7, #4]
 80068fe:	f000 f804 	bl	800690a <USBH_HandleSof>
}
 8006902:	bf00      	nop
 8006904:	3708      	adds	r7, #8
 8006906:	46bd      	mov	sp, r7
 8006908:	bd80      	pop	{r7, pc}

0800690a <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void  USBH_HandleSof  (USBH_HandleTypeDef *phost)
{
 800690a:	b580      	push	{r7, lr}
 800690c:	b082      	sub	sp, #8
 800690e:	af00      	add	r7, sp, #0
 8006910:	6078      	str	r0, [r7, #4]
  if((phost->gState == HOST_CLASS)&&(phost->pActiveClass != NULL))
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	781b      	ldrb	r3, [r3, #0]
 8006916:	b2db      	uxtb	r3, r3
 8006918:	2b0b      	cmp	r3, #11
 800691a:	d10a      	bne.n	8006932 <USBH_HandleSof+0x28>
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 8006922:	2b00      	cmp	r3, #0
 8006924:	d005      	beq.n	8006932 <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 800692c:	699b      	ldr	r3, [r3, #24]
 800692e:	6878      	ldr	r0, [r7, #4]
 8006930:	4798      	blx	r3
  }
}
 8006932:	bf00      	nop
 8006934:	3708      	adds	r7, #8
 8006936:	46bd      	mov	sp, r7
 8006938:	bd80      	pop	{r7, pc}

0800693a <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled (USBH_HandleTypeDef *phost)
{
 800693a:	b480      	push	{r7}
 800693c:	b083      	sub	sp, #12
 800693e:	af00      	add	r7, sp, #0
 8006940:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	2201      	movs	r2, #1
 8006946:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f

  return;
 800694a:	bf00      	nop
}
 800694c:	370c      	adds	r7, #12
 800694e:	46bd      	mov	sp, r7
 8006950:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006954:	4770      	bx	lr

08006956 <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled (USBH_HandleTypeDef *phost)
{
 8006956:	b480      	push	{r7}
 8006958:	b083      	sub	sp, #12
 800695a:	af00      	add	r7, sp, #0
 800695c:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	2200      	movs	r2, #0
 8006962:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f

  return;
 8006966:	bf00      	nop
}
 8006968:	370c      	adds	r7, #12
 800696a:	46bd      	mov	sp, r7
 800696c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006970:	4770      	bx	lr

08006972 <USBH_LL_Connect>:
  *         Handle USB Host connexion event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Connect (USBH_HandleTypeDef *phost)
{
 8006972:	b580      	push	{r7, lr}
 8006974:	b082      	sub	sp, #8
 8006976:	af00      	add	r7, sp, #0
 8006978:	6078      	str	r0, [r7, #4]
  if(phost->gState == HOST_IDLE )
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	781b      	ldrb	r3, [r3, #0]
 800697e:	b2db      	uxtb	r3, r3
 8006980:	2b00      	cmp	r3, #0
 8006982:	d10f      	bne.n	80069a4 <USBH_LL_Connect+0x32>
  {
    phost->device.is_connected = 1U;
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	2201      	movs	r2, #1
 8006988:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e

    if(phost->pUser != NULL)
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8006992:	2b00      	cmp	r3, #0
 8006994:	d00e      	beq.n	80069b4 <USBH_LL_Connect+0x42>
    {
      phost->pUser(phost, HOST_USER_CONNECTION);
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 800699c:	2104      	movs	r1, #4
 800699e:	6878      	ldr	r0, [r7, #4]
 80069a0:	4798      	blx	r3
 80069a2:	e007      	b.n	80069b4 <USBH_LL_Connect+0x42>
    }
  }
  else
  {
    if (phost->device.PortEnabled == 1U)
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 80069aa:	2b01      	cmp	r3, #1
 80069ac:	d102      	bne.n	80069b4 <USBH_LL_Connect+0x42>
    {
      phost->gState = HOST_DEV_ATTACHED;
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	2202      	movs	r2, #2
 80069b2:	701a      	strb	r2, [r3, #0]
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
 80069b4:	2300      	movs	r3, #0
}
 80069b6:	4618      	mov	r0, r3
 80069b8:	3708      	adds	r7, #8
 80069ba:	46bd      	mov	sp, r7
 80069bc:	bd80      	pop	{r7, pc}

080069be <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Disconnect  (USBH_HandleTypeDef *phost)
{
 80069be:	b580      	push	{r7, lr}
 80069c0:	b082      	sub	sp, #8
 80069c2:	af00      	add	r7, sp, #0
 80069c4:	6078      	str	r0, [r7, #4]
  /*Stop Host */
  USBH_LL_Stop(phost);
 80069c6:	6878      	ldr	r0, [r7, #4]
 80069c8:	f000 fc8b 	bl	80072e2 <USBH_LL_Stop>

  /* FRee Control Pipes */
  USBH_FreePipe  (phost, phost->Control.pipe_in);
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	791b      	ldrb	r3, [r3, #4]
 80069d0:	4619      	mov	r1, r3
 80069d2:	6878      	ldr	r0, [r7, #4]
 80069d4:	f000 fae5 	bl	8006fa2 <USBH_FreePipe>
  USBH_FreePipe  (phost, phost->Control.pipe_out);
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	795b      	ldrb	r3, [r3, #5]
 80069dc:	4619      	mov	r1, r3
 80069de:	6878      	ldr	r0, [r7, #4]
 80069e0:	f000 fadf 	bl	8006fa2 <USBH_FreePipe>

  phost->device.is_connected = 0U;
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	2200      	movs	r2, #0
 80069e8:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e

  if(phost->pUser != NULL)
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 80069f2:	2b00      	cmp	r3, #0
 80069f4:	d005      	beq.n	8006a02 <USBH_LL_Disconnect+0x44>
  {
    phost->pUser(phost, HOST_USER_DISCONNECTION);
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 80069fc:	2105      	movs	r1, #5
 80069fe:	6878      	ldr	r0, [r7, #4]
 8006a00:	4798      	blx	r3
  }
  USBH_UsrLog("USB Device disconnected");

  /* Start the low level driver  */
  USBH_LL_Start(phost);
 8006a02:	6878      	ldr	r0, [r7, #4]
 8006a04:	f000 fc52 	bl	80072ac <USBH_LL_Start>

  phost->gState = HOST_DEV_DISCONNECTED;
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	2203      	movs	r2, #3
 8006a0c:	701a      	strb	r2, [r3, #0]
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
 8006a0e:	2300      	movs	r3, #0
}
 8006a10:	4618      	mov	r0, r3
 8006a12:	3708      	adds	r7, #8
 8006a14:	46bd      	mov	sp, r7
 8006a16:	bd80      	pop	{r7, pc}

08006a18 <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 8006a18:	b580      	push	{r7, lr}
 8006a1a:	b082      	sub	sp, #8
 8006a1c:	af00      	add	r7, sp, #0
 8006a1e:	6078      	str	r0, [r7, #4]
 8006a20:	460b      	mov	r3, r1
 8006a22:	70fb      	strb	r3, [r7, #3]
  if(phost->RequestState == CMD_SEND)
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	789b      	ldrb	r3, [r3, #2]
 8006a28:	2b01      	cmp	r3, #1
 8006a2a:	d10f      	bne.n	8006a4c <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	2202      	movs	r2, #2
 8006a30:	741a      	strb	r2, [r3, #16]
                                                   | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	2201      	movs	r2, #1
 8006a36:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	2200      	movs	r2, #0
 8006a3c:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 8006a3e:	78fb      	ldrb	r3, [r7, #3]
 8006a40:	b29a      	uxth	r2, r3
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	2200      	movs	r2, #0
 8006a4a:	82da      	strh	r2, [r3, #22]
  }
  return USBH_CtlReq(phost, 0U , 0U);
 8006a4c:	2200      	movs	r2, #0
 8006a4e:	2100      	movs	r1, #0
 8006a50:	6878      	ldr	r0, [r7, #4]
 8006a52:	f000 f805 	bl	8006a60 <USBH_CtlReq>
 8006a56:	4603      	mov	r3, r0
}
 8006a58:	4618      	mov	r0, r3
 8006a5a:	3708      	adds	r7, #8
 8006a5c:	46bd      	mov	sp, r7
 8006a5e:	bd80      	pop	{r7, pc}

08006a60 <USBH_CtlReq>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq     (USBH_HandleTypeDef *phost,
                             uint8_t             *buff,
                             uint16_t            length)
{
 8006a60:	b580      	push	{r7, lr}
 8006a62:	b086      	sub	sp, #24
 8006a64:	af00      	add	r7, sp, #0
 8006a66:	60f8      	str	r0, [r7, #12]
 8006a68:	60b9      	str	r1, [r7, #8]
 8006a6a:	4613      	mov	r3, r2
 8006a6c:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 8006a6e:	2301      	movs	r3, #1
 8006a70:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 8006a72:	68fb      	ldr	r3, [r7, #12]
 8006a74:	789b      	ldrb	r3, [r3, #2]
 8006a76:	2b01      	cmp	r3, #1
 8006a78:	d002      	beq.n	8006a80 <USBH_CtlReq+0x20>
 8006a7a:	2b02      	cmp	r3, #2
 8006a7c:	d00f      	beq.n	8006a9e <USBH_CtlReq+0x3e>
      }
    }
    break;

  default:
    break;
 8006a7e:	e034      	b.n	8006aea <USBH_CtlReq+0x8a>
    phost->Control.buff = buff;
 8006a80:	68fb      	ldr	r3, [r7, #12]
 8006a82:	68ba      	ldr	r2, [r7, #8]
 8006a84:	609a      	str	r2, [r3, #8]
    phost->Control.length = length;
 8006a86:	68fb      	ldr	r3, [r7, #12]
 8006a88:	88fa      	ldrh	r2, [r7, #6]
 8006a8a:	819a      	strh	r2, [r3, #12]
    phost->Control.state = CTRL_SETUP;
 8006a8c:	68fb      	ldr	r3, [r7, #12]
 8006a8e:	2201      	movs	r2, #1
 8006a90:	761a      	strb	r2, [r3, #24]
    phost->RequestState = CMD_WAIT;
 8006a92:	68fb      	ldr	r3, [r7, #12]
 8006a94:	2202      	movs	r2, #2
 8006a96:	709a      	strb	r2, [r3, #2]
    status = USBH_BUSY;
 8006a98:	2301      	movs	r3, #1
 8006a9a:	75fb      	strb	r3, [r7, #23]
    break;
 8006a9c:	e025      	b.n	8006aea <USBH_CtlReq+0x8a>
    status = USBH_HandleControl(phost);
 8006a9e:	68f8      	ldr	r0, [r7, #12]
 8006aa0:	f000 f828 	bl	8006af4 <USBH_HandleControl>
 8006aa4:	4603      	mov	r3, r0
 8006aa6:	75fb      	strb	r3, [r7, #23]
    if (status == USBH_OK)
 8006aa8:	7dfb      	ldrb	r3, [r7, #23]
 8006aaa:	2b00      	cmp	r3, #0
 8006aac:	d108      	bne.n	8006ac0 <USBH_CtlReq+0x60>
      phost->RequestState = CMD_SEND;
 8006aae:	68fb      	ldr	r3, [r7, #12]
 8006ab0:	2201      	movs	r2, #1
 8006ab2:	709a      	strb	r2, [r3, #2]
      phost->Control.state =CTRL_IDLE;
 8006ab4:	68fb      	ldr	r3, [r7, #12]
 8006ab6:	2200      	movs	r2, #0
 8006ab8:	761a      	strb	r2, [r3, #24]
      status = USBH_OK;
 8006aba:	2300      	movs	r3, #0
 8006abc:	75fb      	strb	r3, [r7, #23]
    break;
 8006abe:	e013      	b.n	8006ae8 <USBH_CtlReq+0x88>
    else if (status == USBH_NOT_SUPPORTED)
 8006ac0:	7dfb      	ldrb	r3, [r7, #23]
 8006ac2:	2b03      	cmp	r3, #3
 8006ac4:	d108      	bne.n	8006ad8 <USBH_CtlReq+0x78>
      phost->RequestState = CMD_SEND;
 8006ac6:	68fb      	ldr	r3, [r7, #12]
 8006ac8:	2201      	movs	r2, #1
 8006aca:	709a      	strb	r2, [r3, #2]
      phost->Control.state = CTRL_IDLE;
 8006acc:	68fb      	ldr	r3, [r7, #12]
 8006ace:	2200      	movs	r2, #0
 8006ad0:	761a      	strb	r2, [r3, #24]
      status = USBH_NOT_SUPPORTED;
 8006ad2:	2303      	movs	r3, #3
 8006ad4:	75fb      	strb	r3, [r7, #23]
    break;
 8006ad6:	e007      	b.n	8006ae8 <USBH_CtlReq+0x88>
      if (status == USBH_FAIL)
 8006ad8:	7dfb      	ldrb	r3, [r7, #23]
 8006ada:	2b02      	cmp	r3, #2
 8006adc:	d104      	bne.n	8006ae8 <USBH_CtlReq+0x88>
        phost->RequestState = CMD_SEND;
 8006ade:	68fb      	ldr	r3, [r7, #12]
 8006ae0:	2201      	movs	r2, #1
 8006ae2:	709a      	strb	r2, [r3, #2]
        status = USBH_FAIL;
 8006ae4:	2302      	movs	r3, #2
 8006ae6:	75fb      	strb	r3, [r7, #23]
    break;
 8006ae8:	bf00      	nop
  }
  return status;
 8006aea:	7dfb      	ldrb	r3, [r7, #23]
}
 8006aec:	4618      	mov	r0, r3
 8006aee:	3718      	adds	r7, #24
 8006af0:	46bd      	mov	sp, r7
 8006af2:	bd80      	pop	{r7, pc}

08006af4 <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl (USBH_HandleTypeDef *phost)
{
 8006af4:	b580      	push	{r7, lr}
 8006af6:	b086      	sub	sp, #24
 8006af8:	af02      	add	r7, sp, #8
 8006afa:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 8006afc:	2301      	movs	r3, #1
 8006afe:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8006b00:	2300      	movs	r3, #0
 8006b02:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	7e1b      	ldrb	r3, [r3, #24]
 8006b08:	3b01      	subs	r3, #1
 8006b0a:	2b0a      	cmp	r3, #10
 8006b0c:	f200 814c 	bhi.w	8006da8 <USBH_HandleControl+0x2b4>
 8006b10:	a201      	add	r2, pc, #4	; (adr r2, 8006b18 <USBH_HandleControl+0x24>)
 8006b12:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006b16:	bf00      	nop
 8006b18:	08006b45 	.word	0x08006b45
 8006b1c:	08006b5f 	.word	0x08006b5f
 8006b20:	08006bc9 	.word	0x08006bc9
 8006b24:	08006bef 	.word	0x08006bef
 8006b28:	08006c27 	.word	0x08006c27
 8006b2c:	08006c53 	.word	0x08006c53
 8006b30:	08006ca5 	.word	0x08006ca5
 8006b34:	08006cc7 	.word	0x08006cc7
 8006b38:	08006d03 	.word	0x08006d03
 8006b3c:	08006d2b 	.word	0x08006d2b
 8006b40:	08006d69 	.word	0x08006d69
  {
  case CTRL_SETUP:
    /* send a SETUP packet */
    USBH_CtlSendSetup (phost, (uint8_t *)(void *)phost->Control.setup.d8,
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	f103 0110 	add.w	r1, r3, #16
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	795b      	ldrb	r3, [r3, #5]
 8006b4e:	461a      	mov	r2, r3
 8006b50:	6878      	ldr	r0, [r7, #4]
 8006b52:	f000 f939 	bl	8006dc8 <USBH_CtlSendSetup>
	                     phost->Control.pipe_out);

    phost->Control.state = CTRL_SETUP_WAIT;
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	2202      	movs	r2, #2
 8006b5a:	761a      	strb	r2, [r3, #24]
    break;
 8006b5c:	e12f      	b.n	8006dbe <USBH_HandleControl+0x2ca>

  case CTRL_SETUP_WAIT:

    URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	795b      	ldrb	r3, [r3, #5]
 8006b62:	4619      	mov	r1, r3
 8006b64:	6878      	ldr	r0, [r7, #4]
 8006b66:	f000 fc69 	bl	800743c <USBH_LL_GetURBState>
 8006b6a:	4603      	mov	r3, r0
 8006b6c:	73bb      	strb	r3, [r7, #14]
    /* case SETUP packet sent successfully */
    if(URB_Status == USBH_URB_DONE)
 8006b6e:	7bbb      	ldrb	r3, [r7, #14]
 8006b70:	2b01      	cmp	r3, #1
 8006b72:	d11e      	bne.n	8006bb2 <USBH_HandleControl+0xbe>
    {
      direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	7c1b      	ldrb	r3, [r3, #16]
 8006b78:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8006b7c:	737b      	strb	r3, [r7, #13]

      /* check if there is a data stage */
      if (phost->Control.setup.b.wLength.w != 0U)
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	8adb      	ldrh	r3, [r3, #22]
 8006b82:	2b00      	cmp	r3, #0
 8006b84:	d00a      	beq.n	8006b9c <USBH_HandleControl+0xa8>
      {
        if (direction == USB_D2H)
 8006b86:	7b7b      	ldrb	r3, [r7, #13]
 8006b88:	2b80      	cmp	r3, #128	; 0x80
 8006b8a:	d103      	bne.n	8006b94 <USBH_HandleControl+0xa0>
        {
          /* Data Direction is IN */
          phost->Control.state = CTRL_DATA_IN;
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	2203      	movs	r2, #3
 8006b90:	761a      	strb	r2, [r3, #24]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
    }
    break;
 8006b92:	e10b      	b.n	8006dac <USBH_HandleControl+0x2b8>
          phost->Control.state = CTRL_DATA_OUT;
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	2205      	movs	r2, #5
 8006b98:	761a      	strb	r2, [r3, #24]
    break;
 8006b9a:	e107      	b.n	8006dac <USBH_HandleControl+0x2b8>
        if (direction == USB_D2H)
 8006b9c:	7b7b      	ldrb	r3, [r7, #13]
 8006b9e:	2b80      	cmp	r3, #128	; 0x80
 8006ba0:	d103      	bne.n	8006baa <USBH_HandleControl+0xb6>
          phost->Control.state = CTRL_STATUS_OUT;
 8006ba2:	687b      	ldr	r3, [r7, #4]
 8006ba4:	2209      	movs	r2, #9
 8006ba6:	761a      	strb	r2, [r3, #24]
    break;
 8006ba8:	e100      	b.n	8006dac <USBH_HandleControl+0x2b8>
          phost->Control.state = CTRL_STATUS_IN;
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	2207      	movs	r2, #7
 8006bae:	761a      	strb	r2, [r3, #24]
    break;
 8006bb0:	e0fc      	b.n	8006dac <USBH_HandleControl+0x2b8>
      if((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 8006bb2:	7bbb      	ldrb	r3, [r7, #14]
 8006bb4:	2b04      	cmp	r3, #4
 8006bb6:	d003      	beq.n	8006bc0 <USBH_HandleControl+0xcc>
 8006bb8:	7bbb      	ldrb	r3, [r7, #14]
 8006bba:	2b02      	cmp	r3, #2
 8006bbc:	f040 80f6 	bne.w	8006dac <USBH_HandleControl+0x2b8>
        phost->Control.state = CTRL_ERROR;
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	220b      	movs	r2, #11
 8006bc4:	761a      	strb	r2, [r3, #24]
    break;
 8006bc6:	e0f1      	b.n	8006dac <USBH_HandleControl+0x2b8>

  case CTRL_DATA_IN:
    /* Issue an IN token */
    phost->Control.timer = (uint16_t)phost->Timer;
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	f8d3 33bc 	ldr.w	r3, [r3, #956]	; 0x3bc
 8006bce:	b29a      	uxth	r2, r3
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	81da      	strh	r2, [r3, #14]
    USBH_CtlReceiveData(phost,
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	6899      	ldr	r1, [r3, #8]
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	899a      	ldrh	r2, [r3, #12]
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	791b      	ldrb	r3, [r3, #4]
 8006be0:	6878      	ldr	r0, [r7, #4]
 8006be2:	f000 f930 	bl	8006e46 <USBH_CtlReceiveData>
                        phost->Control.buff,
                        phost->Control.length,
                        phost->Control.pipe_in);

    phost->Control.state = CTRL_DATA_IN_WAIT;
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	2204      	movs	r2, #4
 8006bea:	761a      	strb	r2, [r3, #24]
    break;
 8006bec:	e0e7      	b.n	8006dbe <USBH_HandleControl+0x2ca>

  case CTRL_DATA_IN_WAIT:

    URB_Status = USBH_LL_GetURBState(phost , phost->Control.pipe_in);
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	791b      	ldrb	r3, [r3, #4]
 8006bf2:	4619      	mov	r1, r3
 8006bf4:	6878      	ldr	r0, [r7, #4]
 8006bf6:	f000 fc21 	bl	800743c <USBH_LL_GetURBState>
 8006bfa:	4603      	mov	r3, r0
 8006bfc:	73bb      	strb	r3, [r7, #14]

    /* check is DATA packet transferred successfully */
    if  (URB_Status == USBH_URB_DONE)
 8006bfe:	7bbb      	ldrb	r3, [r7, #14]
 8006c00:	2b01      	cmp	r3, #1
 8006c02:	d102      	bne.n	8006c0a <USBH_HandleControl+0x116>
    {
      phost->Control.state = CTRL_STATUS_OUT;
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	2209      	movs	r2, #9
 8006c08:	761a      	strb	r2, [r3, #24]
#endif
#endif
    }

    /* manage error cases*/
    if  (URB_Status == USBH_URB_STALL)
 8006c0a:	7bbb      	ldrb	r3, [r7, #14]
 8006c0c:	2b05      	cmp	r3, #5
 8006c0e:	d102      	bne.n	8006c16 <USBH_HandleControl+0x122>
    {
      /* In stall case, return to previous machine state*/
      status = USBH_NOT_SUPPORTED;
 8006c10:	2303      	movs	r3, #3
 8006c12:	73fb      	strb	r3, [r7, #15]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
    }
    break;
 8006c14:	e0cc      	b.n	8006db0 <USBH_HandleControl+0x2bc>
      if (URB_Status == USBH_URB_ERROR)
 8006c16:	7bbb      	ldrb	r3, [r7, #14]
 8006c18:	2b04      	cmp	r3, #4
 8006c1a:	f040 80c9 	bne.w	8006db0 <USBH_HandleControl+0x2bc>
        phost->Control.state = CTRL_ERROR;
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	220b      	movs	r2, #11
 8006c22:	761a      	strb	r2, [r3, #24]
    break;
 8006c24:	e0c4      	b.n	8006db0 <USBH_HandleControl+0x2bc>

  case CTRL_DATA_OUT:

    USBH_CtlSendData (phost,
 8006c26:	687b      	ldr	r3, [r7, #4]
 8006c28:	6899      	ldr	r1, [r3, #8]
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	899a      	ldrh	r2, [r3, #12]
 8006c2e:	687b      	ldr	r3, [r7, #4]
 8006c30:	7958      	ldrb	r0, [r3, #5]
 8006c32:	2301      	movs	r3, #1
 8006c34:	9300      	str	r3, [sp, #0]
 8006c36:	4603      	mov	r3, r0
 8006c38:	6878      	ldr	r0, [r7, #4]
 8006c3a:	f000 f8df 	bl	8006dfc <USBH_CtlSendData>
                      phost->Control.buff,
                      phost->Control.length ,
                      phost->Control.pipe_out,
                      1U);
     phost->Control.timer = (uint16_t)phost->Timer;
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	f8d3 33bc 	ldr.w	r3, [r3, #956]	; 0x3bc
 8006c44:	b29a      	uxth	r2, r3
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	81da      	strh	r2, [r3, #14]
    phost->Control.state = CTRL_DATA_OUT_WAIT;
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	2206      	movs	r2, #6
 8006c4e:	761a      	strb	r2, [r3, #24]
    break;
 8006c50:	e0b5      	b.n	8006dbe <USBH_HandleControl+0x2ca>

  case CTRL_DATA_OUT_WAIT:

    URB_Status = USBH_LL_GetURBState(phost , phost->Control.pipe_out);
 8006c52:	687b      	ldr	r3, [r7, #4]
 8006c54:	795b      	ldrb	r3, [r3, #5]
 8006c56:	4619      	mov	r1, r3
 8006c58:	6878      	ldr	r0, [r7, #4]
 8006c5a:	f000 fbef 	bl	800743c <USBH_LL_GetURBState>
 8006c5e:	4603      	mov	r3, r0
 8006c60:	73bb      	strb	r3, [r7, #14]

    if  (URB_Status == USBH_URB_DONE)
 8006c62:	7bbb      	ldrb	r3, [r7, #14]
 8006c64:	2b01      	cmp	r3, #1
 8006c66:	d103      	bne.n	8006c70 <USBH_HandleControl+0x17c>
    { /* If the Setup Pkt is sent successful, then change the state */
      phost->Control.state = CTRL_STATUS_IN;
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	2207      	movs	r2, #7
 8006c6c:	761a      	strb	r2, [r3, #24]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
    }
    break;
 8006c6e:	e0a1      	b.n	8006db4 <USBH_HandleControl+0x2c0>
    else if  (URB_Status == USBH_URB_STALL)
 8006c70:	7bbb      	ldrb	r3, [r7, #14]
 8006c72:	2b05      	cmp	r3, #5
 8006c74:	d105      	bne.n	8006c82 <USBH_HandleControl+0x18e>
      phost->Control.state = CTRL_STALLED;
 8006c76:	687b      	ldr	r3, [r7, #4]
 8006c78:	220c      	movs	r2, #12
 8006c7a:	761a      	strb	r2, [r3, #24]
      status = USBH_NOT_SUPPORTED;
 8006c7c:	2303      	movs	r3, #3
 8006c7e:	73fb      	strb	r3, [r7, #15]
    break;
 8006c80:	e098      	b.n	8006db4 <USBH_HandleControl+0x2c0>
    else if  (URB_Status == USBH_URB_NOTREADY)
 8006c82:	7bbb      	ldrb	r3, [r7, #14]
 8006c84:	2b02      	cmp	r3, #2
 8006c86:	d103      	bne.n	8006c90 <USBH_HandleControl+0x19c>
      phost->Control.state = CTRL_DATA_OUT;
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	2205      	movs	r2, #5
 8006c8c:	761a      	strb	r2, [r3, #24]
    break;
 8006c8e:	e091      	b.n	8006db4 <USBH_HandleControl+0x2c0>
      if (URB_Status == USBH_URB_ERROR)
 8006c90:	7bbb      	ldrb	r3, [r7, #14]
 8006c92:	2b04      	cmp	r3, #4
 8006c94:	f040 808e 	bne.w	8006db4 <USBH_HandleControl+0x2c0>
        phost->Control.state = CTRL_ERROR;
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	220b      	movs	r2, #11
 8006c9c:	761a      	strb	r2, [r3, #24]
        status = USBH_FAIL;
 8006c9e:	2302      	movs	r3, #2
 8006ca0:	73fb      	strb	r3, [r7, #15]
    break;
 8006ca2:	e087      	b.n	8006db4 <USBH_HandleControl+0x2c0>


  case CTRL_STATUS_IN:
    /* Send 0 bytes out packet */
    USBH_CtlReceiveData (phost,
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	791b      	ldrb	r3, [r3, #4]
 8006ca8:	2200      	movs	r2, #0
 8006caa:	2100      	movs	r1, #0
 8006cac:	6878      	ldr	r0, [r7, #4]
 8006cae:	f000 f8ca 	bl	8006e46 <USBH_CtlReceiveData>
                         0U,
                         0U,
                         phost->Control.pipe_in);
    phost->Control.timer = (uint16_t)phost->Timer;
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	f8d3 33bc 	ldr.w	r3, [r3, #956]	; 0x3bc
 8006cb8:	b29a      	uxth	r2, r3
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	81da      	strh	r2, [r3, #14]
    phost->Control.state = CTRL_STATUS_IN_WAIT;
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	2208      	movs	r2, #8
 8006cc2:	761a      	strb	r2, [r3, #24]

    break;
 8006cc4:	e07b      	b.n	8006dbe <USBH_HandleControl+0x2ca>

  case CTRL_STATUS_IN_WAIT:

    URB_Status = USBH_LL_GetURBState(phost , phost->Control.pipe_in);
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	791b      	ldrb	r3, [r3, #4]
 8006cca:	4619      	mov	r1, r3
 8006ccc:	6878      	ldr	r0, [r7, #4]
 8006cce:	f000 fbb5 	bl	800743c <USBH_LL_GetURBState>
 8006cd2:	4603      	mov	r3, r0
 8006cd4:	73bb      	strb	r3, [r7, #14]

    if  ( URB_Status == USBH_URB_DONE)
 8006cd6:	7bbb      	ldrb	r3, [r7, #14]
 8006cd8:	2b01      	cmp	r3, #1
 8006cda:	d105      	bne.n	8006ce8 <USBH_HandleControl+0x1f4>
    { /* Control transfers completed, Exit the State Machine */
      phost->Control.state = CTRL_COMPLETE;
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	220d      	movs	r2, #13
 8006ce0:	761a      	strb	r2, [r3, #24]
      status = USBH_OK;
 8006ce2:	2300      	movs	r3, #0
 8006ce4:	73fb      	strb	r3, [r7, #15]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
    }
    break;
 8006ce6:	e067      	b.n	8006db8 <USBH_HandleControl+0x2c4>
    else if (URB_Status == USBH_URB_ERROR)
 8006ce8:	7bbb      	ldrb	r3, [r7, #14]
 8006cea:	2b04      	cmp	r3, #4
 8006cec:	d103      	bne.n	8006cf6 <USBH_HandleControl+0x202>
      phost->Control.state = CTRL_ERROR;
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	220b      	movs	r2, #11
 8006cf2:	761a      	strb	r2, [r3, #24]
    break;
 8006cf4:	e060      	b.n	8006db8 <USBH_HandleControl+0x2c4>
      if(URB_Status == USBH_URB_STALL)
 8006cf6:	7bbb      	ldrb	r3, [r7, #14]
 8006cf8:	2b05      	cmp	r3, #5
 8006cfa:	d15d      	bne.n	8006db8 <USBH_HandleControl+0x2c4>
        status = USBH_NOT_SUPPORTED;
 8006cfc:	2303      	movs	r3, #3
 8006cfe:	73fb      	strb	r3, [r7, #15]
    break;
 8006d00:	e05a      	b.n	8006db8 <USBH_HandleControl+0x2c4>

  case CTRL_STATUS_OUT:
    USBH_CtlSendData (phost,
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	795a      	ldrb	r2, [r3, #5]
 8006d06:	2301      	movs	r3, #1
 8006d08:	9300      	str	r3, [sp, #0]
 8006d0a:	4613      	mov	r3, r2
 8006d0c:	2200      	movs	r2, #0
 8006d0e:	2100      	movs	r1, #0
 8006d10:	6878      	ldr	r0, [r7, #4]
 8006d12:	f000 f873 	bl	8006dfc <USBH_CtlSendData>
                      0U,
                      0U,
                      phost->Control.pipe_out,
                      1U);
     phost->Control.timer = (uint16_t)phost->Timer;
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	f8d3 33bc 	ldr.w	r3, [r3, #956]	; 0x3bc
 8006d1c:	b29a      	uxth	r2, r3
 8006d1e:	687b      	ldr	r3, [r7, #4]
 8006d20:	81da      	strh	r2, [r3, #14]
    phost->Control.state = CTRL_STATUS_OUT_WAIT;
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	220a      	movs	r2, #10
 8006d26:	761a      	strb	r2, [r3, #24]
    break;
 8006d28:	e049      	b.n	8006dbe <USBH_HandleControl+0x2ca>

  case CTRL_STATUS_OUT_WAIT:

    URB_Status = USBH_LL_GetURBState(phost , phost->Control.pipe_out);
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	795b      	ldrb	r3, [r3, #5]
 8006d2e:	4619      	mov	r1, r3
 8006d30:	6878      	ldr	r0, [r7, #4]
 8006d32:	f000 fb83 	bl	800743c <USBH_LL_GetURBState>
 8006d36:	4603      	mov	r3, r0
 8006d38:	73bb      	strb	r3, [r7, #14]
    if  (URB_Status == USBH_URB_DONE)
 8006d3a:	7bbb      	ldrb	r3, [r7, #14]
 8006d3c:	2b01      	cmp	r3, #1
 8006d3e:	d105      	bne.n	8006d4c <USBH_HandleControl+0x258>
    {
      status = USBH_OK;
 8006d40:	2300      	movs	r3, #0
 8006d42:	73fb      	strb	r3, [r7, #15]
      phost->Control.state = CTRL_COMPLETE;
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	220d      	movs	r2, #13
 8006d48:	761a      	strb	r2, [r3, #24]
#endif
#endif
      }

    }
    break;
 8006d4a:	e037      	b.n	8006dbc <USBH_HandleControl+0x2c8>
    else if  (URB_Status == USBH_URB_NOTREADY)
 8006d4c:	7bbb      	ldrb	r3, [r7, #14]
 8006d4e:	2b02      	cmp	r3, #2
 8006d50:	d103      	bne.n	8006d5a <USBH_HandleControl+0x266>
      phost->Control.state = CTRL_STATUS_OUT;
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	2209      	movs	r2, #9
 8006d56:	761a      	strb	r2, [r3, #24]
    break;
 8006d58:	e030      	b.n	8006dbc <USBH_HandleControl+0x2c8>
      if (URB_Status == USBH_URB_ERROR)
 8006d5a:	7bbb      	ldrb	r3, [r7, #14]
 8006d5c:	2b04      	cmp	r3, #4
 8006d5e:	d12d      	bne.n	8006dbc <USBH_HandleControl+0x2c8>
        phost->Control.state = CTRL_ERROR;
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	220b      	movs	r2, #11
 8006d64:	761a      	strb	r2, [r3, #24]
    break;
 8006d66:	e029      	b.n	8006dbc <USBH_HandleControl+0x2c8>
    PID; i.e., recovery actions via some other pipe are not required for control
    endpoints. For the Default Control Pipe, a device reset will ultimately be
    required to clear the halt or error condition if the next Setup PID is not
    accepted.
    */
    if (++ phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	7e5b      	ldrb	r3, [r3, #25]
 8006d6c:	3301      	adds	r3, #1
 8006d6e:	b2da      	uxtb	r2, r3
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	765a      	strb	r2, [r3, #25]
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	7e5b      	ldrb	r3, [r3, #25]
 8006d78:	2b02      	cmp	r3, #2
 8006d7a:	d809      	bhi.n	8006d90 <USBH_HandleControl+0x29c>
    {
      /* try to recover control */
      USBH_LL_Stop(phost);
 8006d7c:	6878      	ldr	r0, [r7, #4]
 8006d7e:	f000 fab0 	bl	80072e2 <USBH_LL_Stop>

      /* Do the transmission again, starting from SETUP Packet */
      phost->Control.state = CTRL_SETUP;
 8006d82:	687b      	ldr	r3, [r7, #4]
 8006d84:	2201      	movs	r2, #1
 8006d86:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_SEND;
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	2201      	movs	r2, #1
 8006d8c:	709a      	strb	r2, [r3, #2]
      phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
      phost->Control.errorcount = 0U;
      USBH_ErrLog("Control error");
      status = USBH_FAIL;
    }
    break;
 8006d8e:	e016      	b.n	8006dbe <USBH_HandleControl+0x2ca>
      phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8006d96:	2106      	movs	r1, #6
 8006d98:	6878      	ldr	r0, [r7, #4]
 8006d9a:	4798      	blx	r3
      phost->Control.errorcount = 0U;
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	2200      	movs	r2, #0
 8006da0:	765a      	strb	r2, [r3, #25]
      status = USBH_FAIL;
 8006da2:	2302      	movs	r3, #2
 8006da4:	73fb      	strb	r3, [r7, #15]
    break;
 8006da6:	e00a      	b.n	8006dbe <USBH_HandleControl+0x2ca>

  default:
    break;
 8006da8:	bf00      	nop
 8006daa:	e008      	b.n	8006dbe <USBH_HandleControl+0x2ca>
    break;
 8006dac:	bf00      	nop
 8006dae:	e006      	b.n	8006dbe <USBH_HandleControl+0x2ca>
    break;
 8006db0:	bf00      	nop
 8006db2:	e004      	b.n	8006dbe <USBH_HandleControl+0x2ca>
    break;
 8006db4:	bf00      	nop
 8006db6:	e002      	b.n	8006dbe <USBH_HandleControl+0x2ca>
    break;
 8006db8:	bf00      	nop
 8006dba:	e000      	b.n	8006dbe <USBH_HandleControl+0x2ca>
    break;
 8006dbc:	bf00      	nop
  }
  return status;
 8006dbe:	7bfb      	ldrb	r3, [r7, #15]
}
 8006dc0:	4618      	mov	r0, r3
 8006dc2:	3710      	adds	r7, #16
 8006dc4:	46bd      	mov	sp, r7
 8006dc6:	bd80      	pop	{r7, pc}

08006dc8 <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup (USBH_HandleTypeDef *phost,
                                uint8_t *buff,
                                uint8_t pipe_num)
{
 8006dc8:	b580      	push	{r7, lr}
 8006dca:	b088      	sub	sp, #32
 8006dcc:	af04      	add	r7, sp, #16
 8006dce:	60f8      	str	r0, [r7, #12]
 8006dd0:	60b9      	str	r1, [r7, #8]
 8006dd2:	4613      	mov	r3, r2
 8006dd4:	71fb      	strb	r3, [r7, #7]

  USBH_LL_SubmitURB (phost,                     /* Driver handle    */
 8006dd6:	79f9      	ldrb	r1, [r7, #7]
 8006dd8:	2300      	movs	r3, #0
 8006dda:	9303      	str	r3, [sp, #12]
 8006ddc:	2308      	movs	r3, #8
 8006dde:	9302      	str	r3, [sp, #8]
 8006de0:	68bb      	ldr	r3, [r7, #8]
 8006de2:	9301      	str	r3, [sp, #4]
 8006de4:	2300      	movs	r3, #0
 8006de6:	9300      	str	r3, [sp, #0]
 8006de8:	2300      	movs	r3, #0
 8006dea:	2200      	movs	r2, #0
 8006dec:	68f8      	ldr	r0, [r7, #12]
 8006dee:	f000 faf4 	bl	80073da <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_SETUP,       /* Type setup       */
                          buff,                 /* data buffer      */
                          USBH_SETUP_PKT_SIZE,  /* data length      */
                          0U);
  return USBH_OK;
 8006df2:	2300      	movs	r3, #0
}
 8006df4:	4618      	mov	r0, r3
 8006df6:	3710      	adds	r7, #16
 8006df8:	46bd      	mov	sp, r7
 8006dfa:	bd80      	pop	{r7, pc}

08006dfc <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData (USBH_HandleTypeDef *phost,
                                uint8_t *buff,
                                uint16_t length,
                                uint8_t pipe_num,
                                uint8_t do_ping )
{
 8006dfc:	b580      	push	{r7, lr}
 8006dfe:	b088      	sub	sp, #32
 8006e00:	af04      	add	r7, sp, #16
 8006e02:	60f8      	str	r0, [r7, #12]
 8006e04:	60b9      	str	r1, [r7, #8]
 8006e06:	4611      	mov	r1, r2
 8006e08:	461a      	mov	r2, r3
 8006e0a:	460b      	mov	r3, r1
 8006e0c:	80fb      	strh	r3, [r7, #6]
 8006e0e:	4613      	mov	r3, r2
 8006e10:	717b      	strb	r3, [r7, #5]
  if(phost->device.speed != USBH_SPEED_HIGH)
 8006e12:	68fb      	ldr	r3, [r7, #12]
 8006e14:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8006e18:	2b00      	cmp	r3, #0
 8006e1a:	d001      	beq.n	8006e20 <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 8006e1c:	2300      	movs	r3, #0
 8006e1e:	763b      	strb	r3, [r7, #24]
  }

  USBH_LL_SubmitURB (phost,                     /* Driver handle    */
 8006e20:	7979      	ldrb	r1, [r7, #5]
 8006e22:	7e3b      	ldrb	r3, [r7, #24]
 8006e24:	9303      	str	r3, [sp, #12]
 8006e26:	88fb      	ldrh	r3, [r7, #6]
 8006e28:	9302      	str	r3, [sp, #8]
 8006e2a:	68bb      	ldr	r3, [r7, #8]
 8006e2c:	9301      	str	r3, [sp, #4]
 8006e2e:	2301      	movs	r3, #1
 8006e30:	9300      	str	r3, [sp, #0]
 8006e32:	2300      	movs	r3, #0
 8006e34:	2200      	movs	r2, #0
 8006e36:	68f8      	ldr	r0, [r7, #12]
 8006e38:	f000 facf 	bl	80073da <USBH_LL_SubmitURB>
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 8006e3c:	2300      	movs	r3, #0
}
 8006e3e:	4618      	mov	r0, r3
 8006e40:	3710      	adds	r7, #16
 8006e42:	46bd      	mov	sp, r7
 8006e44:	bd80      	pop	{r7, pc}

08006e46 <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                uint8_t* buff,
                                uint16_t length,
                                uint8_t pipe_num)
{
 8006e46:	b580      	push	{r7, lr}
 8006e48:	b088      	sub	sp, #32
 8006e4a:	af04      	add	r7, sp, #16
 8006e4c:	60f8      	str	r0, [r7, #12]
 8006e4e:	60b9      	str	r1, [r7, #8]
 8006e50:	4611      	mov	r1, r2
 8006e52:	461a      	mov	r2, r3
 8006e54:	460b      	mov	r3, r1
 8006e56:	80fb      	strh	r3, [r7, #6]
 8006e58:	4613      	mov	r3, r2
 8006e5a:	717b      	strb	r3, [r7, #5]
  USBH_LL_SubmitURB (phost,                     /* Driver handle    */
 8006e5c:	7979      	ldrb	r1, [r7, #5]
 8006e5e:	2300      	movs	r3, #0
 8006e60:	9303      	str	r3, [sp, #12]
 8006e62:	88fb      	ldrh	r3, [r7, #6]
 8006e64:	9302      	str	r3, [sp, #8]
 8006e66:	68bb      	ldr	r3, [r7, #8]
 8006e68:	9301      	str	r3, [sp, #4]
 8006e6a:	2301      	movs	r3, #1
 8006e6c:	9300      	str	r3, [sp, #0]
 8006e6e:	2300      	movs	r3, #0
 8006e70:	2201      	movs	r2, #1
 8006e72:	68f8      	ldr	r0, [r7, #12]
 8006e74:	f000 fab1 	bl	80073da <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 8006e78:	2300      	movs	r3, #0

}
 8006e7a:	4618      	mov	r0, r3
 8006e7c:	3710      	adds	r7, #16
 8006e7e:	46bd      	mov	sp, r7
 8006e80:	bd80      	pop	{r7, pc}

08006e82 <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData (USBH_HandleTypeDef *phost,
                                uint8_t *buff,
                                uint16_t length,
                                uint8_t pipe_num,
                                uint8_t do_ping)
{
 8006e82:	b580      	push	{r7, lr}
 8006e84:	b088      	sub	sp, #32
 8006e86:	af04      	add	r7, sp, #16
 8006e88:	60f8      	str	r0, [r7, #12]
 8006e8a:	60b9      	str	r1, [r7, #8]
 8006e8c:	4611      	mov	r1, r2
 8006e8e:	461a      	mov	r2, r3
 8006e90:	460b      	mov	r3, r1
 8006e92:	80fb      	strh	r3, [r7, #6]
 8006e94:	4613      	mov	r3, r2
 8006e96:	717b      	strb	r3, [r7, #5]
  if(phost->device.speed != USBH_SPEED_HIGH)
 8006e98:	68fb      	ldr	r3, [r7, #12]
 8006e9a:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8006e9e:	2b00      	cmp	r3, #0
 8006ea0:	d001      	beq.n	8006ea6 <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 8006ea2:	2300      	movs	r3, #0
 8006ea4:	763b      	strb	r3, [r7, #24]
  }

  USBH_LL_SubmitURB (phost,                     /* Driver handle    */
 8006ea6:	7979      	ldrb	r1, [r7, #5]
 8006ea8:	7e3b      	ldrb	r3, [r7, #24]
 8006eaa:	9303      	str	r3, [sp, #12]
 8006eac:	88fb      	ldrh	r3, [r7, #6]
 8006eae:	9302      	str	r3, [sp, #8]
 8006eb0:	68bb      	ldr	r3, [r7, #8]
 8006eb2:	9301      	str	r3, [sp, #4]
 8006eb4:	2301      	movs	r3, #1
 8006eb6:	9300      	str	r3, [sp, #0]
 8006eb8:	2302      	movs	r3, #2
 8006eba:	2200      	movs	r2, #0
 8006ebc:	68f8      	ldr	r0, [r7, #12]
 8006ebe:	f000 fa8c 	bl	80073da <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 8006ec2:	2300      	movs	r3, #0
}
 8006ec4:	4618      	mov	r0, r3
 8006ec6:	3710      	adds	r7, #16
 8006ec8:	46bd      	mov	sp, r7
 8006eca:	bd80      	pop	{r7, pc}

08006ecc <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                uint8_t *buff,
                                uint16_t length,
                                uint8_t pipe_num)
{
 8006ecc:	b580      	push	{r7, lr}
 8006ece:	b088      	sub	sp, #32
 8006ed0:	af04      	add	r7, sp, #16
 8006ed2:	60f8      	str	r0, [r7, #12]
 8006ed4:	60b9      	str	r1, [r7, #8]
 8006ed6:	4611      	mov	r1, r2
 8006ed8:	461a      	mov	r2, r3
 8006eda:	460b      	mov	r3, r1
 8006edc:	80fb      	strh	r3, [r7, #6]
 8006ede:	4613      	mov	r3, r2
 8006ee0:	717b      	strb	r3, [r7, #5]
  USBH_LL_SubmitURB (phost,                     /* Driver handle    */
 8006ee2:	7979      	ldrb	r1, [r7, #5]
 8006ee4:	2300      	movs	r3, #0
 8006ee6:	9303      	str	r3, [sp, #12]
 8006ee8:	88fb      	ldrh	r3, [r7, #6]
 8006eea:	9302      	str	r3, [sp, #8]
 8006eec:	68bb      	ldr	r3, [r7, #8]
 8006eee:	9301      	str	r3, [sp, #4]
 8006ef0:	2301      	movs	r3, #1
 8006ef2:	9300      	str	r3, [sp, #0]
 8006ef4:	2302      	movs	r3, #2
 8006ef6:	2201      	movs	r2, #1
 8006ef8:	68f8      	ldr	r0, [r7, #12]
 8006efa:	f000 fa6e 	bl	80073da <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 8006efe:	2300      	movs	r3, #0
}
 8006f00:	4618      	mov	r0, r3
 8006f02:	3710      	adds	r7, #16
 8006f04:	46bd      	mov	sp, r7
 8006f06:	bd80      	pop	{r7, pc}

08006f08 <USBH_OpenPipe>:
                            uint8_t epnum,
                            uint8_t dev_address,
                            uint8_t speed,
                            uint8_t ep_type,
                            uint16_t mps)
{
 8006f08:	b580      	push	{r7, lr}
 8006f0a:	b086      	sub	sp, #24
 8006f0c:	af04      	add	r7, sp, #16
 8006f0e:	6078      	str	r0, [r7, #4]
 8006f10:	4608      	mov	r0, r1
 8006f12:	4611      	mov	r1, r2
 8006f14:	461a      	mov	r2, r3
 8006f16:	4603      	mov	r3, r0
 8006f18:	70fb      	strb	r3, [r7, #3]
 8006f1a:	460b      	mov	r3, r1
 8006f1c:	70bb      	strb	r3, [r7, #2]
 8006f1e:	4613      	mov	r3, r2
 8006f20:	707b      	strb	r3, [r7, #1]

  USBH_LL_OpenPipe(phost,
 8006f22:	7878      	ldrb	r0, [r7, #1]
 8006f24:	78ba      	ldrb	r2, [r7, #2]
 8006f26:	78f9      	ldrb	r1, [r7, #3]
 8006f28:	8b3b      	ldrh	r3, [r7, #24]
 8006f2a:	9302      	str	r3, [sp, #8]
 8006f2c:	7d3b      	ldrb	r3, [r7, #20]
 8006f2e:	9301      	str	r3, [sp, #4]
 8006f30:	7c3b      	ldrb	r3, [r7, #16]
 8006f32:	9300      	str	r3, [sp, #0]
 8006f34:	4603      	mov	r3, r0
 8006f36:	6878      	ldr	r0, [r7, #4]
 8006f38:	f000 fa01 	bl	800733e <USBH_LL_OpenPipe>
                        dev_address,
                        speed,
                        ep_type,
                        mps);

  return USBH_OK;
 8006f3c:	2300      	movs	r3, #0

}
 8006f3e:	4618      	mov	r0, r3
 8006f40:	3708      	adds	r7, #8
 8006f42:	46bd      	mov	sp, r7
 8006f44:	bd80      	pop	{r7, pc}

08006f46 <USBH_ClosePipe>:
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe  (USBH_HandleTypeDef *phost,
                            uint8_t pipe_num)
{
 8006f46:	b580      	push	{r7, lr}
 8006f48:	b082      	sub	sp, #8
 8006f4a:	af00      	add	r7, sp, #0
 8006f4c:	6078      	str	r0, [r7, #4]
 8006f4e:	460b      	mov	r3, r1
 8006f50:	70fb      	strb	r3, [r7, #3]

  USBH_LL_ClosePipe(phost, pipe_num);
 8006f52:	78fb      	ldrb	r3, [r7, #3]
 8006f54:	4619      	mov	r1, r3
 8006f56:	6878      	ldr	r0, [r7, #4]
 8006f58:	f000 fa20 	bl	800739c <USBH_LL_ClosePipe>

  return USBH_OK;
 8006f5c:	2300      	movs	r3, #0

}
 8006f5e:	4618      	mov	r0, r3
 8006f60:	3708      	adds	r7, #8
 8006f62:	46bd      	mov	sp, r7
 8006f64:	bd80      	pop	{r7, pc}

08006f66 <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe  (USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 8006f66:	b580      	push	{r7, lr}
 8006f68:	b084      	sub	sp, #16
 8006f6a:	af00      	add	r7, sp, #0
 8006f6c:	6078      	str	r0, [r7, #4]
 8006f6e:	460b      	mov	r3, r1
 8006f70:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 8006f72:	6878      	ldr	r0, [r7, #4]
 8006f74:	f000 f831 	bl	8006fda <USBH_GetFreePipe>
 8006f78:	4603      	mov	r3, r0
 8006f7a:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 8006f7c:	89fb      	ldrh	r3, [r7, #14]
 8006f7e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8006f82:	4293      	cmp	r3, r2
 8006f84:	d007      	beq.n	8006f96 <USBH_AllocPipe+0x30>
  {
	phost->Pipes[pipe] = 0x8000U | ep_addr;
 8006f86:	78fb      	ldrb	r3, [r7, #3]
 8006f88:	89fa      	ldrh	r2, [r7, #14]
 8006f8a:	f443 4100 	orr.w	r1, r3, #32768	; 0x8000
 8006f8e:	687b      	ldr	r3, [r7, #4]
 8006f90:	32e0      	adds	r2, #224	; 0xe0
 8006f92:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }
  return (uint8_t)pipe;
 8006f96:	89fb      	ldrh	r3, [r7, #14]
 8006f98:	b2db      	uxtb	r3, r3
}
 8006f9a:	4618      	mov	r0, r3
 8006f9c:	3710      	adds	r7, #16
 8006f9e:	46bd      	mov	sp, r7
 8006fa0:	bd80      	pop	{r7, pc}

08006fa2 <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe  (USBH_HandleTypeDef *phost, uint8_t idx)
{
 8006fa2:	b480      	push	{r7}
 8006fa4:	b083      	sub	sp, #12
 8006fa6:	af00      	add	r7, sp, #0
 8006fa8:	6078      	str	r0, [r7, #4]
 8006faa:	460b      	mov	r3, r1
 8006fac:	70fb      	strb	r3, [r7, #3]
   if(idx < 11U)
 8006fae:	78fb      	ldrb	r3, [r7, #3]
 8006fb0:	2b0a      	cmp	r3, #10
 8006fb2:	d80b      	bhi.n	8006fcc <USBH_FreePipe+0x2a>
   {
	 phost->Pipes[idx] &= 0x7FFFU;
 8006fb4:	78fa      	ldrb	r2, [r7, #3]
 8006fb6:	687b      	ldr	r3, [r7, #4]
 8006fb8:	32e0      	adds	r2, #224	; 0xe0
 8006fba:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006fbe:	78fa      	ldrb	r2, [r7, #3]
 8006fc0:	f3c3 010e 	ubfx	r1, r3, #0, #15
 8006fc4:	687b      	ldr	r3, [r7, #4]
 8006fc6:	32e0      	adds	r2, #224	; 0xe0
 8006fc8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
   }
   return USBH_OK;
 8006fcc:	2300      	movs	r3, #0
}
 8006fce:	4618      	mov	r0, r3
 8006fd0:	370c      	adds	r7, #12
 8006fd2:	46bd      	mov	sp, r7
 8006fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fd8:	4770      	bx	lr

08006fda <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe (USBH_HandleTypeDef *phost)
{
 8006fda:	b480      	push	{r7}
 8006fdc:	b085      	sub	sp, #20
 8006fde:	af00      	add	r7, sp, #0
 8006fe0:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 8006fe2:	2300      	movs	r3, #0
 8006fe4:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U ; idx < 11U ; idx++)
 8006fe6:	2300      	movs	r3, #0
 8006fe8:	73fb      	strb	r3, [r7, #15]
 8006fea:	e00e      	b.n	800700a <USBH_GetFreePipe+0x30>
  {
	if ((phost->Pipes[idx] & 0x8000U) == 0U)
 8006fec:	7bfa      	ldrb	r2, [r7, #15]
 8006fee:	687b      	ldr	r3, [r7, #4]
 8006ff0:	32e0      	adds	r2, #224	; 0xe0
 8006ff2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006ff6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006ffa:	2b00      	cmp	r3, #0
 8006ffc:	d102      	bne.n	8007004 <USBH_GetFreePipe+0x2a>
	{
	   return (uint16_t)idx;
 8006ffe:	7bfb      	ldrb	r3, [r7, #15]
 8007000:	b29b      	uxth	r3, r3
 8007002:	e007      	b.n	8007014 <USBH_GetFreePipe+0x3a>
  for (idx = 0U ; idx < 11U ; idx++)
 8007004:	7bfb      	ldrb	r3, [r7, #15]
 8007006:	3301      	adds	r3, #1
 8007008:	73fb      	strb	r3, [r7, #15]
 800700a:	7bfb      	ldrb	r3, [r7, #15]
 800700c:	2b0a      	cmp	r3, #10
 800700e:	d9ed      	bls.n	8006fec <USBH_GetFreePipe+0x12>
	}
  }
  return 0xFFFFU;
 8007010:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
 8007014:	4618      	mov	r0, r3
 8007016:	3714      	adds	r7, #20
 8007018:	46bd      	mov	sp, r7
 800701a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800701e:	4770      	bx	lr

08007020 <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 8007020:	b580      	push	{r7, lr}
 8007022:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */
  
  /* USER CODE END USB_HOST_Init_PreTreatment */
  
  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 8007024:	2201      	movs	r2, #1
 8007026:	490e      	ldr	r1, [pc, #56]	; (8007060 <MX_USB_HOST_Init+0x40>)
 8007028:	480e      	ldr	r0, [pc, #56]	; (8007064 <MX_USB_HOST_Init+0x44>)
 800702a:	f7ff fb3d 	bl	80066a8 <USBH_Init>
 800702e:	4603      	mov	r3, r0
 8007030:	2b00      	cmp	r3, #0
 8007032:	d001      	beq.n	8007038 <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 8007034:	f7f9 fda6 	bl	8000b84 <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_CDC_CLASS) != USBH_OK)
 8007038:	490b      	ldr	r1, [pc, #44]	; (8007068 <MX_USB_HOST_Init+0x48>)
 800703a:	480a      	ldr	r0, [pc, #40]	; (8007064 <MX_USB_HOST_Init+0x44>)
 800703c:	f7ff fba7 	bl	800678e <USBH_RegisterClass>
 8007040:	4603      	mov	r3, r0
 8007042:	2b00      	cmp	r3, #0
 8007044:	d001      	beq.n	800704a <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 8007046:	f7f9 fd9d 	bl	8000b84 <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 800704a:	4806      	ldr	r0, [pc, #24]	; (8007064 <MX_USB_HOST_Init+0x44>)
 800704c:	f7ff fc2c 	bl	80068a8 <USBH_Start>
 8007050:	4603      	mov	r3, r0
 8007052:	2b00      	cmp	r3, #0
 8007054:	d001      	beq.n	800705a <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 8007056:	f7f9 fd95 	bl	8000b84 <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */
  
  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 800705a:	bf00      	nop
 800705c:	bd80      	pop	{r7, pc}
 800705e:	bf00      	nop
 8007060:	0800706d 	.word	0x0800706d
 8007064:	20000618 	.word	0x20000618
 8007068:	2000000c 	.word	0x2000000c

0800706c <USBH_UserProcess>:
}
/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 800706c:	b480      	push	{r7}
 800706e:	b083      	sub	sp, #12
 8007070:	af00      	add	r7, sp, #0
 8007072:	6078      	str	r0, [r7, #4]
 8007074:	460b      	mov	r3, r1
 8007076:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 8007078:	78fb      	ldrb	r3, [r7, #3]
 800707a:	3b01      	subs	r3, #1
 800707c:	2b04      	cmp	r3, #4
 800707e:	d819      	bhi.n	80070b4 <USBH_UserProcess+0x48>
 8007080:	a201      	add	r2, pc, #4	; (adr r2, 8007088 <USBH_UserProcess+0x1c>)
 8007082:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007086:	bf00      	nop
 8007088:	080070b5 	.word	0x080070b5
 800708c:	080070a5 	.word	0x080070a5
 8007090:	080070b5 	.word	0x080070b5
 8007094:	080070ad 	.word	0x080070ad
 8007098:	0800709d 	.word	0x0800709d
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 800709c:	4b09      	ldr	r3, [pc, #36]	; (80070c4 <USBH_UserProcess+0x58>)
 800709e:	2203      	movs	r2, #3
 80070a0:	701a      	strb	r2, [r3, #0]
  break;
 80070a2:	e008      	b.n	80070b6 <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 80070a4:	4b07      	ldr	r3, [pc, #28]	; (80070c4 <USBH_UserProcess+0x58>)
 80070a6:	2202      	movs	r2, #2
 80070a8:	701a      	strb	r2, [r3, #0]
  break;
 80070aa:	e004      	b.n	80070b6 <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 80070ac:	4b05      	ldr	r3, [pc, #20]	; (80070c4 <USBH_UserProcess+0x58>)
 80070ae:	2201      	movs	r2, #1
 80070b0:	701a      	strb	r2, [r3, #0]
  break;
 80070b2:	e000      	b.n	80070b6 <USBH_UserProcess+0x4a>

  default:
  break;
 80070b4:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 80070b6:	bf00      	nop
 80070b8:	370c      	adds	r7, #12
 80070ba:	46bd      	mov	sp, r7
 80070bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070c0:	4770      	bx	lr
 80070c2:	bf00      	nop
 80070c4:	200000bc 	.word	0x200000bc

080070c8 <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 80070c8:	b580      	push	{r7, lr}
 80070ca:	b08a      	sub	sp, #40	; 0x28
 80070cc:	af00      	add	r7, sp, #0
 80070ce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80070d0:	f107 0314 	add.w	r3, r7, #20
 80070d4:	2200      	movs	r2, #0
 80070d6:	601a      	str	r2, [r3, #0]
 80070d8:	605a      	str	r2, [r3, #4]
 80070da:	609a      	str	r2, [r3, #8]
 80070dc:	60da      	str	r2, [r3, #12]
 80070de:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_FS)
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	681b      	ldr	r3, [r3, #0]
 80070e4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80070e8:	d147      	bne.n	800717a <HAL_HCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80070ea:	2300      	movs	r3, #0
 80070ec:	613b      	str	r3, [r7, #16]
 80070ee:	4b25      	ldr	r3, [pc, #148]	; (8007184 <HAL_HCD_MspInit+0xbc>)
 80070f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80070f2:	4a24      	ldr	r2, [pc, #144]	; (8007184 <HAL_HCD_MspInit+0xbc>)
 80070f4:	f043 0301 	orr.w	r3, r3, #1
 80070f8:	6313      	str	r3, [r2, #48]	; 0x30
 80070fa:	4b22      	ldr	r3, [pc, #136]	; (8007184 <HAL_HCD_MspInit+0xbc>)
 80070fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80070fe:	f003 0301 	and.w	r3, r3, #1
 8007102:	613b      	str	r3, [r7, #16]
 8007104:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP 
    */
    GPIO_InitStruct.Pin = VBUS_FS_Pin;
 8007106:	f44f 7300 	mov.w	r3, #512	; 0x200
 800710a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800710c:	2300      	movs	r3, #0
 800710e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007110:	2300      	movs	r3, #0
 8007112:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 8007114:	f107 0314 	add.w	r3, r7, #20
 8007118:	4619      	mov	r1, r3
 800711a:	481b      	ldr	r0, [pc, #108]	; (8007188 <HAL_HCD_MspInit+0xc0>)
 800711c:	f7fa fc88 	bl	8001a30 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 8007120:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8007124:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007126:	2302      	movs	r3, #2
 8007128:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800712a:	2300      	movs	r3, #0
 800712c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800712e:	2300      	movs	r3, #0
 8007130:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8007132:	230a      	movs	r3, #10
 8007134:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007136:	f107 0314 	add.w	r3, r7, #20
 800713a:	4619      	mov	r1, r3
 800713c:	4812      	ldr	r0, [pc, #72]	; (8007188 <HAL_HCD_MspInit+0xc0>)
 800713e:	f7fa fc77 	bl	8001a30 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8007142:	4b10      	ldr	r3, [pc, #64]	; (8007184 <HAL_HCD_MspInit+0xbc>)
 8007144:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007146:	4a0f      	ldr	r2, [pc, #60]	; (8007184 <HAL_HCD_MspInit+0xbc>)
 8007148:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800714c:	6353      	str	r3, [r2, #52]	; 0x34
 800714e:	2300      	movs	r3, #0
 8007150:	60fb      	str	r3, [r7, #12]
 8007152:	4b0c      	ldr	r3, [pc, #48]	; (8007184 <HAL_HCD_MspInit+0xbc>)
 8007154:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007156:	4a0b      	ldr	r2, [pc, #44]	; (8007184 <HAL_HCD_MspInit+0xbc>)
 8007158:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800715c:	6453      	str	r3, [r2, #68]	; 0x44
 800715e:	4b09      	ldr	r3, [pc, #36]	; (8007184 <HAL_HCD_MspInit+0xbc>)
 8007160:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007162:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007166:	60fb      	str	r3, [r7, #12]
 8007168:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800716a:	2200      	movs	r2, #0
 800716c:	2100      	movs	r1, #0
 800716e:	2043      	movs	r0, #67	; 0x43
 8007170:	f7fa fc27 	bl	80019c2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8007174:	2043      	movs	r0, #67	; 0x43
 8007176:	f7fa fc40 	bl	80019fa <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800717a:	bf00      	nop
 800717c:	3728      	adds	r7, #40	; 0x28
 800717e:	46bd      	mov	sp, r7
 8007180:	bd80      	pop	{r7, pc}
 8007182:	bf00      	nop
 8007184:	40023800 	.word	0x40023800
 8007188:	40020000 	.word	0x40020000

0800718c <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 800718c:	b580      	push	{r7, lr}
 800718e:	b082      	sub	sp, #8
 8007190:	af00      	add	r7, sp, #0
 8007192:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800719a:	4618      	mov	r0, r3
 800719c:	f7ff fba3 	bl	80068e6 <USBH_LL_IncTimer>
}
 80071a0:	bf00      	nop
 80071a2:	3708      	adds	r7, #8
 80071a4:	46bd      	mov	sp, r7
 80071a6:	bd80      	pop	{r7, pc}

080071a8 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 80071a8:	b580      	push	{r7, lr}
 80071aa:	b082      	sub	sp, #8
 80071ac:	af00      	add	r7, sp, #0
 80071ae:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 80071b0:	687b      	ldr	r3, [r7, #4]
 80071b2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80071b6:	4618      	mov	r0, r3
 80071b8:	f7ff fbdb 	bl	8006972 <USBH_LL_Connect>
}
 80071bc:	bf00      	nop
 80071be:	3708      	adds	r7, #8
 80071c0:	46bd      	mov	sp, r7
 80071c2:	bd80      	pop	{r7, pc}

080071c4 <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 80071c4:	b580      	push	{r7, lr}
 80071c6:	b082      	sub	sp, #8
 80071c8:	af00      	add	r7, sp, #0
 80071ca:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 80071cc:	687b      	ldr	r3, [r7, #4]
 80071ce:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80071d2:	4618      	mov	r0, r3
 80071d4:	f7ff fbf3 	bl	80069be <USBH_LL_Disconnect>
}
 80071d8:	bf00      	nop
 80071da:	3708      	adds	r7, #8
 80071dc:	46bd      	mov	sp, r7
 80071de:	bd80      	pop	{r7, pc}

080071e0 <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 80071e0:	b480      	push	{r7}
 80071e2:	b083      	sub	sp, #12
 80071e4:	af00      	add	r7, sp, #0
 80071e6:	6078      	str	r0, [r7, #4]
 80071e8:	460b      	mov	r3, r1
 80071ea:	70fb      	strb	r3, [r7, #3]
 80071ec:	4613      	mov	r3, r2
 80071ee:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
#endif
}
 80071f0:	bf00      	nop
 80071f2:	370c      	adds	r7, #12
 80071f4:	46bd      	mov	sp, r7
 80071f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071fa:	4770      	bx	lr

080071fc <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 80071fc:	b580      	push	{r7, lr}
 80071fe:	b082      	sub	sp, #8
 8007200:	af00      	add	r7, sp, #0
 8007202:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 8007204:	687b      	ldr	r3, [r7, #4]
 8007206:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800720a:	4618      	mov	r0, r3
 800720c:	f7ff fb95 	bl	800693a <USBH_LL_PortEnabled>
} 
 8007210:	bf00      	nop
 8007212:	3708      	adds	r7, #8
 8007214:	46bd      	mov	sp, r7
 8007216:	bd80      	pop	{r7, pc}

08007218 <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8007218:	b580      	push	{r7, lr}
 800721a:	b082      	sub	sp, #8
 800721c:	af00      	add	r7, sp, #0
 800721e:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007226:	4618      	mov	r0, r3
 8007228:	f7ff fb95 	bl	8006956 <USBH_LL_PortDisabled>
} 
 800722c:	bf00      	nop
 800722e:	3708      	adds	r7, #8
 8007230:	46bd      	mov	sp, r7
 8007232:	bd80      	pop	{r7, pc}

08007234 <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 8007234:	b580      	push	{r7, lr}
 8007236:	b082      	sub	sp, #8
 8007238:	af00      	add	r7, sp, #0
 800723a:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	f893 33c0 	ldrb.w	r3, [r3, #960]	; 0x3c0
 8007242:	2b01      	cmp	r3, #1
 8007244:	d12a      	bne.n	800729c <USBH_LL_Init+0x68>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 8007246:	4a18      	ldr	r2, [pc, #96]	; (80072a8 <USBH_LL_Init+0x74>)
 8007248:	687b      	ldr	r3, [r7, #4]
 800724a:	f8c2 32c0 	str.w	r3, [r2, #704]	; 0x2c0
  phost->pData = &hhcd_USB_OTG_FS;
 800724e:	687b      	ldr	r3, [r7, #4]
 8007250:	4a15      	ldr	r2, [pc, #84]	; (80072a8 <USBH_LL_Init+0x74>)
 8007252:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8007256:	4b14      	ldr	r3, [pc, #80]	; (80072a8 <USBH_LL_Init+0x74>)
 8007258:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800725c:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 800725e:	4b12      	ldr	r3, [pc, #72]	; (80072a8 <USBH_LL_Init+0x74>)
 8007260:	2208      	movs	r2, #8
 8007262:	609a      	str	r2, [r3, #8]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 8007264:	4b10      	ldr	r3, [pc, #64]	; (80072a8 <USBH_LL_Init+0x74>)
 8007266:	2201      	movs	r2, #1
 8007268:	60da      	str	r2, [r3, #12]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800726a:	4b0f      	ldr	r3, [pc, #60]	; (80072a8 <USBH_LL_Init+0x74>)
 800726c:	2200      	movs	r2, #0
 800726e:	611a      	str	r2, [r3, #16]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 8007270:	4b0d      	ldr	r3, [pc, #52]	; (80072a8 <USBH_LL_Init+0x74>)
 8007272:	2202      	movs	r2, #2
 8007274:	619a      	str	r2, [r3, #24]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8007276:	4b0c      	ldr	r3, [pc, #48]	; (80072a8 <USBH_LL_Init+0x74>)
 8007278:	2200      	movs	r2, #0
 800727a:	61da      	str	r2, [r3, #28]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 800727c:	480a      	ldr	r0, [pc, #40]	; (80072a8 <USBH_LL_Init+0x74>)
 800727e:	f7fa fd8a 	bl	8001d96 <HAL_HCD_Init>
 8007282:	4603      	mov	r3, r0
 8007284:	2b00      	cmp	r3, #0
 8007286:	d001      	beq.n	800728c <USBH_LL_Init+0x58>
  {
    Error_Handler( );
 8007288:	f7f9 fc7c 	bl	8000b84 <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 800728c:	4806      	ldr	r0, [pc, #24]	; (80072a8 <USBH_LL_Init+0x74>)
 800728e:	f7fb f977 	bl	8002580 <HAL_HCD_GetCurrentFrame>
 8007292:	4603      	mov	r3, r0
 8007294:	4619      	mov	r1, r3
 8007296:	6878      	ldr	r0, [r7, #4]
 8007298:	f7ff fb16 	bl	80068c8 <USBH_LL_SetTimer>
  }
  return USBH_OK;
 800729c:	2300      	movs	r3, #0
}
 800729e:	4618      	mov	r0, r3
 80072a0:	3708      	adds	r7, #8
 80072a2:	46bd      	mov	sp, r7
 80072a4:	bd80      	pop	{r7, pc}
 80072a6:	bf00      	nop
 80072a8:	200009e4 	.word	0x200009e4

080072ac <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 80072ac:	b580      	push	{r7, lr}
 80072ae:	b084      	sub	sp, #16
 80072b0:	af00      	add	r7, sp, #0
 80072b2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80072b4:	2300      	movs	r3, #0
 80072b6:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80072b8:	2300      	movs	r3, #0
 80072ba:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 80072bc:	687b      	ldr	r3, [r7, #4]
 80072be:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 80072c2:	4618      	mov	r0, r3
 80072c4:	f7fb f8f2 	bl	80024ac <HAL_HCD_Start>
 80072c8:	4603      	mov	r3, r0
 80072ca:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 80072cc:	7bfb      	ldrb	r3, [r7, #15]
 80072ce:	4618      	mov	r0, r3
 80072d0:	f000 f912 	bl	80074f8 <USBH_Get_USB_Status>
 80072d4:	4603      	mov	r3, r0
 80072d6:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 80072d8:	7bbb      	ldrb	r3, [r7, #14]
}
 80072da:	4618      	mov	r0, r3
 80072dc:	3710      	adds	r7, #16
 80072de:	46bd      	mov	sp, r7
 80072e0:	bd80      	pop	{r7, pc}

080072e2 <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 80072e2:	b580      	push	{r7, lr}
 80072e4:	b084      	sub	sp, #16
 80072e6:	af00      	add	r7, sp, #0
 80072e8:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80072ea:	2300      	movs	r3, #0
 80072ec:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80072ee:	2300      	movs	r3, #0
 80072f0:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 80072f2:	687b      	ldr	r3, [r7, #4]
 80072f4:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 80072f8:	4618      	mov	r0, r3
 80072fa:	f7fb f8fa 	bl	80024f2 <HAL_HCD_Stop>
 80072fe:	4603      	mov	r3, r0
 8007300:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8007302:	7bfb      	ldrb	r3, [r7, #15]
 8007304:	4618      	mov	r0, r3
 8007306:	f000 f8f7 	bl	80074f8 <USBH_Get_USB_Status>
 800730a:	4603      	mov	r3, r0
 800730c:	73bb      	strb	r3, [r7, #14]
 
  return usb_status;
 800730e:	7bbb      	ldrb	r3, [r7, #14]
}
 8007310:	4618      	mov	r0, r3
 8007312:	3710      	adds	r7, #16
 8007314:	46bd      	mov	sp, r7
 8007316:	bd80      	pop	{r7, pc}

08007318 <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8007318:	b580      	push	{r7, lr}
 800731a:	b082      	sub	sp, #8
 800731c:	af00      	add	r7, sp, #0
 800731e:	6078      	str	r0, [r7, #4]
 8007320:	460b      	mov	r3, r1
 8007322:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 8007324:	687b      	ldr	r3, [r7, #4]
 8007326:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800732a:	78fa      	ldrb	r2, [r7, #3]
 800732c:	4611      	mov	r1, r2
 800732e:	4618      	mov	r0, r3
 8007330:	f7fb f911 	bl	8002556 <HAL_HCD_HC_GetXferCount>
 8007334:	4603      	mov	r3, r0
}
 8007336:	4618      	mov	r0, r3
 8007338:	3708      	adds	r7, #8
 800733a:	46bd      	mov	sp, r7
 800733c:	bd80      	pop	{r7, pc}

0800733e <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800733e:	b590      	push	{r4, r7, lr}
 8007340:	b089      	sub	sp, #36	; 0x24
 8007342:	af04      	add	r7, sp, #16
 8007344:	6078      	str	r0, [r7, #4]
 8007346:	4608      	mov	r0, r1
 8007348:	4611      	mov	r1, r2
 800734a:	461a      	mov	r2, r3
 800734c:	4603      	mov	r3, r0
 800734e:	70fb      	strb	r3, [r7, #3]
 8007350:	460b      	mov	r3, r1
 8007352:	70bb      	strb	r3, [r7, #2]
 8007354:	4613      	mov	r3, r2
 8007356:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007358:	2300      	movs	r3, #0
 800735a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800735c:	2300      	movs	r3, #0
 800735e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 8007360:	687b      	ldr	r3, [r7, #4]
 8007362:	f8d3 03c4 	ldr.w	r0, [r3, #964]	; 0x3c4
 8007366:	787c      	ldrb	r4, [r7, #1]
 8007368:	78ba      	ldrb	r2, [r7, #2]
 800736a:	78f9      	ldrb	r1, [r7, #3]
 800736c:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800736e:	9302      	str	r3, [sp, #8]
 8007370:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8007374:	9301      	str	r3, [sp, #4]
 8007376:	f897 3020 	ldrb.w	r3, [r7, #32]
 800737a:	9300      	str	r3, [sp, #0]
 800737c:	4623      	mov	r3, r4
 800737e:	f7fa fd6c 	bl	8001e5a <HAL_HCD_HC_Init>
 8007382:	4603      	mov	r3, r0
 8007384:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 8007386:	7bfb      	ldrb	r3, [r7, #15]
 8007388:	4618      	mov	r0, r3
 800738a:	f000 f8b5 	bl	80074f8 <USBH_Get_USB_Status>
 800738e:	4603      	mov	r3, r0
 8007390:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 8007392:	7bbb      	ldrb	r3, [r7, #14]
}
 8007394:	4618      	mov	r0, r3
 8007396:	3714      	adds	r7, #20
 8007398:	46bd      	mov	sp, r7
 800739a:	bd90      	pop	{r4, r7, pc}

0800739c <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800739c:	b580      	push	{r7, lr}
 800739e:	b084      	sub	sp, #16
 80073a0:	af00      	add	r7, sp, #0
 80073a2:	6078      	str	r0, [r7, #4]
 80073a4:	460b      	mov	r3, r1
 80073a6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80073a8:	2300      	movs	r3, #0
 80073aa:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80073ac:	2300      	movs	r3, #0
 80073ae:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 80073b0:	687b      	ldr	r3, [r7, #4]
 80073b2:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 80073b6:	78fa      	ldrb	r2, [r7, #3]
 80073b8:	4611      	mov	r1, r2
 80073ba:	4618      	mov	r0, r3
 80073bc:	f7fa fde5 	bl	8001f8a <HAL_HCD_HC_Halt>
 80073c0:	4603      	mov	r3, r0
 80073c2:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 80073c4:	7bfb      	ldrb	r3, [r7, #15]
 80073c6:	4618      	mov	r0, r3
 80073c8:	f000 f896 	bl	80074f8 <USBH_Get_USB_Status>
 80073cc:	4603      	mov	r3, r0
 80073ce:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 80073d0:	7bbb      	ldrb	r3, [r7, #14]
}
 80073d2:	4618      	mov	r0, r3
 80073d4:	3710      	adds	r7, #16
 80073d6:	46bd      	mov	sp, r7
 80073d8:	bd80      	pop	{r7, pc}

080073da <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 80073da:	b590      	push	{r4, r7, lr}
 80073dc:	b089      	sub	sp, #36	; 0x24
 80073de:	af04      	add	r7, sp, #16
 80073e0:	6078      	str	r0, [r7, #4]
 80073e2:	4608      	mov	r0, r1
 80073e4:	4611      	mov	r1, r2
 80073e6:	461a      	mov	r2, r3
 80073e8:	4603      	mov	r3, r0
 80073ea:	70fb      	strb	r3, [r7, #3]
 80073ec:	460b      	mov	r3, r1
 80073ee:	70bb      	strb	r3, [r7, #2]
 80073f0:	4613      	mov	r3, r2
 80073f2:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80073f4:	2300      	movs	r3, #0
 80073f6:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80073f8:	2300      	movs	r3, #0
 80073fa:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 80073fc:	687b      	ldr	r3, [r7, #4]
 80073fe:	f8d3 03c4 	ldr.w	r0, [r3, #964]	; 0x3c4
 8007402:	787c      	ldrb	r4, [r7, #1]
 8007404:	78ba      	ldrb	r2, [r7, #2]
 8007406:	78f9      	ldrb	r1, [r7, #3]
 8007408:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800740c:	9303      	str	r3, [sp, #12]
 800740e:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8007410:	9302      	str	r3, [sp, #8]
 8007412:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007414:	9301      	str	r3, [sp, #4]
 8007416:	f897 3020 	ldrb.w	r3, [r7, #32]
 800741a:	9300      	str	r3, [sp, #0]
 800741c:	4623      	mov	r3, r4
 800741e:	f7fa fdd7 	bl	8001fd0 <HAL_HCD_HC_SubmitRequest>
 8007422:	4603      	mov	r3, r0
 8007424:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 8007426:	7bfb      	ldrb	r3, [r7, #15]
 8007428:	4618      	mov	r0, r3
 800742a:	f000 f865 	bl	80074f8 <USBH_Get_USB_Status>
 800742e:	4603      	mov	r3, r0
 8007430:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 8007432:	7bbb      	ldrb	r3, [r7, #14]
}
 8007434:	4618      	mov	r0, r3
 8007436:	3714      	adds	r7, #20
 8007438:	46bd      	mov	sp, r7
 800743a:	bd90      	pop	{r4, r7, pc}

0800743c <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800743c:	b580      	push	{r7, lr}
 800743e:	b082      	sub	sp, #8
 8007440:	af00      	add	r7, sp, #0
 8007442:	6078      	str	r0, [r7, #4]
 8007444:	460b      	mov	r3, r1
 8007446:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 8007448:	687b      	ldr	r3, [r7, #4]
 800744a:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800744e:	78fa      	ldrb	r2, [r7, #3]
 8007450:	4611      	mov	r1, r2
 8007452:	4618      	mov	r0, r3
 8007454:	f7fb f86a 	bl	800252c <HAL_HCD_HC_GetURBState>
 8007458:	4603      	mov	r3, r0
}
 800745a:	4618      	mov	r0, r3
 800745c:	3708      	adds	r7, #8
 800745e:	46bd      	mov	sp, r7
 8007460:	bd80      	pop	{r7, pc}

08007462 <USBH_LL_DriverVBUS>:
  *           0 : VBUS Active
  *           1 : VBUS Inactive
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 8007462:	b580      	push	{r7, lr}
 8007464:	b082      	sub	sp, #8
 8007466:	af00      	add	r7, sp, #0
 8007468:	6078      	str	r0, [r7, #4]
 800746a:	460b      	mov	r3, r1
 800746c:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_FS) {
 800746e:	687b      	ldr	r3, [r7, #4]
 8007470:	f893 33c0 	ldrb.w	r3, [r3, #960]	; 0x3c0
 8007474:	2b01      	cmp	r3, #1
 8007476:	d103      	bne.n	8007480 <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusFS(state);
 8007478:	78fb      	ldrb	r3, [r7, #3]
 800747a:	4618      	mov	r0, r3
 800747c:	f000 f868 	bl	8007550 <MX_DriverVbusFS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 8007480:	20c8      	movs	r0, #200	; 0xc8
 8007482:	f7fa f9a1 	bl	80017c8 <HAL_Delay>
  return USBH_OK;
 8007486:	2300      	movs	r3, #0
}
 8007488:	4618      	mov	r0, r3
 800748a:	3708      	adds	r7, #8
 800748c:	46bd      	mov	sp, r7
 800748e:	bd80      	pop	{r7, pc}

08007490 <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 8007490:	b480      	push	{r7}
 8007492:	b085      	sub	sp, #20
 8007494:	af00      	add	r7, sp, #0
 8007496:	6078      	str	r0, [r7, #4]
 8007498:	460b      	mov	r3, r1
 800749a:	70fb      	strb	r3, [r7, #3]
 800749c:	4613      	mov	r3, r2
 800749e:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 80074a0:	687b      	ldr	r3, [r7, #4]
 80074a2:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 80074a6:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 80074a8:	78fa      	ldrb	r2, [r7, #3]
 80074aa:	68f9      	ldr	r1, [r7, #12]
 80074ac:	4613      	mov	r3, r2
 80074ae:	009b      	lsls	r3, r3, #2
 80074b0:	4413      	add	r3, r2
 80074b2:	00db      	lsls	r3, r3, #3
 80074b4:	440b      	add	r3, r1
 80074b6:	333b      	adds	r3, #59	; 0x3b
 80074b8:	781b      	ldrb	r3, [r3, #0]
 80074ba:	2b00      	cmp	r3, #0
 80074bc:	d00a      	beq.n	80074d4 <USBH_LL_SetToggle+0x44>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 80074be:	78fa      	ldrb	r2, [r7, #3]
 80074c0:	68f9      	ldr	r1, [r7, #12]
 80074c2:	4613      	mov	r3, r2
 80074c4:	009b      	lsls	r3, r3, #2
 80074c6:	4413      	add	r3, r2
 80074c8:	00db      	lsls	r3, r3, #3
 80074ca:	440b      	add	r3, r1
 80074cc:	3350      	adds	r3, #80	; 0x50
 80074ce:	78ba      	ldrb	r2, [r7, #2]
 80074d0:	701a      	strb	r2, [r3, #0]
 80074d2:	e009      	b.n	80074e8 <USBH_LL_SetToggle+0x58>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 80074d4:	78fa      	ldrb	r2, [r7, #3]
 80074d6:	68f9      	ldr	r1, [r7, #12]
 80074d8:	4613      	mov	r3, r2
 80074da:	009b      	lsls	r3, r3, #2
 80074dc:	4413      	add	r3, r2
 80074de:	00db      	lsls	r3, r3, #3
 80074e0:	440b      	add	r3, r1
 80074e2:	3351      	adds	r3, #81	; 0x51
 80074e4:	78ba      	ldrb	r2, [r7, #2]
 80074e6:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 80074e8:	2300      	movs	r3, #0
}
 80074ea:	4618      	mov	r0, r3
 80074ec:	3714      	adds	r7, #20
 80074ee:	46bd      	mov	sp, r7
 80074f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074f4:	4770      	bx	lr
	...

080074f8 <USBH_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 80074f8:	b480      	push	{r7}
 80074fa:	b085      	sub	sp, #20
 80074fc:	af00      	add	r7, sp, #0
 80074fe:	4603      	mov	r3, r0
 8007500:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8007502:	2300      	movs	r3, #0
 8007504:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8007506:	79fb      	ldrb	r3, [r7, #7]
 8007508:	2b03      	cmp	r3, #3
 800750a:	d817      	bhi.n	800753c <USBH_Get_USB_Status+0x44>
 800750c:	a201      	add	r2, pc, #4	; (adr r2, 8007514 <USBH_Get_USB_Status+0x1c>)
 800750e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007512:	bf00      	nop
 8007514:	08007525 	.word	0x08007525
 8007518:	0800752b 	.word	0x0800752b
 800751c:	08007531 	.word	0x08007531
 8007520:	08007537 	.word	0x08007537
  {
    case HAL_OK :
      usb_status = USBH_OK;
 8007524:	2300      	movs	r3, #0
 8007526:	73fb      	strb	r3, [r7, #15]
    break;
 8007528:	e00b      	b.n	8007542 <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 800752a:	2302      	movs	r3, #2
 800752c:	73fb      	strb	r3, [r7, #15]
    break;
 800752e:	e008      	b.n	8007542 <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 8007530:	2301      	movs	r3, #1
 8007532:	73fb      	strb	r3, [r7, #15]
    break;
 8007534:	e005      	b.n	8007542 <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 8007536:	2302      	movs	r3, #2
 8007538:	73fb      	strb	r3, [r7, #15]
    break;
 800753a:	e002      	b.n	8007542 <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 800753c:	2302      	movs	r3, #2
 800753e:	73fb      	strb	r3, [r7, #15]
    break;
 8007540:	bf00      	nop
  }
  return usb_status;
 8007542:	7bfb      	ldrb	r3, [r7, #15]
}
 8007544:	4618      	mov	r0, r3
 8007546:	3714      	adds	r7, #20
 8007548:	46bd      	mov	sp, r7
 800754a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800754e:	4770      	bx	lr

08007550 <MX_DriverVbusFS>:
  *          This parameter can be one of the these values:
  *           - 0 : VBUS Active
  *           - 1 : VBUS Inactive
  */
void MX_DriverVbusFS(uint8_t state)
{ 
 8007550:	b580      	push	{r7, lr}
 8007552:	b084      	sub	sp, #16
 8007554:	af00      	add	r7, sp, #0
 8007556:	4603      	mov	r3, r0
 8007558:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state; 
 800755a:	79fb      	ldrb	r3, [r7, #7]
 800755c:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_FS */
  if(state == 0)
 800755e:	79fb      	ldrb	r3, [r7, #7]
 8007560:	2b00      	cmp	r3, #0
 8007562:	d102      	bne.n	800756a <MX_DriverVbusFS+0x1a>
  {
    /* Drive high Charge pump */ 	     
    data = GPIO_PIN_SET;
 8007564:	2301      	movs	r3, #1
 8007566:	73fb      	strb	r3, [r7, #15]
 8007568:	e001      	b.n	800756e <MX_DriverVbusFS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_RESET;
 800756a:	2300      	movs	r3, #0
 800756c:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_FS */
  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_0,(GPIO_PinState)data);
 800756e:	7bfb      	ldrb	r3, [r7, #15]
 8007570:	461a      	mov	r2, r3
 8007572:	2101      	movs	r1, #1
 8007574:	4803      	ldr	r0, [pc, #12]	; (8007584 <MX_DriverVbusFS+0x34>)
 8007576:	f7fa fbf5 	bl	8001d64 <HAL_GPIO_WritePin>
}
 800757a:	bf00      	nop
 800757c:	3710      	adds	r7, #16
 800757e:	46bd      	mov	sp, r7
 8007580:	bd80      	pop	{r7, pc}
 8007582:	bf00      	nop
 8007584:	40020800 	.word	0x40020800

08007588 <__errno>:
 8007588:	4b01      	ldr	r3, [pc, #4]	; (8007590 <__errno+0x8>)
 800758a:	6818      	ldr	r0, [r3, #0]
 800758c:	4770      	bx	lr
 800758e:	bf00      	nop
 8007590:	2000002c 	.word	0x2000002c

08007594 <__libc_init_array>:
 8007594:	b570      	push	{r4, r5, r6, lr}
 8007596:	4e0d      	ldr	r6, [pc, #52]	; (80075cc <__libc_init_array+0x38>)
 8007598:	4c0d      	ldr	r4, [pc, #52]	; (80075d0 <__libc_init_array+0x3c>)
 800759a:	1ba4      	subs	r4, r4, r6
 800759c:	10a4      	asrs	r4, r4, #2
 800759e:	2500      	movs	r5, #0
 80075a0:	42a5      	cmp	r5, r4
 80075a2:	d109      	bne.n	80075b8 <__libc_init_array+0x24>
 80075a4:	4e0b      	ldr	r6, [pc, #44]	; (80075d4 <__libc_init_array+0x40>)
 80075a6:	4c0c      	ldr	r4, [pc, #48]	; (80075d8 <__libc_init_array+0x44>)
 80075a8:	f000 f8ea 	bl	8007780 <_init>
 80075ac:	1ba4      	subs	r4, r4, r6
 80075ae:	10a4      	asrs	r4, r4, #2
 80075b0:	2500      	movs	r5, #0
 80075b2:	42a5      	cmp	r5, r4
 80075b4:	d105      	bne.n	80075c2 <__libc_init_array+0x2e>
 80075b6:	bd70      	pop	{r4, r5, r6, pc}
 80075b8:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80075bc:	4798      	blx	r3
 80075be:	3501      	adds	r5, #1
 80075c0:	e7ee      	b.n	80075a0 <__libc_init_array+0xc>
 80075c2:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80075c6:	4798      	blx	r3
 80075c8:	3501      	adds	r5, #1
 80075ca:	e7f2      	b.n	80075b2 <__libc_init_array+0x1e>
 80075cc:	080077bc 	.word	0x080077bc
 80075d0:	080077bc 	.word	0x080077bc
 80075d4:	080077bc 	.word	0x080077bc
 80075d8:	080077c0 	.word	0x080077c0

080075dc <malloc>:
 80075dc:	4b02      	ldr	r3, [pc, #8]	; (80075e8 <malloc+0xc>)
 80075de:	4601      	mov	r1, r0
 80075e0:	6818      	ldr	r0, [r3, #0]
 80075e2:	f000 b861 	b.w	80076a8 <_malloc_r>
 80075e6:	bf00      	nop
 80075e8:	2000002c 	.word	0x2000002c

080075ec <free>:
 80075ec:	4b02      	ldr	r3, [pc, #8]	; (80075f8 <free+0xc>)
 80075ee:	4601      	mov	r1, r0
 80075f0:	6818      	ldr	r0, [r3, #0]
 80075f2:	f000 b80b 	b.w	800760c <_free_r>
 80075f6:	bf00      	nop
 80075f8:	2000002c 	.word	0x2000002c

080075fc <memset>:
 80075fc:	4402      	add	r2, r0
 80075fe:	4603      	mov	r3, r0
 8007600:	4293      	cmp	r3, r2
 8007602:	d100      	bne.n	8007606 <memset+0xa>
 8007604:	4770      	bx	lr
 8007606:	f803 1b01 	strb.w	r1, [r3], #1
 800760a:	e7f9      	b.n	8007600 <memset+0x4>

0800760c <_free_r>:
 800760c:	b538      	push	{r3, r4, r5, lr}
 800760e:	4605      	mov	r5, r0
 8007610:	2900      	cmp	r1, #0
 8007612:	d045      	beq.n	80076a0 <_free_r+0x94>
 8007614:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007618:	1f0c      	subs	r4, r1, #4
 800761a:	2b00      	cmp	r3, #0
 800761c:	bfb8      	it	lt
 800761e:	18e4      	addlt	r4, r4, r3
 8007620:	f000 f8ac 	bl	800777c <__malloc_lock>
 8007624:	4a1f      	ldr	r2, [pc, #124]	; (80076a4 <_free_r+0x98>)
 8007626:	6813      	ldr	r3, [r2, #0]
 8007628:	4610      	mov	r0, r2
 800762a:	b933      	cbnz	r3, 800763a <_free_r+0x2e>
 800762c:	6063      	str	r3, [r4, #4]
 800762e:	6014      	str	r4, [r2, #0]
 8007630:	4628      	mov	r0, r5
 8007632:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007636:	f000 b8a2 	b.w	800777e <__malloc_unlock>
 800763a:	42a3      	cmp	r3, r4
 800763c:	d90c      	bls.n	8007658 <_free_r+0x4c>
 800763e:	6821      	ldr	r1, [r4, #0]
 8007640:	1862      	adds	r2, r4, r1
 8007642:	4293      	cmp	r3, r2
 8007644:	bf04      	itt	eq
 8007646:	681a      	ldreq	r2, [r3, #0]
 8007648:	685b      	ldreq	r3, [r3, #4]
 800764a:	6063      	str	r3, [r4, #4]
 800764c:	bf04      	itt	eq
 800764e:	1852      	addeq	r2, r2, r1
 8007650:	6022      	streq	r2, [r4, #0]
 8007652:	6004      	str	r4, [r0, #0]
 8007654:	e7ec      	b.n	8007630 <_free_r+0x24>
 8007656:	4613      	mov	r3, r2
 8007658:	685a      	ldr	r2, [r3, #4]
 800765a:	b10a      	cbz	r2, 8007660 <_free_r+0x54>
 800765c:	42a2      	cmp	r2, r4
 800765e:	d9fa      	bls.n	8007656 <_free_r+0x4a>
 8007660:	6819      	ldr	r1, [r3, #0]
 8007662:	1858      	adds	r0, r3, r1
 8007664:	42a0      	cmp	r0, r4
 8007666:	d10b      	bne.n	8007680 <_free_r+0x74>
 8007668:	6820      	ldr	r0, [r4, #0]
 800766a:	4401      	add	r1, r0
 800766c:	1858      	adds	r0, r3, r1
 800766e:	4282      	cmp	r2, r0
 8007670:	6019      	str	r1, [r3, #0]
 8007672:	d1dd      	bne.n	8007630 <_free_r+0x24>
 8007674:	6810      	ldr	r0, [r2, #0]
 8007676:	6852      	ldr	r2, [r2, #4]
 8007678:	605a      	str	r2, [r3, #4]
 800767a:	4401      	add	r1, r0
 800767c:	6019      	str	r1, [r3, #0]
 800767e:	e7d7      	b.n	8007630 <_free_r+0x24>
 8007680:	d902      	bls.n	8007688 <_free_r+0x7c>
 8007682:	230c      	movs	r3, #12
 8007684:	602b      	str	r3, [r5, #0]
 8007686:	e7d3      	b.n	8007630 <_free_r+0x24>
 8007688:	6820      	ldr	r0, [r4, #0]
 800768a:	1821      	adds	r1, r4, r0
 800768c:	428a      	cmp	r2, r1
 800768e:	bf04      	itt	eq
 8007690:	6811      	ldreq	r1, [r2, #0]
 8007692:	6852      	ldreq	r2, [r2, #4]
 8007694:	6062      	str	r2, [r4, #4]
 8007696:	bf04      	itt	eq
 8007698:	1809      	addeq	r1, r1, r0
 800769a:	6021      	streq	r1, [r4, #0]
 800769c:	605c      	str	r4, [r3, #4]
 800769e:	e7c7      	b.n	8007630 <_free_r+0x24>
 80076a0:	bd38      	pop	{r3, r4, r5, pc}
 80076a2:	bf00      	nop
 80076a4:	200000c0 	.word	0x200000c0

080076a8 <_malloc_r>:
 80076a8:	b570      	push	{r4, r5, r6, lr}
 80076aa:	1ccd      	adds	r5, r1, #3
 80076ac:	f025 0503 	bic.w	r5, r5, #3
 80076b0:	3508      	adds	r5, #8
 80076b2:	2d0c      	cmp	r5, #12
 80076b4:	bf38      	it	cc
 80076b6:	250c      	movcc	r5, #12
 80076b8:	2d00      	cmp	r5, #0
 80076ba:	4606      	mov	r6, r0
 80076bc:	db01      	blt.n	80076c2 <_malloc_r+0x1a>
 80076be:	42a9      	cmp	r1, r5
 80076c0:	d903      	bls.n	80076ca <_malloc_r+0x22>
 80076c2:	230c      	movs	r3, #12
 80076c4:	6033      	str	r3, [r6, #0]
 80076c6:	2000      	movs	r0, #0
 80076c8:	bd70      	pop	{r4, r5, r6, pc}
 80076ca:	f000 f857 	bl	800777c <__malloc_lock>
 80076ce:	4a21      	ldr	r2, [pc, #132]	; (8007754 <_malloc_r+0xac>)
 80076d0:	6814      	ldr	r4, [r2, #0]
 80076d2:	4621      	mov	r1, r4
 80076d4:	b991      	cbnz	r1, 80076fc <_malloc_r+0x54>
 80076d6:	4c20      	ldr	r4, [pc, #128]	; (8007758 <_malloc_r+0xb0>)
 80076d8:	6823      	ldr	r3, [r4, #0]
 80076da:	b91b      	cbnz	r3, 80076e4 <_malloc_r+0x3c>
 80076dc:	4630      	mov	r0, r6
 80076de:	f000 f83d 	bl	800775c <_sbrk_r>
 80076e2:	6020      	str	r0, [r4, #0]
 80076e4:	4629      	mov	r1, r5
 80076e6:	4630      	mov	r0, r6
 80076e8:	f000 f838 	bl	800775c <_sbrk_r>
 80076ec:	1c43      	adds	r3, r0, #1
 80076ee:	d124      	bne.n	800773a <_malloc_r+0x92>
 80076f0:	230c      	movs	r3, #12
 80076f2:	6033      	str	r3, [r6, #0]
 80076f4:	4630      	mov	r0, r6
 80076f6:	f000 f842 	bl	800777e <__malloc_unlock>
 80076fa:	e7e4      	b.n	80076c6 <_malloc_r+0x1e>
 80076fc:	680b      	ldr	r3, [r1, #0]
 80076fe:	1b5b      	subs	r3, r3, r5
 8007700:	d418      	bmi.n	8007734 <_malloc_r+0x8c>
 8007702:	2b0b      	cmp	r3, #11
 8007704:	d90f      	bls.n	8007726 <_malloc_r+0x7e>
 8007706:	600b      	str	r3, [r1, #0]
 8007708:	50cd      	str	r5, [r1, r3]
 800770a:	18cc      	adds	r4, r1, r3
 800770c:	4630      	mov	r0, r6
 800770e:	f000 f836 	bl	800777e <__malloc_unlock>
 8007712:	f104 000b 	add.w	r0, r4, #11
 8007716:	1d23      	adds	r3, r4, #4
 8007718:	f020 0007 	bic.w	r0, r0, #7
 800771c:	1ac3      	subs	r3, r0, r3
 800771e:	d0d3      	beq.n	80076c8 <_malloc_r+0x20>
 8007720:	425a      	negs	r2, r3
 8007722:	50e2      	str	r2, [r4, r3]
 8007724:	e7d0      	b.n	80076c8 <_malloc_r+0x20>
 8007726:	428c      	cmp	r4, r1
 8007728:	684b      	ldr	r3, [r1, #4]
 800772a:	bf16      	itet	ne
 800772c:	6063      	strne	r3, [r4, #4]
 800772e:	6013      	streq	r3, [r2, #0]
 8007730:	460c      	movne	r4, r1
 8007732:	e7eb      	b.n	800770c <_malloc_r+0x64>
 8007734:	460c      	mov	r4, r1
 8007736:	6849      	ldr	r1, [r1, #4]
 8007738:	e7cc      	b.n	80076d4 <_malloc_r+0x2c>
 800773a:	1cc4      	adds	r4, r0, #3
 800773c:	f024 0403 	bic.w	r4, r4, #3
 8007740:	42a0      	cmp	r0, r4
 8007742:	d005      	beq.n	8007750 <_malloc_r+0xa8>
 8007744:	1a21      	subs	r1, r4, r0
 8007746:	4630      	mov	r0, r6
 8007748:	f000 f808 	bl	800775c <_sbrk_r>
 800774c:	3001      	adds	r0, #1
 800774e:	d0cf      	beq.n	80076f0 <_malloc_r+0x48>
 8007750:	6025      	str	r5, [r4, #0]
 8007752:	e7db      	b.n	800770c <_malloc_r+0x64>
 8007754:	200000c0 	.word	0x200000c0
 8007758:	200000c4 	.word	0x200000c4

0800775c <_sbrk_r>:
 800775c:	b538      	push	{r3, r4, r5, lr}
 800775e:	4c06      	ldr	r4, [pc, #24]	; (8007778 <_sbrk_r+0x1c>)
 8007760:	2300      	movs	r3, #0
 8007762:	4605      	mov	r5, r0
 8007764:	4608      	mov	r0, r1
 8007766:	6023      	str	r3, [r4, #0]
 8007768:	f7f9 fd1c 	bl	80011a4 <_sbrk>
 800776c:	1c43      	adds	r3, r0, #1
 800776e:	d102      	bne.n	8007776 <_sbrk_r+0x1a>
 8007770:	6823      	ldr	r3, [r4, #0]
 8007772:	b103      	cbz	r3, 8007776 <_sbrk_r+0x1a>
 8007774:	602b      	str	r3, [r5, #0]
 8007776:	bd38      	pop	{r3, r4, r5, pc}
 8007778:	20000ca8 	.word	0x20000ca8

0800777c <__malloc_lock>:
 800777c:	4770      	bx	lr

0800777e <__malloc_unlock>:
 800777e:	4770      	bx	lr

08007780 <_init>:
 8007780:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007782:	bf00      	nop
 8007784:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007786:	bc08      	pop	{r3}
 8007788:	469e      	mov	lr, r3
 800778a:	4770      	bx	lr

0800778c <_fini>:
 800778c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800778e:	bf00      	nop
 8007790:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007792:	bc08      	pop	{r3}
 8007794:	469e      	mov	lr, r3
 8007796:	4770      	bx	lr
